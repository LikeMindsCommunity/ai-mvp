Directory structure:
└── docs/
    ├── documentation-overview.md
    ├── chat/
    │   ├── analytics_events.md
    │   ├── intro.md
    │   ├── notification-list.md
    │   ├── notification-using-http-v1.md
    │   ├── notification.md
    │   └── Flutter/
    │       ├── Theming.md
    │       ├── _category_.json
    │       ├── getting-started-chatbot.md
    │       ├── getting-started.md
    │       ├── Core/
    │       │   ├── _category_.json
    │       │   ├── analytics.md
    │       │   ├── notifications.md
    │       │   ├── .DS_Store
    │       │   ├── Guides/
    │       │   │   ├── _category_.json
    │       │   │   ├── custom-chatroom-tags.md
    │       │   │   ├── customise-long-press-on-chat-bubble.md
    │       │   │   ├── customise-long-press-on-chat-bubble.txt
    │       │   │   └── how-to-send-custom-json-data-in-message.md
    │       │   ├── Screens/
    │       │   │   ├── Chatbot.md
    │       │   │   ├── LMChatCreatePollScreen.md
    │       │   │   ├── LMChatExplorePage.md
    │       │   │   ├── LMChatHomeScreen.md
    │       │   │   ├── LMChatPollResultScreen.md
    │       │   │   ├── LMChatReportScreen.md
    │       │   │   ├── LMChatroomParticipantsPage.md
    │       │   │   ├── LMChatroomScreen.md
    │       │   │   ├── Media.md
    │       │   │   └── Screens.md
    │       │   └── Widgets/
    │       │       ├── Widgets.md
    │       │       ├── Chatbot/
    │       │       │   └── LMChatAIButton.md
    │       │       ├── Chatroom/
    │       │       │   ├── LMChatBubble.md
    │       │       │   ├── LMChatBubbleClipper.md
    │       │       │   ├── LMChatBubbleContent.md
    │       │       │   ├── LMChatBubbleFooter.md
    │       │       │   ├── LMChatBubbleHeader.md
    │       │       │   ├── LMChatBubbleMedia.md
    │       │       │   ├── LMChatBubbleReactions.md
    │       │       │   ├── LMChatBubbleReply.md
    │       │       │   ├── LMChatBubbleStates.md
    │       │       │   ├── LMChatMedia.md
    │       │       │   ├── LMChatroomTopic.md
    │       │       │   └── _category_.json
    │       │       ├── Fundamentals/
    │       │       │   ├── _category_.json
    │       │       │   ├── Button/
    │       │       │   │   ├── LMChatButton.md
    │       │       │   │   ├── LMChatFloatingActionButton.md
    │       │       │   │   └── _category_.json
    │       │       │   ├── Dialog/
    │       │       │   │   ├── LMChatDialog.md
    │       │       │   │   └── _category_.json
    │       │       │   ├── Icon/
    │       │       │   │   ├── LMChatIcon.md
    │       │       │   │   └── _category_.json
    │       │       │   ├── Menu/
    │       │       │   │   ├── LMChatMenu.md
    │       │       │   │   ├── LMChatMenuItem.md
    │       │       │   │   └── _category_.json
    │       │       │   ├── Sheets/
    │       │       │   │   ├── LMChatBottomSheet.md
    │       │       │   │   └── _category_.json
    │       │       │   ├── Snackbar/
    │       │       │   │   ├── LMChatSnackBar.md
    │       │       │   │   └── _category_.json
    │       │       │   ├── Text/
    │       │       │   │   ├── LMChatText.md
    │       │       │   │   └── _category_.json
    │       │       │   └── Tile/
    │       │       │       ├── LMChatTile.md
    │       │       │       └── _category_.json
    │       │       ├── Media/
    │       │       │   ├── LMChatGIF.md
    │       │       │   ├── LMChatImage.md
    │       │       │   ├── LMChatLinkPreview.md
    │       │       │   ├── LMChatLinkPreviewBar.md
    │       │       │   ├── LMChatMediaErrorWidget.md
    │       │       │   ├── LMChatVideo.md
    │       │       │   ├── _category_.json
    │       │       │   └── Document/
    │       │       │       ├── LMChatDocumentPreview.md
    │       │       │       ├── LMChatDocumentThumbnail.md
    │       │       │       ├── LMChatDocumentTile.md
    │       │       │       └── _category_.json
    │       │       ├── Poll/
    │       │       │   ├── LMChatPoll.md
    │       │       │   ├── LMChatPollOption.md
    │       │       │   └── _category_.json
    │       │       ├── Profile/
    │       │       │   ├── LMChatProfilePicture.md
    │       │       │   ├── LMChatUserTile.md
    │       │       │   └── _category_.json
    │       │       ├── Reaction/
    │       │       │   ├── LMChatReactionBar.md
    │       │       │   ├── LMChatReactionBottomSheet.md
    │       │       │   ├── LMChatReactionKeyboard.md
    │       │       │   └── _category_.json
    │       │       └── Shimmer/
    │       │           ├── LMChatDocumentShimmer.md
    │       │           ├── LMChatMediaShimmerWidget.md
    │       │           ├── LMChatSkeletonChatPage.md
    │       │           ├── SkeletonChatBox.md
    │       │           └── _category_.json
    │       └── Data/
    │           ├── _category_.json
    │           ├── introduction.md
    │           ├── Chatbot/
    │           │   ├── _category_.json
    │           │   └── get_chatbots.md
    │           ├── Chatroom/
    │           │   ├── _category_.json
    │           │   ├── get_chatroom.md
    │           │   ├── mark_read_chatroom.md
    │           │   ├── mute_chatroom.md
    │           │   ├── Direct Messages/
    │           │   │   ├── _category_.json
    │           │   │   ├── block-unblock-member.md
    │           │   │   └── send-direct-message-request.md
    │           │   └── Group Chat/
    │           │       ├── _category_.json
    │           │       ├── get_participants.md
    │           │       ├── join_chatroom.md
    │           │       ├── leave_chatroom.md
    │           │       └── set_topic_chatroom.md
    │           ├── Community/
    │           │   ├── _category_.json
    │           │   └── community_configurations.md
    │           ├── Conversation/
    │           │   ├── _category_.json
    │           │   ├── delete_conversation.md
    │           │   ├── edit_conversation.md
    │           │   ├── get-conversations.md
    │           │   ├── post_conversation.md
    │           │   ├── Poll/
    │           │   │   ├── _category_.json
    │           │   │   ├── add-poll-option.md
    │           │   │   ├── get-poll-users.md
    │           │   │   ├── post-poll-conversation.md
    │           │   │   └── submit-poll.md
    │           │   └── Reaction/
    │           │       ├── _category_.json
    │           │       ├── delete_reaction.md
    │           │       └── put_reaction.md
    │           ├── Direct Message Feed/
    │           │   ├── _category_.json
    │           │   ├── check-dm-status.md
    │           │   └── get-dm-feed.md
    │           ├── Group Chatroom Feed/
    │           │   ├── _category_.json
    │           │   ├── get-explore-feed.md
    │           │   ├── get-explore-tab-count.md
    │           │   └── get-group-chatrooms.md
    │           ├── Helper/
    │           │   ├── _category_.json
    │           │   ├── decode_url.md
    │           │   └── tag_member.md
    │           ├── Member/
    │           │   ├── _category_.json
    │           │   ├── edit-profile.md
    │           │   ├── get-all-members.md
    │           │   ├── get-current-logged-in-member.md
    │           │   ├── get-member-state.md
    │           │   ├── initiate-user.md
    │           │   ├── logout.md
    │           │   └── validate-user.md
    │           ├── Models/
    │           │   ├── _category_.json
    │           │   ├── chatroom.md
    │           │   ├── community.md
    │           │   ├── conversation.md
    │           │   ├── lm-response.md
    │           │   └── user.md
    │           └── Moderation/
    │               ├── _category_.json
    │               ├── fetch-report-tags.md
    │               └── post-reports.md
    ├── feed/
    │   ├── analytics_events.md
    │   ├── intro.md
    │   ├── notification-list.md
    │   ├── notification-using-http-v1.md
    │   ├── notification.md
    │   └── Flutter/
    │       ├── Theming.md
    │       ├── _category_.json
    │       ├── getting-started.md
    │       ├── Core/
    │       │   ├── _category_.json
    │       │   ├── analytics.md
    │       │   ├── migration_doc.md
    │       │   ├── notifications.md
    │       │   ├── .DS_Store
    │       │   ├── Components/
    │       │   │   ├── _category_.json
    │       │   │   ├── activity_widget.md
    │       │   │   ├── bottom_textfield.md
    │       │   │   ├── comment_list.md
    │       │   │   ├── reply_list.md
    │       │   │   ├── saved_post_list.md
    │       │   │   ├── user_create_comment_list.md
    │       │   │   ├── user_created_post_list.md
    │       │   │   ├── vertical_post.md
    │       │   │   └── video_feed_list.md
    │       │   ├── Guides/
    │       │   │   ├── _category_.json
    │       │   │   ├── configure-topics.md
    │       │   │   ├── configure-web.md
    │       │   │   ├── custom-widget.md
    │       │   │   ├── heading-in-post.md
    │       │   │   ├── how-to-create-custom-widget.md
    │       │   │   ├── how-to-enable-guest-flow.md
    │       │   │   ├── how-to-enable-personalised-feed.md
    │       │   │   ├── how-to-enable-post-sharing-and-parse-deep-links.md.md
    │       │   │   ├── how-to-filter-feed-based-on-custom-widget.md
    │       │   │   ├── how-to-render-feed-for-a-particular-topic.md
    │       │   │   ├── how-to-show-comment-list-as-bottomsheet.md
    │       │   │   ├── how-to-use-custom-media-upload-service.md
    │       │   │   ├── manage-user-connection.md
    │       │   │   ├── post-creation.md
    │       │   │   ├── render-custom-userview-in-comment-tile.md
    │       │   │   └── render-custom-userview-in-post-ui.md
    │       │   ├── Screens/
    │       │   │   ├── LMFeedActivityScreen.md
    │       │   │   ├── LMFeedComposeScreen.md
    │       │   │   ├── LMFeedCreatePollScreen.md
    │       │   │   ├── LMFeedCreateShortVideoScreen.md
    │       │   │   ├── LMFeedEditPostScreen.md
    │       │   │   ├── LMFeedEditShortVideoScreen.md
    │       │   │   ├── LMFeedLikesScreen.md
    │       │   │   ├── LMFeedMediaPreviewScreen.md
    │       │   │   ├── LMFeedPendingPostsScreen.md
    │       │   │   ├── LMFeedPollResultScreen.md
    │       │   │   ├── LMFeedPostDetailScreen.md
    │       │   │   ├── LMFeedQnAScreen.md
    │       │   │   ├── LMFeedReportScreen.md
    │       │   │   ├── LMFeedRoomListScreen.md
    │       │   │   ├── LMFeedRoomScreen.md
    │       │   │   ├── LMFeedSearchScreen.md
    │       │   │   ├── LMFeedSocialScreen.md
    │       │   │   ├── LMFeedVideoFeedScreen.md
    │       │   │   └── _category_.json
    │       │   └── Troubleshooting Guides/
    │       │       ├── _category_.json
    │       │       └── how-to-setup-proguard-for-media-upload.md
    │       ├── Data/
    │       │   ├── __category__.json
    │       │   ├── introduction.md
    │       │   ├── logging.md
    │       │   ├── Comment/
    │       │   │   ├── _category_.json
    │       │   │   ├── add_comment.md
    │       │   │   ├── delete_comment.md
    │       │   │   ├── edit_comment.md
    │       │   │   ├── edit_reply.md
    │       │   │   ├── fetch_comment.md
    │       │   │   ├── fetch_comment_likes.md
    │       │   │   ├── fetch_user_created_comment.md
    │       │   │   ├── like_comment.md
    │       │   │   └── reply_comment.md
    │       │   ├── Community/
    │       │   │   ├── _category_.json
    │       │   │   └── community_configurations.md
    │       │   ├── Connection/
    │       │   │   ├── _category_.json
    │       │   │   ├── connection_meta.md
    │       │   │   ├── send_connection.md
    │       │   │   └── update_connection.md
    │       │   ├── Feed/
    │       │   │   ├── _category_.json
    │       │   │   ├── feedroom.md
    │       │   │   ├── feedroom_list.md
    │       │   │   ├── personalised_feed.md
    │       │   │   ├── saved_post.md
    │       │   │   ├── universal_feed.md
    │       │   │   └── user_created_post.md
    │       │   ├── Feedroom/
    │       │   │   ├── _category_.json
    │       │   │   ├── explore_feedroom.md
    │       │   │   └── join_feedroom.md
    │       │   ├── Helper/
    │       │   │   ├── _category_.json
    │       │   │   ├── decode_url.md
    │       │   │   ├── route_profile.md
    │       │   │   ├── sdk_callback.md
    │       │   │   └── tagging.md
    │       │   ├── Models/
    │       │   │   ├── _category_.json
    │       │   │   ├── activity.md
    │       │   │   ├── comment.md
    │       │   │   ├── community.md
    │       │   │   ├── connection_enum.md
    │       │   │   ├── feedroom.md
    │       │   │   ├── feedroom_order_type.md
    │       │   │   ├── group_tag.md
    │       │   │   ├── like.md
    │       │   │   ├── lm_response.md
    │       │   │   ├── moderation.md
    │       │   │   ├── og_tags.md
    │       │   │   ├── post.md
    │       │   │   ├── topic.md
    │       │   │   ├── user.md
    │       │   │   ├── vote.md
    │       │   │   └── widget.md
    │       │   ├── Moderation/
    │       │   │   ├── _category_.json
    │       │   │   ├── get_report_tags.md
    │       │   │   └── report.md
    │       │   ├── Notification Feed/
    │       │   │   ├── _category_.json
    │       │   │   ├── mark_read.md
    │       │   │   ├── notification_feed.md
    │       │   │   ├── unread_count.md
    │       │   │   └── user_activity.md
    │       │   ├── Post/
    │       │   │   ├── _category_.json
    │       │   │   ├── add_poll_option.md
    │       │   │   ├── create_post.md
    │       │   │   ├── delete_pending_post.md
    │       │   │   ├── delete_post.md
    │       │   │   ├── edit_pending_post.md
    │       │   │   ├── edit_post.md
    │       │   │   ├── fetch_post.md
    │       │   │   ├── fetch_post_likes.md
    │       │   │   ├── get_all_pending_posts.md
    │       │   │   ├── get_pending_post.md
    │       │   │   ├── get_poll_votes.md
    │       │   │   ├── like_post.md
    │       │   │   ├── pin_post.md
    │       │   │   ├── post_seen.md
    │       │   │   ├── save_post.md
    │       │   │   ├── search_post.md
    │       │   │   └── submit_poll_vote.md
    │       │   ├── Topic/
    │       │   │   ├── _category_.json
    │       │   │   ├── get_user_topics.md
    │       │   │   ├── topics.md
    │       │   │   └── update_user_topics.md
    │       │   ├── User/
    │       │   │   ├── _category_.json
    │       │   │   ├── edit_profile.md
    │       │   │   ├── get_blocked_users.md
    │       │   │   ├── get_profile.md
    │       │   │   ├── get_user_feed_meta.md
    │       │   │   ├── initiate_user.md
    │       │   │   ├── logout.md
    │       │   │   ├── member_state.md
    │       │   │   ├── refresh_user.md
    │       │   │   ├── register_device.md
    │       │   │   ├── toggle_block.md
    │       │   │   └── validate_user.md
    │       │   └── Widget/
    │       │       ├── _category_.json
    │       │       └── get_widgets.md
    │       └── UI/
    │           ├── _category_.json
    │           ├── typedef.md
    │           ├── Comment/
    │           │   ├── __category__.json
    │           │   └── comment_widget.md
    │           ├── Fundamental/
    │           │   ├── __category__.json
    │           │   ├── button.md
    │           │   ├── icon.md
    │           │   ├── text.md
    │           │   ├── Extras/
    │           │   │   ├── __category__.json
    │           │   │   ├── appbar.md
    │           │   │   ├── floating_button.md
    │           │   │   ├── loader.md
    │           │   │   └── profile.md
    │           │   └── Tiles/
    │           │       ├── __category__.json
    │           │       ├── tile.md
    │           │       └── user_tile.md
    │           ├── Media/
    │           │   ├── _category_.json
    │           │   ├── carousel.md
    │           │   ├── document.md
    │           │   ├── image.md
    │           │   ├── link.md
    │           │   ├── poll.md
    │           │   └── video.md
    │           ├── Post/
    │           │   ├── __category__.json
    │           │   ├── content.md
    │           │   ├── footer.md
    │           │   ├── header.md
    │           │   ├── media.md
    │           │   ├── menu.md
    │           │   ├── post_widget.md
    │           │   └── topic.md
    │           └── Topic/
    │               ├── _category_.json
    │               ├── topic_bar.md
    │               ├── topic_chip.md
    │               ├── topic_grid.md
    │               └── topic_tile.md
    ├── quickstart-guide/
    │   ├── chat/
    │   │   ├── flutter.md
    │   │   └── flutter.txt
    │   └── feed/
    │       └── flutter.md
    └── rest-api/
        ├── authentication.md
        ├── custom-widget-company-page.md
        ├── deeplink-sharing.md
        ├── feed-data-seeding.md
        ├── how-to-create-and-fetch-custom-widget.md
        ├── notification-feed-customisation.md
        └── webhooks-guide.md

================================================
File: documentation-overview.md
================================================
# Documentation Overview

This document provides an overview of the documentation structure and content organization in our project.

## Directory Structure

```
docs/
├── feed/                      # Feed-related documentation
│   ├── notification.md
│   ├── intro.md
│   ├── notification-list.md
│   ├── notification-using-http-v1.md
│   ├── analytics_events.md
│   └── Flutter/
├── chat/                      # Chat-related documentation
│   ├── notification.md
│   ├── intro.md
│   ├── notification-list.md
│   ├── notification-using-http-v1.md
│   ├── analytics_events.md
│   └── Flutter/
├── rest-api/                  # REST API documentation
│   ├── authentication.md
│   ├── webhooks-guide.md
│   ├── feed-data-seeding.md
│   ├── notification-feed-customisation.md
│   ├── how-to-create-and-fetch-custom-widget.md
│   ├── custom-widget-company-page.md
│   └── deeplink-sharing.md
└── quickstart-guide/          # Getting started guides
    ├── feed/
    └── chat/

```

## Documentation Categories

### Feed Documentation
Contains comprehensive documentation about the feed functionality, including:
- Notification system implementation
- Introduction to feed features
- Notification listing and management
- HTTP v1 notification implementation
- Analytics event tracking
- Flutter-specific implementations

### Chat Documentation
Covers all chat-related features and implementations:
- Chat notification system
- Introduction to chat features
- Chat notification listing
- HTTP v1 chat notifications
- Chat analytics events
- Flutter-specific chat implementations

### REST API Documentation
Provides detailed information about the API endpoints and features:
- Authentication mechanisms
- Webhook implementation guide
- Feed data seeding procedures
- Feed customization options
- Custom widget creation and management
- Company page widget customization
- Deeplink sharing functionality

### Quickstart Guide
Contains quick-start documentation for:
- Feed implementation
- Chat implementation

## Documentation Types

The documentation is organized into several types:

1. **Introductory Guides**: Files named `intro.md` provide overview and getting started information
2. **Feature Documentation**: Detailed documentation about specific features (e.g., notifications, analytics)
3. **Implementation Guides**: Step-by-step instructions for implementing specific functionality
4. **API Reference**: Detailed REST API documentation including authentication and endpoints
5. **Platform-Specific Guides**: Flutter-specific implementation details
6. **Integration Guides**: Webhooks and third-party integration documentation

## File Sizes and Complexity

Notable comprehensive documents:
- `webhooks-guide.md` (15KB): Most extensive documentation covering webhook implementations
- `analytics_events.md` (11-14KB): Detailed analytics implementation guides
- `custom-widget-company-page.md` (5.6KB): Comprehensive widget customization documentation

## Maintenance

This documentation structure is maintained in a Git repository, allowing for version control and collaborative editing. Each major feature (Feed and Chat) has its own dedicated space with parallel documentation structure for consistency. 


================================================
File: chat/analytics_events.md
================================================
---
sidebar_position: 9
title: Chat Analytics Events
---

The SDK has in built analytics events that are trigged for the below listed events. You can track those using tools like [Segment](https://segment.com/), [Mixpanel](https://mixpanel.com/), [Clevertap](https://clevertap.com/) etc. You can find the classes to extend to leverage the events in the following tech stack:

- Android
- iOS

We are working on implementing analytics for Flutter, React Native and ReactJS
:::note
The event name would be prefixed as LM_EventName
:::

| **Event Category**  | **Event Name**             | **Description**                                                  | **Event Properties**                                                                                                                                                                                                                                                                                 |
| ------------------- | -------------------------- | ---------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| Chatroom Analytics  | Chatroom left              | When any member/participant leaves the secret chatroom           | chatroom_name - name of the chatroom<br/>chatroom_id - id of the chatroom<br/>chatroom_type<br/>- normal<br/>- poll<br/>- event<br/>chatroom_category<br/>secret                                                                                                                                     |
| Chatroom Analytics  | Chatroom muted             | When a user mutes any chatroom                                   | chatroom_name - name of the chatroom                                                                                                                                                                                                                                                                 |
| Chatroom Analytics  | Chatroom unmuted           | When a user unmutes any chatroom                                 | chatroom_name - name of the chatroom                                                                                                                                                                                                                                                                 |
| Chatroom Analytics  | Chatroom followed          | When the user follows any chatroom                               | chatroom_id<br/>community_id<br/>chatroom_type - normal, poll, event<br/>source<br/>tagged_auto_followed<br/>chatroom_overflow_menu<br/>chatroom_telescope<br/>community_feed                                                                                                                        |
| Chatroom Analytics  | Chatroom unfollowed        | When a user un-follows any chatroom                              | chatroom_id<br/>source<br/>tagged_auto_followed<br/>chatroom_overflow_menu<br/>community_feed                                                                                                                                                                                                        |
| Chatroom Analytics  | Chatroom responded         | When the user responds to any chatroom                           | community_id - id of community<br/>chatroom_name - name of the chatroom<br/>chatroom_type - as mentioned above<br/>chatroom_last_conversation_type<br/>text<br/>link<br/>image<br/>video<br/>doc<br/>image, doc<br/>audio<br/>count_tagged_users<br/>name_tagged_users                               |
| Chatroom Analytics  | Chatroom opened            | When chatroom is opened from chatroom/home feed                  | chatroom_id<br/>chatroom_type - normal, intro, poll, event, public_event, announcement<br/>source - home_feed, notification, community_feed, deep_link, internal_link<br/>source_chatroom_id (only in case of internal link sharing)<br/>source_community_id (only in case of internal link sharing) |
| Chat Room Analytics | User tags someone          | When user tags another user                                      | community_id - id of community<br/>chatroom_name - name of the chatroom<br/>tagged_user_id - id of user tagged<br/>tagged_user_name - name of user tagged                                                                                                                                            |
| Chatroom Analytics  | View Chatroom participants | When the user tries to see participants of any chatroom          | chatroom_id<br/>community_id<br/>source<br/>chatroom_overflow_menu                                                                                                                                                                                                                                   |
| Chatroom Analytics  | Voice message recorded     | When the user records a voice message                            | chatroom_id<br/>chatroom_type                                                                                                                                                                                                                                                                        |
| Chatroom Analytics  | Voice message previewed    | When the user previews a voice message                           | chatroom_id<br/>chatroom_type                                                                                                                                                                                                                                                                        |
| Chatroom Analytics  | Voice message cancelled    | When the user removes a recorded voice message                   | chatroom_id<br/>chatroom_type                                                                                                                                                                                                                                                                        |
| Chatroom Analytics  | Voice message sent         | When the user sends a voice message                              | chatroom_id<br/>chatroom_type                                                                                                                                                                                                                                                                        |
| Chatroom Analytics  | Voice message played       | When the user plays a voice message                              | chatroom_id<br/>chatroom_type<br/>message_id                                                                                                                                                                                                                                                         |
| Message Actions     | Message deleted            | When a user deletes the messages sent earlier                    | type<br/>text<br/>image<br/>pdf<br/>audio<br/>video<br/>count<br/>chatroom_id                                                                                                                                                                                                                        |
| Message Actions     | Message copied             | When a user copies the messages                                  | type<br/>text<br/>image<br/>pdf<br/>audio<br/>video<br/>count<br/>chatroom_id                                                                                                                                                                                                                        |
| Message Actions     | Message reply              | When a user replies to any particular message                    | type<br/>text<br/>image<br/>pdf<br/>audio<br/>video<br/>count<br/>chatroom_id<br/>replied_to_member_id<br/>replied_to_member_state<br/>replied_to_message_id                                                                                                                                         |
| Message Actions     | Message reported           | When the user reports any message                                | type<br/>text<br/>image<br/>pdf<br/>audio<br/>video<br/>count<br/>`chatroom_id`<br/>`reason_y`                                                                                                                                                                                                       |
| Message Actions     | Messages edited            | When a user edits the messages sent earlier                      | type<br/>text<br/>image<br/>pdf<br/>audio<br/>video<br/>count<br/>chatroom_id<br/>description Updated attributes<br/>- true<br/> -false                                                                                                                                                              |
| Message Reactions   | Emoticon Tray Opened       | When we want to react with an emoticon on any message            | from:<br/>"double tap"<br/>"long press"<br/>"reaction button"<br/>message_id<br/>chatroom_id                                                                                                                                                                                                         |
| Message Reactions   | Reaction Added             | When we react with an emoticon on any message                    | reaction (value: `<emoticon>`)<br/>from (value: <"double tap" / "long press" / "reaction button">)<br/>message_id<br/>chatroom_id                                                                                                                                                                    |
| Message Reactions   | Reaction List Opened       | When someone wants to see the list of all reactions to a message | message_id<br/>chatroom_id                                                                                                                                                                                                                                                                           |
| Message Reactions   | Reaction Removed           | When a user removes the reactions on any message                 | message_id<br/>value: `<chatroom_id>`<br/>chatroom_id                                                                                                                                                                                                                                                |



================================================
File: chat/intro.md
================================================
---
slug: /
sidebar_position: 1
title: "Overview"
---

## Introduction

[![Simple HLD](../static/img/simple_hld.webp)](https://app.eraser.io/workspace/NB7otbW5v56uysKmHYQu)

Welcome to the LikeMinds Chat SDK Getting Started Guide! In this guide, we will walk you through the initial steps to integrate and utilize the LikeMinds Chat SDK in your application. LikeMinds is a powerful platform that enables developers to seamlessly integrate chat functionalities into their applications, enhancing user engagement and communication.
The chat feature allows users to have real-time conversations within your application. It supports features such as sending text messages, media attachments, typing indicators, read receipts, and more.

This guide is designed to provide you with an overview of the LikeMinds Chat SDK and its components. We will cover the setup process, including obtaining an API key from the LikeMinds dashboard, and explain the key concepts and functionalities you need to know to get started quickly.

## Components of LikeMinds

The LikeMinds Chat SDK comprises various components that provide a seamless chat experience. These components include:

1. **Frontend SDKs:** SDKs that power chat inside your application to provide your users a seamless in-app Chat experience. We also have open-source UI kits to help you get up and running effortlessly.
2. **Dashboard:** The LikeMinds dashboard provides options to setup manage users, channels, and features and setup permissions. The dashboard also features moderation capabilities.
3. **Backend REST APIs:** The Backend REST APIs provide the infra to power the in-app chat experience with scalable realtime communication.

![HLD](../static/img/LM_HLD@latest.png)

## Architecture of the SDK

The **LikeMinds Chat SDK** is designed to be modular and flexible, allowing developers to customize every aspect of the chat experience. This document outlines the architecture of the SDK, including its layers, components, and how to implement customizations.

![Architecture Diagram](/img/architecture.png)


The SDK is divided into three layers and components to promote separation of concerns and ease of customization:

1. **Core Layer** - Handles initialization, configuration, and business logic of chat functionalities.
2. **UI Layer** - Gives access to all the widgets required to build the chat screens (in core).
3. **Data Layer** - An API layer that provides access to our backend APIs, models and services.

### Core Layer

#### Purpose
The Core package serves as the backbone of the SDK, managing all business logic, state management, networking, and coordination between different components. It ensures that the application functions seamlessly, handling data processing, user interactions, and integration with backend services.

This is the first layer you will be working with when you are starting to integrate the LikeMinds SDK. It also gives access to all the other layers as well (UI and Data).

#### Structure and Components
The Core package is segmented into various modules, each addressing specific functionalities:
- **Views**: Constructs screens by integrating UI components with business logic.
- **State Management**: Implements the patterns for managing application state.
- **Convertors and Models**: Handles data conversion between different layers and defines data models.
- **Utilities and Services**: Provides utility functions, networking, and notification handling.


### UI Layer

#### Purpose
The UI package is dedicated to building and managing the user interface components of the SDK. It encapsulates all visual elements, ensuring a consistent and reusable set of widgets and UI atoms that can be leveraged across different screens and functionalities. You can combine any combination of these widgets (like molecules) to make any kind of experiences you want. 

#### Structure and Components
The UI package is organized into various directories, each focusing on specific UI elements:
- **Common Widgets**: Reusable UI components like text, icons, tiles, buttons, and more.
- **Conversation**: Widgets specific to chat conversations, like chat bubbles.
- **Polls and Reactions**: UI elements for handling polls and user reactions.
- **Media**: Components handling different media types like images, videos, documents, GIFs, and voice notes.
- **Extras**: Supplementary UI elements such as app bars, loaders, chips, etc.
- **Shimmers**: Placeholder animations for loading states.

### Data Layer

#### Purpose
The Data package is responsible for handling all data-related functionalities, including API requests, data processing, and integration with backend services. It ensures that the application can fetch, store, and manage data efficiently, providing a robust foundation for the SDK's core functionalities.

#### Structure and Components
The Data package is organized into various directories, each focusing on specific data-related functionalities:
- **Client**: The main class that exposes all APIs as public functions. 
- **Models**: Defines data models and structures used throughout the SDK.
- **Services**: Implements API requests, data processing, and integration with backend services.
- **Repositories**: Manages data storage, retrieval, and synchronization.


## Generate API Key

You'll need an API key to integrate the LikeMinds Chat SDK into your application. Follow these steps to obtain your API key from the LikeMinds dashboard:

1. Go to [LikeMinds Dashboard](https://dashboard.likeminds.community) and sign in to your account. You can create one using your work email address if you don't have an account.
   If you are a first time user you would see an option to **“Add your first app”.** You can do so by clicking on the given button

   ![LikeMinds Dashboard](../static/img/dashboard-create-new-app.webp)

2. Now you can navigate to the settings on the sidebar. Under general section you should be able to see an auto generated API key for your account.

   ![Get New API key](../static/img/get-api-key.webp)

3. Make sure to securely store your API key, as it will be required for authentication when making requests to the LikeMinds APIs.

You are now all set to integrate LikeMinds Chat to in your mobile/web application. Check the respective documentation guides for your application.

## SDK size

| Tech Stack                                      | Size    |
| ----------------------------------------------- | ------- |
| Android                                         | 12.3 MB |
| iOS                                             | 14.3 MB |
| Flutter (Android)                               | 4.6 MB  |
| Flutter (iOS)                                   | 7.1 MB  |
| ReactNative (Android, with all dependencies)    | 11.7 MB |
| ReactNative (Android, without all dependencies) | 7.9 MB  |
| ReactNative (iOS, with all dependencies)        | 7.8 MB  |
| ReactNative (iOS, without all dependencies)     | 5.9 MB  |
| ReactJS                                         | 1.2 MB  |



================================================
File: chat/notification-list.md
================================================
---
sidebar_position: 3
title: Notification list
---

| Trigger name                         | Trigger Conditions                                                     | Notification Category | Notification Sub Category       | Message + CTA                                                                                                  | CTA Outcome                                                                        |
| ------------------------------------ | ---------------------------------------------------------------------- | --------------------- | ------------------------------- | -------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- |
| User tagged                          | A member is tagged in a chat room                                      | Chatroom              | User Tagged                     | `user` tagged you! `chatroom name`: `message_text`                                                             | Relevant chat room                                                                 |
| User Reacted                         | A member reacts on a message                                           | Chatroom              | User Reacted                    | `user` reacted on your message with reaction                                                                   | Relevant chat room                                                                 |
| Response in followed chatroom        | A user chats in a followed chat room                                   | Chatroom              | User Responded                  | **`chatroom_name`** <br/>`user`: `message_text`                                                                | Relevant chat room                                                                 |
| A chat room pinned by the CM         | A chat room has been pinned on the community feed by a CM              | Chatroom              | Chatroom pinned by CM           | Chat room pinned! Your community manager `cm_first_name` has just pinned `chat_room_title` on everyone’s feed. | Chat room opened                                                                   |
| Topic in a chat room updated         | A chat room has been updated by either the CM or the chat room creator | Chatroom              | Topic updated                   | Topic updated! The topic of your followed chat room `chatroom_name` has just been updated.                     | Chat room opened with the current topic visible                                    |
| Secret Chat room (member)            | Secret chat room created                                               | Chatroom              | Member added to secret chatroom | Title: `community_name` You have been added to `chatroom_name`                                                 | Relevant chat room                                                                 |
| Secret Chat room (member)            | Member removed from secret chat room                                   | Chatroom              | Member Removed                  | Title: `community_name` <br/> You have been removed from `chatroom_name`                                       | Relevant chat room                                                                 |
| Secret Chat room (Community Manager) | Secret chat room created                                               | Chatroom              | Secret Chatroom Created         | Title: `community_name` user created a secret chat room                                                        | Relevant chat room                                                                 |
| Micro Poll                           | When Micro poll is posted                                              | Chatroom              | Micro poll created              | Title: Time to vote! <br/> Message: user started a poll in `chatroom_room_name` in `community_name`.           | CTAs: Vote (Opens poll room), Follow (Follows the chatroom and open the poll room) |

### Variable Description

| Variable             | Description                                                                              |
| -------------------- | ---------------------------------------------------------------------------------------- |
| `user`               | The username or name of the user who performed an action or was mentioned in the message |
| `chatroom_name`      | The name of the chatroom where the message or action took place                          |
| `message_text`       | The text content of a message                                                            |
| `reaction`           | The specific reaction used by a user on a message                                        |
| `event_room_name`    | The name of an event room or event being referred to                                     |
| `response_text`      | The text of a response or reply                                                          |
| `poll_room_name`     | The name or reference of a poll room                                                     |
| `poll_data`          | Data related to a poll, such as the available choices/options                            |
| `event_name`         | The name or title of an event                                                            |
| `community_name`     | The name of the community or group where the action or event occurs                      |
| `cm_first_name`      | The first name of the community manager who performed an action                          |
| `chat_room_title`    | The title or name of a chat room                                                         |
| `chat_text`          | The text content of a chat message                                                       |
| `chatroom_room_name` | The name of a chatroom or room where a poll or message was posted                        |

### Other relevant definitions

| Word | Definition                                                                              |
| ---- | --------------------------------------------------------------------------------------- |
| CTA  | Call-to-action, indicating a suggested action to be taken, such as accepting or viewing |
| CM   | Community Manager                                                                       |



================================================
File: chat/notification-using-http-v1.md
================================================
---
sidebar_position: 2
title: Setup Notifications
---

# Setup Notifications using FCM HTTP v1

Firebase will be deprecating the legacy FCM APIs and replacing them with the new HTTP v1 API. This also introduces changes to the way the firebase project is authenticated on server-side. For more information please refer to the official announcement by Firebase [here](https://firebase.google.com/docs/cloud-messaging/migrate-v1)

From now, instead of a firebase server key, a JSON file that contains the authentication information related to the project will be required for the notification service to work.

## Firebase Integration

LikeMind SDK now requires service account credentials in the form of a json file that can be obtained from the gcp service account associated to your firebase project to send notifications for messages and other things.

### Step 1: Generate Service Account File for FCM

1.  Go to [Firebase Console](https://console.firebase.google.com/). If you don't have a Firebase project, please create a new project.

     <img src="/img/fcm_server_key_1.png" alt="FCM Server - Firebase Console"/>

2.  Select your project and move to **Project Overview**

3.  Click on the settings icon and select **Project Settings**

     <img src="/img/fcm_server_key_2.png" alt="FCM Server - Project Settings"/>

4.  Go to **Cloud Messaging > Manage service accounts**. clicking this link will take you to the service account section in your gcp console. Make sure you are logged in to gcp from the correct account.

     <img src="/img/fcm_http_v1_1.png" alt="FCM Server - Manage Service Accounts"/>

5.  Click on the name of the service account that is attached to your firebase project. This will take you to the page where service account details can be accessed.

     <img src="/img/fcm_http_v1_2.png" alt="FCM Server - Service Account Details"/>

6.  On clicking the keys tab, you will see the buton that allows you to generate new keys.

     <img src="/img/fcm_http_v1_3.png" alt="FCM Server - Service Account Keys"/>

7.  Click **ADD KEY** and choose **Create new key > JSON > CREATE**

     <img src="/img/fcm_http_v1_4.png" alt="FCM Server - Create Key"/>
     <img src="/img/fcm_http_v1_5.png" alt="FCM Server - Key Type"/>

8.  The JSON file that includes the credentials to your gcp service account should now be downloaded to your system. Keep this file safe.

    <img src="/img/fcm_http_v1_6.png" alt="FCM Server - Service Account JSON File"/>

9.  The final step is to upload the JSON file to the LikeMinds server. The file can be uploaded either from the dashboard itself or by manually calling the upload API. The manual upload consists of the following steps:

    a. Generate OTP using GET `/otp/generate` and params - `country_code` , `mobile_no` ***(dashboard user mobile no.)***

    ```bash
    curl --location 'https://auth.likeminds.community/otp/generate?country_code=91&mobile_no=1234567890'
    ```

    b. Generate `auth_token` using GET `/otp/verify` and params - `country_code` , `mobile_no` ***(dashboard user mobile no.)*** & `otp`.

    ```bash
    curl --location 'https://auth.likeminds.community/otp/verify?country_code=<your_country_code>&mobile_no=<your_mobile_number>&otp=<your_otp>'
    ```

    c. Update `gcp_service_account_file` using API - PUT `/sdk/project` with Headers: `Authorization:<auth_token generated above>` , `x-api-key: <api_key of community>` & Request Body: `gcp_service_account_file : <service account json file contents>`

    ```bash
    curl --location --request PUT 'https://auth.likeminds.community/sdk/project' \
    --header 'Authorization: <auth_token>' \
    --header 'x-api-key: <api_key>' \
    --header 'x-platform-type: dashboard' \
    --data-raw '{
        "gcp_service_account_file": {
            "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
            "auth_uri": "https://accounts.google.com/o/oauth2/auth",
            "client_email": "firebase-adminsdk@your-project-name.iam.gserviceaccount.com",
            "client_id": "1071026063271489",
            "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk%40your-project-name.iam.gserviceaccount.com",
            "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCnONrfmEW5eMAQ\nYBJh9jYzJ0WA7W6KU04k9O8KloDYuGshxgkGkbuovAycYqCWO5fz0dA4KjUWiMCz\nV1ACr+rL86SrXQaTx1KipHpQmZ+Lf8JpK1xRgNthdFH7Qzl9i7cq8Rxtl5h2ny/o\nI/qaznMfTcPy+hBxRaIj7RwZpk5MkCfDLJXrUmak23kH0IXgmQEm7v5NjTrQvJr+\nStU1DuR9uWEmoug8UWE2d//NwyJX2r7KJ00TKeVOMBGq/o0yQOjw/z20pgMRIzwg\neErKjmCJv+q7AiCLb61UzMYtVJBifETbt1jhVVYduwd+xKZEOpm29P8oEk\nQbwulHh7gkgb8bEfffFNtPw7jN7q21zEWC8ZxEU2KQHgHQwYe+fRIxrN9euNMY6D\neRYXSFoqm0qXZ4N5ofJapiH1eLBNA6u+s2jrnHfFsv+Ga3aKqLqvzLkqHqWKavd5\nHGw52Z7Fo2BKAetSw9NBh246Taf798pczg==\n-----END PRIVATE KEY-----\n",
            "private_key_id": "0310b75bf8c217d4983965200",
            "project_id": "your-project-name",
            "token_uri": "https://oauth2.googleapis.com/token",
            "type": "service_account",
            "universe_domain": "googleapis.com"
        }
    }'
    ```

    :::info

    Note: Make sure to replace api*key , auth_token & gcp_service_account_file contents.*

    :::



================================================
File: chat/notification.md
================================================
---
sidebar_position: 10
title: Setup Notifications (Deprecated)
---

# Setup Notifications

:::warning

This method will be deprecated after 20th June 2024. Please check this guide to enable [notification](./notification-using-http-v1)

:::
We allow system notification for the chat related real time notifications to notify users about new chat and changes in the permission they have.

## Firebase Integration

LikeMind SDK requires your server key to send notification of messages or other things.

### Step 1: Generate Server Key for FCM

:::info
If you already have your server key, skip this step and go directly to `Step 2`
:::

1. Go to [Firebase Console](https://console.firebase.google.com/). If you don't have a Firebase project, please create a new project.

![FCM Server - Firebase Console](../static/img/fcm_server_key_1.png)

2. Select your project and move to **Project Overview**

3. Click on the settings icon and select **Project Settings**

![FCM Server - Project Settings](../static/img/fcm_server_key_2.png)

4. Go to **Cloud Messaging > Project credentials** and copy your server key.
   ![FCM Server - Server Key](../static/img/fcm_server_key_3.png)

### Step 2: Register Server key to LikeMinds Dashboard

1. Sign in to [dashboard](http://dashboard.likeminds.community/) and go to **Settings > General**

2. Add your server key in **Firebase Server Key**
   ![FCM Server - Server Key](../static/img/fcm_server_key_4.png)

## Frontend Side Integration

- To configure notifications for Android, head over to [this](./Android/push_notifications.md).



================================================
File: chat/Flutter/Theming.md
================================================
---
sidebar_position: 3  
title: Theming  
slug: /flutter/chat/theming
---

## Getting Started with Theming

The LikeMinds Chat SDK simplifies customizing the appearance of chat widgets. Similar to Flutter’s theming approach, it provides a dedicated class for managing chat themes.

With `LMChatTheme`, you can customize the look and feel of your chat UI by defining attributes through `LMChatThemeData`. It functions similarly to Flutter’s `Theme` and `ThemeData`, ensuring that your custom theme is applied globally across all chat components.

## Detailed Overview of LMChatThemeData

The `LMChatThemeData` class allows customization of the entire chat experience, covering everything from buttons to chat bubbles. Defining properties in `LMChatThemeData` ensures consistency across your application.

### Factory Constructors for `LMChatThemeData`:

```dart
factory LMChatThemeData.light({
    // Color-related properties
    Color? primaryColor,
    Color? backgroundColor,
    ...
    // Style-related properties
    LMChatButtonStyle? buttonStyle,
    LMChatIconStyle? iconStyle,
    ...
});
```

```dart
factory LMChatThemeData.dark({
    // Color-related properties
    Color? primaryColor,
    Color? backgroundColor,
    ...
    // Style-related properties
    LMChatButtonStyle? buttonStyle,
    LMChatIconStyle? iconStyle,
    ...
});
```

### Color-related Properties:

- **`primaryColor`**: Sets the primary color for chat elements.  
- **`backgroundColor`**: Specifies the background color for the chat.  
- **`secondaryColor`**: Defines the secondary color used in the chat theme.  
- **`shadowColor`**: Sets the color of shadows in the UI.  
- **`disabledColor`**: Specifies the color of disabled elements.  
- **`errorColor`**: Defines the color used for error messages.  
- **`inActiveColor`**: Sets the color for inactive elements.  
- **`tagColor`**: Customizes the color of tags.  
- **`hashTagColor`**: Defines the color for hashtags.  
- **`linkColor`**: Specifies the color of hyperlinks.  
- **`scaffold`**: Sets the scaffold background color.  
- **`container`**: Background color of containers.  
- **`onContainer`**: Text color used within containers.  
- **`onPrimary`**: Color for text on primary elements.

### Style-related Properties:

- **`buttonStyle`**: Defines the style for buttons in the chat.  
- **`iconStyle`**: Customizes the appearance of icons.  
- **`textFieldStyle`**: Specifies the appearance of text fields.  
- **`dialogStyle`**: Sets the style for dialogs.  
- **`popUpMenuStyle`**: Customizes the appearance of pop-up menus.  
- **`loaderStyle`**: Defines the style for loaders.  
- **`bottomSheetStyle`**: Customizes the style of bottom sheets.  
- **`snackBarTheme`**: Sets the style for snack bars.  
- **`imageStyle`**: Controls the appearance of images.  
- **`videoStyle`**: Sets the style for video elements.  
- **`documentStyle`**: Defines the appearance of document attachments.  
- **`gifStyle`**: Controls the style of GIFs.  
- **`bubbleStyle`**: Customizes the appearance of chat bubbles.  
- **`replyStyle`**: Defines the style for reply bubbles.  
- **`contentStyle`**: Specifies the content style within bubbles.  
- **`chatTileStyle`**: Sets the appearance of chat tiles.  
- **`stateBubbleStyle`**: Defines the appearance of state bubbles.  
- **`appBarStyle`**: Controls the style of app bars.  
- **`reactionBarStyle`**: Customizes the appearance of the reaction bar.  
- **`reactionBottomSheetStyle`**: Defines the style of the reaction bottom sheet.  
- **`bubbleReactionsStyle`**: Sets the style for bubble reactions.  
- **`reactionKeyboardStyle`**: Customizes the appearance of the reaction keyboard.  
- **`pollStyle`**: Controls the appearance of polls within the chat.

## Applying Custom Themes in Your Application

Here’s an example demonstrating how to apply a custom chat theme using `LMChatThemeData`. In this example, we modify the primary color, background color, and button style:

```dart
// Create an instance of LMChatThemeData using the light theme constructor
LMChatThemeData customChatTheme = LMChatThemeData.light(
  primaryColor: Colors.blue,  // Set primary color to blue
  backgroundColor: Colors.white,  // Set background color to white
  buttonStyle: LMChatButtonStyle.basic().copyWith(
    backgroundColor: Colors.blue,
    textStyle: TextStyle(color: Colors.white),
  ),
);

// Initialize the LikeMinds Chat SDK with the custom theme
void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize LikeMinds Chat SDK with the theme
  await LMChatCore.instance.initialize(
    theme: customChatTheme,
  );

  runApp(MyApp());
}
```

## Changing Fonts

The LikeMinds Chat SDK uses the font defined in your MaterialApp’s `ThemeData` by default. To apply a custom font throughout the chat UI, configure the font family in your MaterialApp. This ensures consistency across all text elements in the chat interface.

Refer to the Flutter [official documentation](https://docs.flutter.dev/cookbook/design/fonts) for detailed guidance on customizing fonts in your application.

## Using your Existing `ThemeData`

If you have an existing `ThemeData` object, you can use it to initialize the `LMChatThemeData` object. This allows you to maintain consistency between your existing theme and the chat theme.

```dart
LMChatThemeData customChatTheme = LMChatThemeData.fromThemeData(YourThemeData());
```

## Using Dark Theme

To use the dark theme, you can use the `LMChatThemeData.dark()` constructor.

```dart
LMChatThemeData customChatTheme = LMChatThemeData.dark();
```

Then you can initialize the SDK with the dark theme.

```dart
await LMChatCore.instance.initialize(
  theme: customChatTheme,
);
```

Or you can use the setter method to change the theme dynamically.

```dart
LMChatTheme.setTheme(customChatTheme);
```


================================================
File: chat/Flutter/_category_.json
================================================
{
  "label": "Flutter",
  "position": 6,
  "link": {
    "type": "generated-index",
    "description": "Flutter Documentation for LikeMinds Chat SDK"
  }
}



================================================
File: chat/Flutter/getting-started-chatbot.md
================================================
---
sidebar_position: 2
title: Getting Started with Chatbot
slug: /flutter/getting-started-with-chatbot
---

# Getting Started with AI Chatbot

You can also directly get started with the chatbot by initialising it using the LikeMinds Chat SDK. This approach is useful when you want to add a chatbot to your application fast, and don't want to deal with the complexities of setting up a complete chat experience. We have made it super easy to get started with the chatbot by providing a simple widget that can be added to your app's UI to allow users to start a chat with the chatbot.

## Prerequisites

Before getting started, ensure you have:

1. Generated API key from [LikeMinds dashboard](https://dashboard.likeminds.community/)
2. The `likeminds_chat_flutter_core` dependency, which can be found [here](https://pub.dev/packages/likeminds_chat_flutter_core)

## Step-by-Step Integration Guide

Before following the steps below, ensure you have completed the steps mentioned in the [Setting up Chatbot](../../tutorials/integrate-ai-chatbot-with-likeminds-chat-sdk) guide. Especially, the steps related to setting up the OpenAI Assistant and integrating it with LikeMinds Chat SDK.

### Step 1 - Installation

Open the terminal, and run the following command in your Flutter project's directory.

```shell
flutter pub add likeminds_chat_flutter_core
```

### Step 2 - Setup LikeMinds Chat

Setup the LMChatCore package in the main function with the following code

```dart
main(){
  // Call setup function before the runApp() function
  await LMChatCore.instance.initialize();
  ...
  runApp(YourApp());
}
```

### Step 3 - Setup the Chatbot Button

Add the [`LMChatAIButton`](./Core/Widgets/Chatbot/LMChatAIButton.md) to your app's UI by placing it in the desired location within your app's widget tree. Ideally, a Floating Action Button (FAB) is the best place to put it.

Pass the required props to the [`LMChatAIButton`](./Core/Widgets/Chatbot/LMChatAIButton.md) widget. A more detailed guide on the props can be found [here](./Core/Widgets/Chatbot/LMChatAIButton.md#props). A sample is given below:

```dart
LMChatAIButton(
  props: LMChatAIButtonProps(
    apiKey: 'your-api-key',
    uuid: 'user-unique-id',
    userName: 'John Doe',
  ),
);
```

Now, whenever the button is pressed, the entire chat experience will be initialised with the provided props. A fresh chatroom (if not already present) will be created with the user's details. And the chatbot will be ready to take the user's queries.

### Congratulations! Your integration is now complete.

<br></br>

<p align="center">
  <img src="https://media0.giphy.com/media/11sBLVxNs7v6WA/giphy.gif?cid=7941fdc63p4lr2sp2zpav78j0zt0jrfvfo7ys4kbrvci4ee4&ep=v1_gifs_search&rid=giphy.gif&ct=g" alt="congratulations"></img>
</p>



================================================
File: chat/Flutter/getting-started.md
================================================
---
sidebar_position: 1
title: Getting Started
---

# Getting Started

The LikeMinds Flutter Chat SDK provides a wrapper layer around the built-in functionalities to provide a seamless integration experience within a single sitting without much configuration needed out of the box.

**Although,** we do provide a high level customisation of all the widgets, screens, and flows being used to power the experience that can be tuned according to the look and feel of your existing apps.

## Prerequisites

Before getting started, ensure you have:

1. Generated API key from [LikeMinds dashboard](https://dashboard.likeminds.community/)
2. The `likeminds_chat_flutter_core` dependency, which can be found [here](https://pub.dev/packages/likeminds_chat_flutter_core)

## Step-by-Step Integration Guide

Follow these steps to integrate the LikeMinds Chat SDK into your Flutter application:

### Step 1 - Installation

Open the terminal, and run the following command in your Flutter project's directory.

```shell
flutter pub add likeminds_chat_flutter_core
```

### Step 2 - Setup LikeMinds Chat

Setup the LMChatCore package in the main function with the following code

```dart
main(){
// Call setup function before the runApp() function
await LMChatCore.instance.initialize();
...
runApp(YourApp());
}
```

### Step 3 - Initiate User Session

When integrating the LikeMinds Chat SDK into your application, you have the option to initiate a user session using one of two approaches:

#### 1. With API Key (Client Side Authentication)

This approach should be used when you want to manage LikeMinds authentication tokens on frontend. In this case you provide API Key directly to LikeMinds Chat SDK, which will be used to initiate a user session by calling **showChatWithApiKey()** method from `LMChatCore`.

```dart
// initiate user session, use the response to check for any errors
 LMResponse<void> response = await LMChatCore.instance.showChatWithApiKey(
  apiKey : "YOUR_API_KEY",
  uuid : "USER_ID",
  userName : "USER_NAME",
);
```

#### 2. Without API Key (Server Side Authentication)

This approach should be used when you want to manage LikeMinds authentication tokens on your backend server. In this case you eliminate the need to expose your API Key to your client app and your backend server is responsible for calling the [initiate API](https://docs.likeminds.community/rest-api/#/operations/sdkInitate) to obtain the `accessToken` and `refreshToken`.

1. Create a function to get `accessToken` and `refreshToken` from your backend using [initiate API](https://docs.likeminds.community/rest-api/#/operations/sdkInitate)

```dart
Future<(String, String)> getTokens() async {
...
// implementation
...
return (accessToken, refreshToken);
}
```

2. Set up the `LMChatCore` package in the main function with the following code and pass `LMChatCoreCallback`

:::info
`LMChatCoreCallback` has two callbacks:

1. **onAccessTokenExpiredAndRefreshed:** This callback is triggered when the provided `accessToken` expires and is refreshed internally using the `refreshToken`.

2. **onRefreshTokenExpired:** This callback is triggered when the provided `refreshToken` expires. In this case, you need to provide a new `accessToken` and `refreshToken` from your backend function using our [initiate API](https://docs.likeminds.community/rest-api/#/operations/sdkInitate).

:::

```dart
main(){
// Call setup function before the runApp() function
await LMChatCore.instance.initialize(
  lmChatCallback: LMChatCoreCallback(
    onAccessTokenExpiredAndRefreshed: (accessToken, refreshToken) {
      debugPrint("Access token expired and refreshed");
    },
    onRefreshTokenExpired: () async {
      // get accessToken, refreshToken from your backend
      final (accessToken, refreshToken) = await getTokens();
      // return `LMAuthToken` with `accessToken` and `refreshToken` received from your backend
      return (LMAuthTokenBuilder()
            ..accessToken(accessToken!)
            ..refreshToken(refreshToken!))
          .build();
    },
  ),
);
...
runApp(YourApp());
}
```

3. Use the `getTokens()` function
   Use the `getTokens()` function, to fetch the tokens to login without API Key. Upon receiving the `accessToken` and
   `refreshToken`, call `LMChatCore.instance.showChatWithoutApiKey()` function with these tokens.

```dart
// get accessToken, refreshToken from your backend
final (accessToken, refreshToken) = await getTokens();
LMResponse response =
    await LMChatCore.instance.showChatWithoutApiKey(
      accessToken : "YOUR_ACCESS_TOKEN",
      refreshToken : "YOUR_REFRESH_TOKEN",
    );
```

### Step 4 - Navigation to Chat

On successful response of the above snippet you can simply navigate to the `LMChatHomeScreen`, and start using Chat in your app

```dart
if (response.success) {
  MaterialPageRoute route = MaterialPageRoute(
    builder: (context) => const LMChatHomeScreen(),
  );

  Navigator.pushReplacement(context, route);
}
```

:::tip
By choosing the appropriate method based on your backend infrastructure and security preferences, you can seamlessly integrate the Chat SDK into your application while ensuring secure and efficient session management.
:::

### Congratulations! Your integration is now complete.

<br></br>

<p align="center">
  <img src="https://media0.giphy.com/media/11sBLVxNs7v6WA/giphy.gif?cid=7941fdc63p4lr2sp2zpav78j0zt0jrfvfo7ys4kbrvci4ee4&ep=v1_gifs_search&rid=giphy.gif&ct=g" alt="congratulations"></img>
</p>



================================================
File: chat/Flutter/Core/_category_.json
================================================
{
  "label": "Core",
  "position": 4,
  "link": {
    "type": "generated-index",
    "description": "Documentation for Core Layer Widgets in Chat"
  }
}



================================================
File: chat/Flutter/Core/analytics.md
================================================
---
sidebar_position: 3
title: Analytics
slug: /flutter/analytics
---

# Analytics

The LikeMinds SDK offers a comprehensive set of predefined user events that can be tracked within your chat application.

For a complete list of events being tracked, please refer to the [Analytics Events](../../analytics_events) documentation.

## Prerequisites

Before integrating the LikeMinds SDK, ensure that you have the following prerequisites:

1. A Flutter project that is properly set up and running.
2. The LikeMinds Flutter Chat SDK installed and initialized in your project.

## Callback

To effectively receive and manage analytics events, you need to implement the analytics listener function. This function will be triggered whenever an analytics event occurs, allowing you to define custom handling logic as needed. Below is an example of how to implement this listener:

```dart
void _analyticListener(LMChatAnalyticsEventFired state) {
    debugPrint(
        "Analytics Event Caught: ${state.eventName} : ${state.eventProperties.toString()}",
    );
    // Implement your custom logic here to process the analytics events,
    // such as forwarding them to your analytics service.
    // For instance:
    // YourAnalyticsService.logEvent(state.eventName, state.eventProperties);
}
```

The `LMChatAnalyticsEventFired` state is emitted whenever an analytics event is triggered within the SDK.

- **`String eventName`**: The name of the triggered event.
- **`Map<String, dynamic> eventProperties`**: A collection of properties associated with the specific event.

## Example Implementation

When initializing the LikeMinds Chat SDK, you must pass the `dynamic Function(LMChatAnalyticsEventFired)? analyticsListener` parameter to the `initialize()` function. This allows the SDK to utilize your custom listener for handling analytics events. Here’s how to set it up:

```dart
await LMChatCore.instance.initialize(
    analyticsListener: _analyticListener
);
```



================================================
File: chat/Flutter/Core/notifications.md
================================================
---
sidebar_position: 4
title: Push Notifications
slug: /flutter/push-notification
---

# Push Notifications 

Push notifications are essential for engaging users and keeping them informed about important updates and events within your Flutter application. This guide will walk you through the process of setting up push notifications for use with the LikeMinds Flutter Chat SDK.

Refer to [Notification List](../../notification-list.md) to see the list of notifications triggered.

## Prerequisites

Before proceeding with the integration, make sure you have the following prerequisites in place:

1. A Flutter project set up and running.
2. The LikeMinds Flutter Chat SDK installed and initialized in your project.
3. A Firebase project created for your application.
4. GCP Service Account File: Obtain the GCP service account file from the Firebase Console. [Here](../../notification-using-http-v1.md) is the guide to use them.

## Implementation


To set up notifications, you'll need to use some common Flutter libraries to get device information, set up notifications, access tokens, and manage permissions. The LikeMinds Flutter Chat SDK requires the `deviceId`, and `fcmToken` to register the device for notifications.


### Step 1: Set up Firebase in your Flutter project

1. Add the Firebase SDK to your Flutter project by following the official Firebase Flutter setup guide.
2. Obtain the Firebase configuration files (`google-services.json` for Android and `GoogleService-Info.plist` for iOS) and add them to your project.
4. Initialize Firebase in your Flutter app.


### Step 2: Set up notifications in your Flutter project

#### 1. Set up notifications

Initialize your Firebase app, and initialise the `LMChatNotificationHandler`. Here's a boilerplate code example for reference:

```dart
void setupNotifications() async {
  await Firebase.initializeApp();
  final devId = await deviceId();
  final fcmToken = await setupMessaging();
  if (fcmToken == null) {
    debugPrint("FCM token is null or permission declined");
    return;
  }
  // Initialise the LMChatNotificationHandler
  LMChatNotificationHandler.instance.init(
    deviceId: devId, 
    fcmToken: fcmToken,
  );
}
```

#### 2. Get the device ID

You can use the `device_info_plus` plugin to get the device ID. Here's an example:

```dart
import 'package:device_info_plus/device_info_plus.dart';

Future<String> deviceId() async {
  final deviceInfo = await DeviceInfoPlugin().deviceInfo;
  final deviceId = deviceInfo.data["identifierForVendor"] 
    ?? deviceInfo.data["id"];
  debugPrint("Device id - $deviceId");
  return deviceId.toString();
}
```

#### 3. Set up Firebase Messaging

Use the `firebase_messaging` plugin to get the FCM token and initialize the messaging instance:

```dart
import 'package:firebase_messaging/firebase_messaging.dart';

Future<String?> setupMessaging() async {
  final messaging = FirebaseMessaging.instance;
  final settings = await messaging.requestPermission(...);
  // Get the token only when permission is granted
  if (settings.authorizationStatus == AuthorizationStatus.authorized) {
    final token = await messaging.getToken();
    return token.toString();
  } else {
    return null;
  }
}
```

#### 4. Initialize in main()

Call the `setupNotifications()` function in your `main()` function before running your Flutter application:

```dart
void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  setupNotifications();
  runApp(const MyApp());
}
```

### Handling Notifications

The LikeMinds Flutter Chat SDK provides methods to handle notifications in different app states:

1. Use `handleBackgroundNotification` for notifications received when the app is in the background or terminated.

```dart
  await LMChatNotificationHandler.instance
      .handleBackgroundNotification(RemoteMessage message);
```

2. Use `handleNotification` for notifications received when the app is in the foreground.

```dart
   await LMChatNotificationHandler.instance
      .handleNotification(
        RemoteMessage message, 
        bool show, 
        GlobalKey<ScaffoldMessengerState> rootNavigatorKey,
      );
```

For more detailed information on implementation, refer to the code examples in `main.dart` and `notification_handler.dart` provided in the SDK code [here](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/fb1c8c004013be7a1ec6ca078f5a76bfa14689ef/example/lib/main.dart).


================================================
File: chat/Flutter/Core/.DS_Store
================================================
[Non-text file]


================================================
File: chat/Flutter/Core/Guides/_category_.json
================================================
{
  "label": "Guides",
  "position": 3,
  "link": {
    "type": "generated-index",
    "description": "How-Tos and guides related to Core library in LikeMinds Flutter Chat SDK"
  }
}


================================================
File: chat/Flutter/Core/Guides/custom-chatroom-tags.md
================================================
---
sidebar_position: 1
title: How to Filter Chatroom based on Tags?
slug: /flutter/core/guide/how-to-filter-chatroom-based-on-tags
---

# How to Filter Chatroom based on Tags?

## Introduction

This guide explains how to filter the home feed based on tags using the LikeMinds Chat Flutter SDK. This is useful when you want to add custom tags to your chatroom. And filter the home feed based on these tags. Only the tags passed while initializing the `LMChatCore` will be used for filtering.

## Prerequisites

Before you begin, ensure the following:

- **LikeMinds Chat Flutter SDK:** The SDK must be properly installed and initialized in your Flutter project. Refer to the [installation guide](https://docs.likeminds.community/chat/Flutter/getting-started/) if needed.
- **Basic Understanding of Flutter:** Familiarity with Flutter widgets and navigation.

## Steps to Add Tags and Filter the List

### Step 1: Setup Chatroom Tags

To setup the chatroom tags, you can use our API. Before you can use the API, you need to get the `AUTH-TOKEN` for the user. You can set this up using the following [Authentication guide](../../../../rest-api/authentication).

Using the snippet below and the cURL request, you can setup the chatroom tags using the API.

```bash
curl --location --request PUT 'https://auth.likeminds.community/chatroom' \
--header 'Authorization: <AUTH-TOKEN>' \
--header 'x-platform-type: dashboard' \
--header 'Content-Type: application/json' \
--data '{
    "chatroom_id": <CHATROOM-ID>, 
    "tag": "<YOUR-TAG-HERE>"
}'
```

### Step 2: Configure Chatroom Tags in SDK

While initializing the SDK, pass the tags you want to filter the home feed by. This can be done by passing the `LMChatHomeConfig` in the `LMChatConfig` object to the `initialize` method. The configuration classes are available in the `likeminds_chat_core` package.


```dart
LMFeedCore.instance.initialize(
    config: LMChatConfig(
        homeConfig: const LMChatHomeConfig(
            setting: LMChatHomeSetting(tag: "YOUR-TAG-HERE"),
        ),
    ),
);
```

Optionally, you can also pass the chatroom tag parameter in the `LMChatHomeFeedList` widget. This will filter the home feed based on the tag passed.

```dart
LMChatHomeFeedList(
    chatroomTag: "YOUR-TAG-HERE",
);
```

This completes the setup for using custom chatroom tags within the SDK.



================================================
File: chat/Flutter/Core/Guides/customise-long-press-on-chat-bubble.md
================================================
---
sidebar_position: 2
title: How to Customise Long Press on a Message?
slug: /flutter/core/guide/how-to-customise-long-press-on-a-message
---

# How to Customise Long Press on a Message?

## Introduction

This guide explains how to customize the long press behavior on chat bubbles using the LikeMinds Chat Flutter SDK. By implementing a custom builder delegate, you can add your own logic when users long press on sent or received messages in a chatroom.

## Prerequisites

Before you begin, ensure the following:

- **LikeMinds Chat Flutter SDK:** The SDK must be properly installed in your Flutter project. Refer to the [installation guide](https://docs.likeminds.community/chat/Flutter/getting-started/) if needed.
- **Basic Understanding of Flutter:** Familiarity with Flutter widgets and state management.

## Steps to Customise Long Press on a Message

### Step 1: Create a Custom Chatroom Builder Delegate

Create a class that extends `LMChatroomBuilderDelegate` to customize the chat bubble behavior:

```dart
class CustomBuilder extends LMChatroomBuilderDelegate {
  @override
  Widget sentChatBubbleBuilder(
    BuildContext context,
    LMChatConversationViewData conversation,
    LMChatBubble bubble,
  ) {
    return bubble.copyWith(
      onLongPress: (isSelected, state) {
        debugPrint("Long pressed");
        // Add your custom logic here
        bubble.onLongPress?.call(isSelected, state);
      },
    );
  }

  @override
  Widget receivedChatBubbleBuilder(
    BuildContext context,
    LMChatConversationViewData conversation,
    LMChatBubble bubble,
  ) {
    return bubble.copyWith(
      onLongPress: (isSelected, state) {
        debugPrint("Long pressed");
        // Add your custom logic here
        bubble.onLongPress?.call(isSelected, state);
      },
    );
  }
}
```

The `onLongPress` callback provides two parameters:
- `isSelected`: Boolean indicating if the message is currently selected
- `state`: The state object of the chat bubble widget

### Step 2: Initialize SDK with the Custom Chatroom Builder

When initializing the SDK, configure it to use your custom chatroom builder:

```dart
void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  
  await LMChatCore.instance.initialize(
    config: LMChatConfig(
      chatRoomConfig: LMChatroomConfig(
        builder: CustomBuilder(),
      ),
    ),
  );
  
  runApp(const YourApp());
}
```
## Steps to Customise the Reaction Bar on Long Press of a Message

### Step 1: Extend the Reaction Bar Builder

Pass the `reactionBarBuilder` parameter in the custom builder's chat bubble builder to build a custom reaction dialog.

To know more about the `LMChatReactionBar` widget, you can refer to the [Reaction Bar](../Widgets/Reaction/LMChatReactionBar.md) widget documentation.

```dart
class CustomBuilder extends LMChatroomBuilderDelegate {
  @override
  Widget sentChatBubbleBuilder(BuildContext context, LMChatConversationViewData conversation, LMChatBubble bubble) {
    return bubble.copyWith(
      reactionBarBuilder: (reactionBar) {
        final onTap = reactionBar.onReaction; // This is the callback for the reaction tap
        return Container(); // Your custom reaction dialog widget
      },
    );
  }
}
```

### Step 2: Initialize SDK with the Custom Chatroom Builder

When initializing the SDK, configure it to use your custom chatroom builder:

```dart
void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  
  await LMChatCore.instance.initialize(
    config: LMChatConfig(
      chatRoomConfig: LMChatroomConfig(
        builder: CustomBuilder(),
      ),
    ),
  );
  
  runApp(const YourApp());
}
```

## Steps to Customise the Actions on Long Press of a Message

### Step 1: Define the Selection Type

In the configuration class, you can also define how you want to show the message actions of a chat bubble. Our defualt implementation is showing the actions in the AppBar of the Chatroom screen. You can choose either that or the floating action dialog. 

To do this, use the `LMSelectionType` enum, and pass its value in the settings of the `LMChatroomConfig`.

The `LMChatSelectionType` enum specifies how selection actions are displayed in a chatroom:

- `appbar`: Selection actions appear in the app bar
- `floating`: Selection actions appear in a floating action button 
- `bottomsheet`: Selection actions appear in a bottom sheet


### Step 2: Initialize SDK with the Custom Chatroom Settings

When initializing the SDK, configure it to use your custom chatroom settings:

```dart
void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  
  await LMChatCore.instance.initialize(
    config: LMChatConfig(
      chatRoomConfig: LMChatroomConfig(
         setting: const LMChatroomSetting(
          selectionType: LMChatSelectionType.floating,
        ),
      ),
    ),
  );
  
  runApp(const YourApp());
}
```

This completes the setup for customizing long press behavior on chat bubbles within the SDK.



================================================
File: chat/Flutter/Core/Guides/customise-long-press-on-chat-bubble.txt
================================================
---
sidebar_position: 2
title: How to Customise Long Press on a Message?
slug: /flutter/core/guide/how-to-customise-long-press-on-a-message
---

# How to Customise Long Press on a Message?

## Introduction

This guide explains how to customize the long press behavior on chat bubbles using the LikeMinds Chat Flutter SDK. By implementing a custom builder delegate, you can add your own logic when users long press on sent or received messages in a chatroom.

## Prerequisites

Before you begin, ensure the following:

- **LikeMinds Chat Flutter SDK:** The SDK must be properly installed in your Flutter project. Refer to the [installation guide](https://docs.likeminds.community/chat/Flutter/getting-started/) if needed.
- **Basic Understanding of Flutter:** Familiarity with Flutter widgets and state management.

## Steps to Customise Long Press on a Message

### Step 1: Create a Custom Chatroom Builder Delegate

Create a class that extends `LMChatroomBuilderDelegate` to customize the chat bubble behavior:

```dart
class CustomBuilder extends LMChatroomBuilderDelegate {
  @override
  Widget sentChatBubbleBuilder(
    BuildContext context,
    LMChatConversationViewData conversation,
    LMChatBubble bubble,
  ) {
    return bubble.copyWith(
      onLongPress: (isSelected, state) {
        debugPrint("Long pressed");
        // Add your custom logic here
        bubble.onLongPress?.call(isSelected, state);
      },
    );
  }

  @override
  Widget receivedChatBubbleBuilder(
    BuildContext context,
    LMChatConversationViewData conversation,
    LMChatBubble bubble,
  ) {
    return bubble.copyWith(
      onLongPress: (isSelected, state) {
        debugPrint("Long pressed");
        // Add your custom logic here
        bubble.onLongPress?.call(isSelected, state);
      },
    );
  }
}
```

The `onLongPress` callback provides two parameters:
- `isSelected`: Boolean indicating if the message is currently selected
- `state`: The state object of the chat bubble widget

### Step 2: Initialize SDK with the Custom Chatroom Builder

When initializing the SDK, configure it to use your custom chatroom builder:

```dart
void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  
  await LMChatCore.instance.initialize(
    config: LMChatConfig(
      chatRoomConfig: LMChatroomConfig(
        builder: CustomBuilder(),
      ),
    ),
  );
  
  runApp(const YourApp());
}
```
## Steps to Customise the Reaction Bar on Long Press of a Message

### Step 1: Extend the Reaction Bar Builder

Pass the `reactionBarBuilder` parameter in the custom builder's chat bubble builder to build a custom reaction dialog.

To know more about the `LMChatReactionBar` widget, you can refer to the [Reaction Bar](../Widgets/Reaction/LMChatReactionBar.md) widget documentation.

```dart
class CustomBuilder extends LMChatroomBuilderDelegate {
  @override
  Widget sentChatBubbleBuilder(BuildContext context, LMChatConversationViewData conversation, LMChatBubble bubble) {
    return bubble.copyWith(
      reactionBarBuilder: (reactionBar) {
        final onTap = reactionBar.onReaction; // This is the callback for the reaction tap
        return Container(); // Your custom reaction dialog widget
      },
    );
  }
}
```

### Step 2: Initialize SDK with the Custom Chatroom Builder

When initializing the SDK, configure it to use your custom chatroom builder:

```dart
void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  
  await LMChatCore.instance.initialize(
    config: LMChatConfig(
      chatRoomConfig: LMChatroomConfig(
        builder: CustomBuilder(),
      ),
    ),
  );
  
  runApp(const YourApp());
}
```

## Steps to Customise the Actions on Long Press of a Message

### Step 1: Define the Selection Type

In the configuration class, you can also define how you want to show the message actions of a chat bubble. Our defualt implementation is showing the actions in the AppBar of the Chatroom screen. You can choose either that or the floating action dialog. 

To do this, use the `LMSelectionType` enum, and pass its value in the settings of the `LMChatroomConfig`.

The `LMChatSelectionType` enum specifies how selection actions are displayed in a chatroom:

- `appbar`: Selection actions appear in the app bar
- `floating`: Selection actions appear in a floating action button 
- `bottomsheet`: Selection actions appear in a bottom sheet


### Step 2: Initialize SDK with the Custom Chatroom Settings

When initializing the SDK, configure it to use your custom chatroom settings:

```dart
void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  
  await LMChatCore.instance.initialize(
    config: LMChatConfig(
      chatRoomConfig: LMChatroomConfig(
         setting: const LMChatroomSetting(
          selectionType: LMChatSelectionType.floating,
        ),
      ),
    ),
  );
  
  runApp(const YourApp());
}
```

This completes the setup for customizing long press behavior on chat bubbles within the SDK.



================================================
File: chat/Flutter/Core/Guides/how-to-send-custom-json-data-in-message.md
================================================
---
sidebar_position: 3
title: How to send metadata in a message to render custom UI?
slug: /flutter/core/guides/how-to-send-metadata-in-a-message-to-render-custom-ui
---

# How to send metadata in a message to render custom UI?

The LikeMinds Chat SDK enables developers to send custom JSON data within a message, allowing for enhanced functionality and tailored features to meet the specific needs of your application.

To send custom JSON data with a message, you can create a custom message list screen and pass it to the SDK's component registry. This gives you full control over how messages are created and displayed, enabling the attachment of custom data.

In this guide, we will walk you through the process of setting up a custom message list screen and sending custom data along with your messages.

## Prerequisites

Before you begin, ensure the following:

- **LikeMinds Chat Flutter SDK**: The SDK must be properly installed and initialized in your Flutter project. Refer to the [installation guide](../../getting-started.md) if needed.

## How to enable Custom Widget?

**Enable Custom Widgets using Dashboard**: Before moving forward, you need to login into the LikeMinds Dashboard and enable the Custom Widget feature for your community.

1.  **Open** your [LikeMinds Admin Dashboard](https://dashboard.likeminds.community/home).
2.  **Navigate** to the [Chat Settings Section](https://dashboard.likeminds.community/chat/settings).
3.  **Enable** Custom Widget in Chat Setting.

## How to send custom data using custom widget?

Sending custom data in messages enables developers to enhance the functionality and interactivity of their chat application. The LikeMinds Chat SDK provides the flexibility to attach `metadata: (Map<String,dynamic>)` to messages, allowing you to define custom widgets or features that suit your application's specific requirements.

By using `LMChatConversationBloc` and utilizing the `LMChatPostConversationEvent`, you can seamlessly pass custom data with each message.

## Steps to send Custom Data in a message

### Step 1: Create an instance of `LMChatPostConversationEvent`

First, create an instance of `LMChatPostConversationEvent` and pass the necessary parameters, including the `metadata: (Map<String,dynamic>)`.

```dart
LMChatPostConversationEvent postConversationEvent = LMChatPostConversationEvent(
    chatroomId: LMChatConversationBloc.currentChatroomId, // Replace with the chatroomId you need to post the conversation in
    text: "YOUR_TEXT_MESSAGE",
    metadata: const {
      "key": "value",
    },
);
```

:::info
To get the `chatroomId` of the current chatroom, use `LMChatConversationBloc.currentChatroomId`.
:::

### Step 2: Add the event to **`LMChatConversationBloc`**

Next, get the instance of `LMChatConversationBloc` and add the event with the metadata.

```dart
LMChatConversationBloc.instance.add(postConversationEvent);
```

### Step 3: Listen to `LMChatConversationBloc` State Updates \[Optional\]

Use a `BlocListener` to listen for changes in the `LMChatConversationBloc`. Whenever you add a `LMChatPostConversationEvent`, the bloc will emit different states throughout the flow of posting a message. Here is a minimal example:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:likeminds_chat_fl/likeminds_chat_fl.dart'; // or your correct import for the Bloc classes

class CustomChatScreen extends StatelessWidget {
  const CustomChatScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return BlocListener<LMChatConversationBloc, LMChatConversationState>(
      bloc: LMChatConversationBloc.instance, // Reference the bloc instance
      listener: (context, state) {
        // Handle each state accordingly
        if (state is LMChatLocalConversationState) {
          // This state is emitted when a temporary/local message is created
          // (e.g., to show an immediate message bubble before posting).
          debugPrint("Local Conversation State: ${state.conversation.text}");
        } else if (state is LMChatConversationPostedState) {
          // This state is emitted when the conversation has successfully posted.
          // You can update the UI, show success, or refresh the conversation list.
          debugPrint("Conversation Posted: ${state.conversation.text}");
        } else if (state is LMChatConversationErrorState) {
          // This state is emitted if there's an error during posting.
          debugPrint("Error: ${state.errorMessage} for TempId: ${state.tempId}");
          // You can show an error snack bar or message to the user.
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text(state.errorMessage)),
          );
        }
      },
      child: Scaffold(
        appBar: AppBar(title: const Text('Custom Chat Screen')),
        body: const Center(
          child: Text('Your chat UI goes here'),
        ),
      ),
    );
  }
}
```

:::info
Without this step, conversations will still post successfully. This listener only provides a mechanism for additional client-side analytics or event handling.
:::

#### States Emitted by `postConversationEventHandler`

1. `LMChatLocalConversationState`

   - Emitted when a local/temporary message object is created and added to the UI immediately (before the actual network call completes).
   - Use this to show a "pending" message bubble in your chat interface.

2. `LMChatConversationPostedState`

   - Emitted when the message has been **successfully posted** to the server and a final `conversationViewData` is returned.
   - You can update the temporary message with the final server response (e.g., real message ID, timestamp).

3. `LMChatConversationErrorState`
   - Emitted when **posting the message fails** due to network errors, server errors, or any exceptions.
   - Typically handle this by showing an error message or updating the local message state to indicate failure.

---

## How to render the custom data in message?

Rendering custom views for messages allows you to create personalized and dynamic messaging experiences tailored to your application's needs. By extending the LikeMinds Chat SDK, you can use metadata to attach additional data to messages and render custom UI elements based on this data. This approach enables developers to go beyond default message templates

In this guide, we will walk you through rendering custom views for messages containing metadata. By extending the `LMChatroomBuilderDelegate` class, you can define custom layouts and behavior to dynamically render data specific to each message.

## Steps to Render Custom Data in a message

### 1. Implement a Custom Builder Delegate

The `LMChatroomBuilderDelegate` allows you to override specific builders used by the SDK. By overriding `customChatBubbleBuilder`, you can inject your custom widget wherever the SDK detects custom metadata in a conversation.

1. Create a new Dart file (e.g., `custom_builder_delegate.dart`).
2. Extend `LMChatroomBuilderDelegate`.
3. Override `customChatBubbleBuilder` to return your newly created custom widget.

```dart title="custom_builder_delegate.dart"
import 'package:flutter/material.dart';
import 'package:likeminds_chat_fl/likeminds_chat_fl.dart';
import 'custom_chat_bubble.dart';

class CustomChatroomBuilderDelegate extends LMChatroomBuilderDelegate {
  /// This method is called whenever a conversation has a custom widget
  /// or needs a custom bubble.
  @override
  Widget customChatBubbleBuilder(
    BuildContext context,
    LMChatConversationViewData conversation,
    int chatroomId,
  ) {
    // Return your custom chat bubble widget
    return CustomChatBubble(conversation: conversation);
  }
}
```

:::info
To access Custom Widget associated with a Conversation model, use the `conversation.widget` variable.
:::

---

### 2. Replace the Default Chat Bubble Builder

In your app’s entry point (often `main.dart`), configure `LMChatCore` with a custom `LMChatroomBuilderDelegate` to replace the default chat bubble builder.

```dart title="main.dart"
import 'package:flutter/material.dart';
import 'package:likeminds_chat_fl/likeminds_chat_fl.dart';
import 'custom_builder_delegate.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize any other services or plugins here, e.g.:
  // setupNotifications();

  // Initialize LMChatCore with your builder delegate
  await LMChatCore.instance.initialize(
    config: LMChatConfig(
      chatRoomConfig: LMChatroomConfig(
        builder: CustomChatroomBuilderDelegate(),
      ),
    ),
  );

  // ...
}
```

---

## Conclusion

By following this guide, you can create custom widgets for messages and render them dynamically using metadata. This approach provides flexibility to tailor the messaging experience to your application's specific requirements.



================================================
File: chat/Flutter/Core/Screens/Chatbot.md
================================================
---
sidebar_position: 8
title: Chatbot Screen
slug: /flutter/core/screens/chatbot-screen
---

# Chatbot Screen

### Introduction
The **AI Chatbot Initiation Screen** serves as an intermediate loading screen while setting up and navigating to an AI chatbot conversation. It displays an animation and status text while performing the necessary initialization steps in the background.

---

### `LMChatAIBotInitiationScreen` Widget
**File Location:**  
[init_chatbot.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/chatbot/init_chatbot.dart)

#### Class Declaration

```dart
class LMChatAIBotInitiationScreen extends StatefulWidget {
  final String? animationToShow;
  final LMChatTextBuilder? previewText;

  const LMChatAIBotInitiationScreen({
    Key? key,
    this.animationToShow,
    this.previewText,
  }) : super(key: key);
}
```

#### Properties

| Property          | Type                 | Description                                                              |
|-------------------|----------------------|--------------------------------------------------------------------------|
| `animationToShow` | `String?`            | Custom Lottie animation JSON asset path to display during initialization |
| `previewText`     | `LMChatTextBuilder?` | Custom text builder to display loading status                            |

---

### Functionality

The screen performs the following steps:

1. **Fetches Available Chatbots**
   - Retrieves the list of AI chatbots using `LMChatClient.getAIChatbots()`
   - Selects the first available chatbot

2. **Checks DM Status**
   - Verifies if a conversation already exists with the chatbot
   - Extracts existing chatroom ID if present

3. **Chatroom Setup**
   - If an existing chatroom is found, navigates to it
   - Otherwise, creates a new DM chatroom with the chatbot

4. **Navigation**
   - Stores the chatroom ID locally
   - Redirects to `LMChatroomScreen` with the appropriate chatroom ID

---

### Usage Example

```dart
Navigator.push(
  context,
  MaterialPageRoute(
    builder: (context) => LMChatAIBotInitiationScreen(
      // Optional: Custom animation asset
      animationToShow: 'assets/custom_loading.json',
      // Optional: Custom loading text
      previewText: (context, defaultText) => Text('Custom loading message'),
    ),
  ),
);
```

---


### Summary

The **AI Chatbot Initiation Screen** provides a seamless transition when setting up or accessing an AI chatbot conversation. It handles all the necessary initialization steps while displaying a visually appealing loading interface to the user. The screen can be customized with different animations and text displays to match the app's design requirements.



================================================
File: chat/Flutter/Core/Screens/LMChatCreatePollScreen.md
================================================
---
sidebar_position: 4
title: Create Poll Screen
slug: /flutter/core/screens/create-poll-screen
---

# Create Poll Screen  

### Introduction  
The **Create Poll Screen** enables users to **create and interact with polls**. It supports creating polls of different types based on the community configurations set by the manager. Developers can further customize the behavior and UI using builder delegates.

---

### 1. `LMChatCreatePollScreen` Widget  
**File Location:**  
[create_poll.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/poll/create_poll.dart)

#### **Class Declaration**

```dart
class LMChatCreatePollScreen extends StatefulWidget {
  @override
  State<LMChatCreatePollScreen> createState() => _LMChatCreatePollScreenState();
}
```

The `LMChatCreatePollScreen` widget displays the **create poll screen**, showing all the various options to create a poll.

---

### 2. `LMChatCreatePollBuilderDelegate`  
**File Location:**  
[create_poll_builder.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/poll/configurations/create_poll_builder.dart)

#### **Class Declaration**

```dart
class LMChatCreatePollBuilderDelegate {
  const LMChatCreatePollBuilderDelegate();
}
```

The `LMChatCreatePollBuilderDelegate` provides several methods to customize the UI and behavior of polls.

#### Methods in `LMChatCreatePollBuilderDelegate`

1. **`scaffold`**  
   **Definition:** Builds the scaffold for the poll view.  
   **Purpose:** Customizes the primary structure of the poll interface.

   **Usage Example:**
   ```dart
   @override
   Widget scaffold({PreferredSizeWidget? appBar, Widget? body}) {
     return Scaffold(appBar: appBar, body: body);
   }
   ```

2. **`userTileBuilder`**  
   **Definition:** Builds the user tile for displaying user information.  
   **Purpose:** Customizes how user tiles are displayed in the poll creation screen.

   **Usage Example:**
   ```dart
   @override
   Widget userTileBuilder(BuildContext context, LMChatUserTile userTile) {
     return userTile;
   }
   ```

3. **`pollOptionTileBuilder`**  
   **Definition:** Builds the poll option tile.  
   **Purpose:** Customizes how poll options are displayed.

   **Usage Example:**
   ```dart
   @override
   Widget pollOptionTileBuilder(BuildContext context, LMChatOptionTile pollOption, int index,) {
     return pollOption;
   }
   ```

#### Remaining Methods  
Explore the full list of methods [here](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/poll/configurations/builder.dart).

---

### 3. `LMChatPollSetting`  
**File Location:**  
[setting.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/poll/configurations/setting.dart)

```dart
class LMChatPollSetting {
  const LMChatPollSetting();
}
```

- **Purpose:** Provides settings for managing poll behavior, such as multi-select options.

---

### 4. `LMChatPollStyle`  
**File Location:**  
[style.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/poll/configurations/style.dart)

```dart
class LMChatPollStyle {
  const LMChatPollStyle();
}
```

- **Purpose:** Defines the visual appearance of polls, such as colors and font styles.

---

### 5. `LMChatPollConfig`  
**File Location:**  
[config.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/poll/configurations/config.dart)

#### **Class Declaration**

```dart
class LMChatPollConfig {
  final LMChatPollResultBuilderDelegate pollResultBuilder;
  final LMChatCreatePollBuilderDelegate createPollBuilder;
  final LMChatPollSetting setting;
  final LMChatPollStyle style;

  const LMChatPollConfig({
    this.pollResultBuilder = const LMChatPollResultBuilderDelegate(),
    this.createPollBuilder = const LMChatCreatePollBuilderDelegate(),
    this.setting = const LMChatPollSetting(),
    this.style = const LMChatPollStyle(),
  });
}
```

#### Usage Example: Injecting Custom Configuration

1. **Create a Custom Builder:**
   ```dart
   class CustomCreatePollBuilder extends LMChatCreatePollBuilderDelegate {
     @override
     Widget voteCountTextBuilder(BuildContext context, int voteCount) {
       return Text('$voteCount votes', style: TextStyle(color: Colors.green));
     }
   }
   ```

2. **Pass Custom Style and Setting along with Builder:**

   ```dart
   final customStyle = LMChatPollStyle();
   final customSetting = LMChatPollSetting();
   ```

3. **Inject the Custom Builder, Style, and Setting into the Config:**

   ```dart
   final pollConfig = LMChatPollConfig(
     pollResultBuilder: CustomPollResultBuilder(),
     createPollBuilder: CustomCreatePollBuilder(),
     style: customStyle,
     setting: customSetting,
   );
   ```

4. **Initialize with Custom Config:**

   ```dart
   LMChatCore.instance.initialize(
     config: LMChatConfig(
       pollConfig: pollConfig,
     ),
   );
   ```

---

### 6. Summary  

The **Create Poll Screen** enables users to **create polls, vote, and view poll results**. Developers can customize the interface using `LMChatCreatePollBuilderDelegate`, and further control the behavior and appearance through `LMChatPollConfig`. This flexibility ensures the poll experience meets specific design and functional requirements.


================================================
File: chat/Flutter/Core/Screens/LMChatExplorePage.md
================================================
---
sidebar_position: 3
title: Explore Screen
slug: /flutter/core/screens/explore-screen
---

# Explore Screen  

### Introduction  
The **Explore Screen** (`LMChatExplorePage`) allows users to browse and interact with chatrooms. It provides sorting by activity, participants, or messages. The Explore Screen is fully customizable through builder delegates.

---

### 1. `LMChatExplorePage` Widget  
**File Location:**  
[explore.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/explore/explore.dart)

#### **Class Declaration**

```dart
class LMChatExplorePage extends StatefulWidget {
  const LMChatExplorePage({super.key});

  @override
  State<LMChatExplorePage> createState() => _LMChatExplorePageState();
}
```

This widget renders the Explore Screen and allows users to browse different chatrooms.

---

### 2. `LMChatExploreBuilderDelegate`  
**File Location:**  
[builder.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/explore/configurations/builder.dart)

#### **Class Declaration**

```dart
class LMChatExploreBuilderDelegate {
  const LMChatExploreBuilderDelegate();
}
```

The `LMChatExploreBuilderDelegate` provides **14 methods** to customize the Explore Screen. Below are three key methods.

#### Methods in `LMChatExploreBuilderDelegate` (3 out of 14 shown)

1. **`scaffold`**  
   **Definition:** Builds the main scaffold for the Explore Screen.  
   **Purpose:** Customizes the screen’s structure, including the app bar and body.

   **Usage Example:**
   ```dart
   @override
   Widget scaffold({
     PreferredSizeWidget? appBar,
     Widget? body,
   }) {
     return Scaffold(appBar: appBar, body: body);
   }
   ```

2. **`exploreTileBuilder`**  
   **Definition:** Builds individual tiles for the chatrooms in the Explore Screen.  
   **Purpose:** Customizes the layout and style of each chatroom tile.

   **Usage Example:**
   ```dart
   @override
   Widget exploreTileBuilder(
     BuildContext context, LMChatRoomViewData chatRoomViewData) {
     return ListTile(
       title: Text(chatRoomViewData.name),
     );
   }
   ```

3. **`pinButtonBuilder`**  
   **Definition:** Builds the pin button for chatrooms.  
   **Purpose:** Customizes the style and behavior of the pin button.

   **Usage Example:**
   ```dart
   @override
   Widget pinButtonBuilder(BuildContext context, Widget pinButton) {
     return IconButton(onPressed: () {}, icon: Icon(Icons.push_pin));
   }
   ```

#### Remaining Methods (11 more)  
Explore the complete list of methods [here](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/explore/configurations/builder.dart).

---

### 3. `LMChatExploreSetting`  
**File Location:**  
[setting.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/explore/configurations/setting.dart)

```dart
class LMChatExploreSetting {
  const LMChatExploreSetting();
}
```

- **Purpose:** Provides settings for the Explore Screen. No fields or methods are currently defined.

---

### 4. `LMChatExploreStyle`  
**File Location:**  
[style.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/explore/configurations/style.dart)

```dart
class LMChatExploreStyle {
  const LMChatExploreStyle({
    this.popUpMenuStyle,
  });

  final LMChatCustomPopupMenuStyle Function(
      LMChatCustomPopupMenuStyle oldStyle)? popUpMenuStyle;
}
```

- **Fields:**
  - `popUpMenuStyle`: A function that customizes the style of popup menus, including **text, icons, and background**.

---

### 5. `LMChatExploreConfig`  
**File Location:**  
[config.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/explore/configurations/config.dart)

#### **Class Declaration**

```dart
class LMChatExploreConfig {
  final LMChatExploreBuilderDelegate builder;
  final LMChatExploreSetting setting;
  final LMChatExploreStyle style;

  const LMChatExploreConfig({
    this.builder = const LMChatExploreBuilderDelegate(),
    this.setting = const LMChatExploreSetting(),
    this.style = const LMChatExploreStyle(),
  });
}
```

#### Usage Example: Injecting Custom Configuration

1. **Create a Custom Builder:**

   ```dart
   class CustomExploreBuilder extends LMChatExploreBuilderDelegate {
     @override
     Widget pinButtonBuilder(BuildContext context, Widget pinButton) {
       return IconButton(
         onPressed: () {},
         icon: Icon(Icons.push_pin, color: Colors.red),
       );
     }
   }
   ```

2. **Pass Custom Style or Setting along with Builder:**

   ```dart
   final customStyle = LMChatExploreStyle(
     popUpMenuStyle: (oldStyle) => oldStyle.copyWith(
       textStyle: const TextStyle(fontSize: 18),
     ),
   );
   ```

3. **Inject the Custom Builder, Style, or Setting into the Config:**

   ```dart
   final exploreConfig = LMChatExploreConfig(
     builder: CustomExploreBuilder(),
     style: customStyle,
   );
   ```

4. **Initialize with Custom Config:**

   ```dart
   LMChatCore.instance.initialize(
     config: LMChatConfig(
       exploreConfig: exploreConfig,
     ),
   );
   ```

---

### 6. Summary  

The **Explore Screen** enables users to discover new chatrooms through customizable layouts. Developers can modify components using the `LMChatExploreBuilderDelegate` and inject configurations through `LMChatExploreConfig`. This flexibility ensures the Explore Screen can fit various design requirements.



================================================
File: chat/Flutter/Core/Screens/LMChatHomeScreen.md
================================================
---
sidebar_position: 2
title: Home Screen
slug: /flutter/core/screens/home-screen
---

# Home Screen  

### Introduction  
The **Home Screen** (`LMChatHomeScreen`) serves as the main entry point to the chat experience. It provides access to **group feeds** and **direct messages (DM)**. This screen is customizable through builders and styles to align with specific application needs.

---

### 1. `LMChatHomeScreen` Widget  
**File Location:**  
[home.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/home/home.dart)

#### **Class Declaration**

```dart
class LMChatHomeScreen extends StatefulWidget {
  const LMChatHomeScreen({super.key});

  @override
  State<LMChatHomeScreen> createState() => _LMChatHomeScreenState();
}
```

This widget renders the **Home Screen** and integrates feeds for group and DM messages, using tab-based navigation.

---

### 2. `LMChatHomeBuilderDelegate`  
**File Location:**  
[builder.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/home/configurations/builder.dart)

#### **Class Declaration**

```dart
class LMChatHomeBuilderDelegate {
  const LMChatHomeBuilderDelegate();
}
```

The `LMChatHomeBuilderDelegate` provides **several methods** to customize key components of the Home Screen. Below are three key methods.

#### Methods in `LMChatHomeBuilderDelegate`

1. **`appBarBuilder`**  
   **Definition:** Builds the app bar for the Home Screen.  
   **Purpose:** Customizes the app bar layout and actions.

   **Usage Example:**
   ```dart
   @override
   PreferredSizeWidget appBarBuilder(
     BuildContext context, LMChatUserViewData user, 
     TabController? tabController, LMChatAppBar defaultAppBar) {
     return defaultAppBar.copyWith(title: Text('Home'));
   }
   ```

2. **`scaffold`**  
   **Definition:** Builds the `Scaffold` widget for the Home Screen.  
   **Purpose:** Customizes the overall screen layout.

   **Usage Example:**
   ```dart
   @override
   Widget scaffold({
     PreferredSizeWidget? appBar,
     Widget? body,
     Color? backgroundColor,
   }) {
     return Scaffold(
       appBar: appBar,
       body: body,
       backgroundColor: backgroundColor,
     );
   }
   ```

3. **`dmFeedNoItemsFoundIndicatorBuilder`**  
   **Definition:** Builds the indicator for an empty DM feed.  
   **Purpose:** Customizes the message shown when no items are found in the DM feed.

   **Usage Example:**
   ```dart
   @override
   Widget dmFeedNoItemsFoundIndicatorBuilder(
     BuildContext context, Widget noItemsFoundWidget) {
     return Center(child: noItemsFoundWidget);
   }
   ```

#### Remaining Methods
Explore the complete list of methods [here](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/home/configurations/builder.dart).

---

### 3. `LMChatHomeSetting`  
**File Location:**  
[setting.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/home/configurations/setting.dart)

```dart
class LMChatHomeSetting {
  const LMChatHomeSetting();
}
```

- **Purpose:** Provides configuration settings for the Home Screen. No additional fields or methods are currently defined.

---

### 4. `LMChatHomeStyle`  
**File Location:**  
[style.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/home/configurations/style.dart)

```dart
class LMChatHomeStyle {
  const LMChatHomeStyle({
    this.homeFeedListStyle,
    this.dmFeedListStyle,
  });

  final LMChatHomeFeedListStyle Function(LMChatHomeFeedListStyle)?
      homeFeedListStyle;
  final LMChatDMFeedListStyle Function(LMChatDMFeedListStyle)? 
      dmFeedListStyle;
}
```

- **Fields:**
  - `homeFeedListStyle`: Customizes the style for the **home feed list**.
  - `dmFeedListStyle`: Customizes the style for the **DM feed list**.

---

### 5. `LMChatHomeConfig`  
**File Location:**  
[config.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/home/configurations/config.dart)

#### **Class Declaration**

```dart
class LMChatHomeConfig {
  final LMChatHomeBuilderDelegate builder;
  final LMChatHomeSetting setting;
  final LMChatHomeStyle style;

  const LMChatHomeConfig({
    this.builder = const LMChatHomeBuilderDelegate(),
    this.setting = const LMChatHomeSetting(),
    this.style = const LMChatHomeStyle(),
  });
}
```

#### Usage Example: Injecting Custom Configuration

1. **Create a Custom Builder:**

   ```dart
   class CustomHomeBuilder extends LMChatHomeBuilderDelegate {
     @override
     Widget dmFeedNoItemsFoundIndicatorBuilder(
         BuildContext context, Widget noItemsFoundWidget) {
       return Center(child: Text('No DMs yet'));
     }
   }
   ```

2. **Pass Custom Style or Setting along with Builder:**

   ```dart
   final customStyle = LMChatHomeStyle(
     homeFeedListStyle: (oldStyle) => oldStyle.copyWith(
       textStyle: const TextStyle(fontSize: 16),
     ),
   );
   ```

3. **Inject the Custom Builder, Style, or Setting into the Config:**

   ```dart
   final homeConfig = LMChatHomeConfig(
     builder: CustomHomeBuilder(),
     style: customStyle,
   );
   ```

4. **Initialize with Custom Config:**

   ```dart
   LMChatCore.instance.initialize(
     config: LMChatConfig(
       homeConfig: homeConfig,
     ),
   );
   ```

---

### 6. Summary  

The **Home Screen** provides access to **group feeds** and **DMs** with customizable components such as the **app bar** and **empty state indicators**. Developers can modify the screen layout using `LMChatHomeBuilderDelegate` and inject custom styles and settings through `LMChatHomeConfig`.



================================================
File: chat/Flutter/Core/Screens/LMChatPollResultScreen.md
================================================
---
sidebar_position: 5
title: Poll Result Screen
slug: /flutter/core/screens/poll-result-screen
---

# Poll Result Screen  

### Introduction  
The **Poll Result Screen** enables users to **create and interact with polls**. It supports creating polls via a bottom sheet and displaying poll results. Developers can further customize the behavior and UI using builder delegates.

---

### 1. `LMChatPollResultScreen` Widget  
**File Location:**  
[poll_result.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/poll/poll_result.dart)

#### **Class Declaration**

```dart
class LMChatPollResultScreen extends StatefulWidget {
  @override
  State<LMChatPollResultScreen> createState() =>
      _LMChatPollResultScreenState();
}
```

The `LMChatPollResultScreen` widget displays the **results of a poll**, showing the poll options and the corresponding vote counts and users.

---

### 2. `LMChatOptionTile` Widget  
**File Location:**  
[create_poll.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/poll/create_poll.dart)

#### **Class Declaration**

```dart
class LMChatOptionTile extends StatefulWidget {
  @override
  State<LMChatOptionTile> createState() => _LMChatOptionTileState();
}
```

The `LMChatOptionTile` widget represents **individual poll options**. It is used within the poll creation flow.

---

### 3. `LMChatPollResultBuilderDelegate`  
**File Location:**  
[builder.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/poll/configurations/poll_result_builder.dart)

#### **Class Declaration**

```dart
class LMChatPollResultBuilderDelegate {
  const LMChatPollResultBuilderDelegate();
}
```

The `LMChatPollResultBuilderDelegate` provides several methods to customize the UI and behavior of polls.

#### Methods in `LMChatPollResultBuilderDelegate`

1. **`scaffold`**  
   **Definition:** Builds the scaffold for the poll view.  
   **Purpose:** Customizes the primary structure of the poll interface.

   **Usage Example:**
   ```dart
   @override
   Widget scaffold({PreferredSizeWidget? appBar, Widget? body}) {
     return Scaffold(appBar: appBar, body: body);
   }
   ```

2. **`voteCountTextBuilder`**  
   **Definition:** Builds the vote count text for each poll option.  
   **Purpose:** Customizes the display of the vote counts.

   **Usage Example:**
   ```dart
   @override
   Widget voteCountTextBuilder(BuildContext context, int voteCount) {
     return Text('$voteCount votes');
   }
   ```

3. **`pollOptionTextBuilder`**  
   **Definition:** Builds the text for poll options.  
   **Purpose:** Customizes how poll options are displayed.

   **Usage Example:**
   ```dart
   @override
   Widget pollOptionTextBuilder(BuildContext context, String option) {
     return Text(option);
   }
   ```

#### Remaining Methods  
Explore the full list of methods [here](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/poll/configurations/builder.dart).

---

### 4. `LMChatPollSetting`  
**File Location:**  
[setting.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/poll/configurations/setting.dart)

```dart
class LMChatPollSetting {
  const LMChatPollSetting();
}
```

- **Purpose:** Provides settings for managing poll behavior, such as multi-select options.

---

### 5. `LMChatPollStyle`  
**File Location:**  
[style.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/poll/configurations/style.dart)

```dart
class LMChatPollStyle {
  const LMChatPollStyle();
}
```

- **Purpose:** Defines the visual appearance of polls, such as colors and font styles.

---

### 6. `LMChatPollConfig`  
**File Location:**  
[config.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/poll/configurations/config.dart)

#### **Class Declaration**

```dart
class LMChatPollConfig {
  final LMChatPollResultBuilderDelegate pollResultBuilder;
  final LMChatCreatePollBuilderDelegate createPollBuilder;
  final LMChatPollSetting setting;
  final LMChatPollStyle style;

  const LMChatPollConfig({
    this.pollResultBuilder = const LMChatPollResultBuilderDelegate(),
    this.createPollBuilder = const LMChatCreatePollBuilderDelegate(),
    this.setting = const LMChatPollSetting(),
    this.style = const LMChatPollStyle(),
  });
}
```

#### Usage Example: Injecting Custom Configuration

1. **Create a Custom Builder:**

   ```dart
   class CustomPollResultBuilder extends LMChatPollResultBuilderDelegate {
     @override
     Widget voteCountTextBuilder(BuildContext context, int voteCount) {
       return Text('$voteCount votes', style: TextStyle(color: Colors.green));
     }
   }
   ```

2. **Pass Custom Style and Setting along with Builder:**

   ```dart
   final customStyle = LMChatPollStyle();
   final customSetting = LMChatPollSetting();
   ```

3. **Inject the Custom Builder, Style, and Setting into the Config:**

   ```dart
   final pollConfig = LMChatPollConfig(
     pollResultBuilder: CustomPollResultBuilder(),
     createPollBuilder: CustomCreatePollBuilder(),
     style: customStyle,
     setting: customSetting,
   );
   ```

4. **Initialize with Custom Config:**

   ```dart
   LMChatCore.instance.initialize(
     config: LMChatConfig(
       pollConfig: pollConfig,
     ),
   );
   ```

---

### 7. Summary  

The **Poll Result Screen** enables users to **create polls, vote, and view poll results**. Developers can customize the interface using `LMChatPollResultBuilderDelegate`, and further control the behavior and appearance through `LMChatPollConfig`. This flexibility ensures the poll experience meets specific design and functional requirements.



================================================
File: chat/Flutter/Core/Screens/LMChatReportScreen.md
================================================
---
sidebar_position: 8
title: Report Screen
slug: /flutter/core/screens/report-screen
---

# Report Screen  

### Introduction  
The **Report Screen** allows users to report chatroom entities for violations, offering a structured interface to select report reasons and provide additional input. Developers can customize the interface using builder delegates, settings, and style configurations.

---

### 1. `LMChatReportScreen` Widget  
**File Location:**  
[report.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/report/report.dart)

#### **Class Declaration**

```dart
class LMChatReportScreen extends StatefulWidget {
  final String entityId;

  const LMChatReportScreen({
    Key? key,
    required this.entityId,
  }) : super(key: key);

  @override
  State<LMChatReportScreen> createState() => _LMChatReportScreenState();
}
```

This widget serves as the main **entry point for reporting entities**, such as users or messages. It captures user input, including report reasons and additional text, and submits the report.

---

### 2. `LMChatReportBuilderDelegate`  
**File Location:**  
[builder.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/report/configurations/builder.dart)

#### **Class Declaration**

```dart
class LMChatReportBuilderDelegate {
  const LMChatReportBuilderDelegate();
}
```

This delegate provides methods to customize the **layout and behavior** of the report screen.

#### Methods in `LMChatReportBuilderDelegate`

1. **`otherReasonTextFieldBuilder`**  
   **Definition:** Builds a text field for additional input when the user selects 'Other' as the report reason.  
   **Purpose:** Allows users to specify a reason not covered by the default options.

   **Usage Example:**
   ```dart
   @override
   Widget otherReasonTextFieldBuilder(
     BuildContext context,
     TextEditingController textEditingController,
     Widget otherReasonTextField,
   ) {
     return otherReasonTextField;
   }
   ```

2. **`submitButtonBuilder`**  
   **Definition:** Builds the submit button for the report.  
   **Purpose:** Customizes the submit button’s appearance and behavior.

   **Usage Example:**
   ```dart
   @override
   Widget submitButtonBuilder(
     BuildContext context,
     String entityId,
     int? reportTagId,
     String? reason,
     LMChatButton submitButton,
   ) {
     return submitButton;
   }
   ```

3. **`reportContentBuilder`**  
   **Definition:** Builds the main content of the report screen.  
   **Purpose:** Customizes the layout and content of the report page.

   **Usage Example:**
   ```dart
   @override
   Widget reportContentBuilder(
     BuildContext context, Widget defaultContent) {
     return defaultContent;
   }
   ```

#### Remaining Methods  
Explore the full list of methods [here](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/report/configurations/builder.dart).

---

### 3. `LMChatReportSetting`  
**File Location:**  
[setting.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/report/configurations/setting.dart)

```dart
class LMChatReportSetting {
  const LMChatReportSetting();
}
```

- **Purpose:** Configures settings related to the reporting process. Currently, no specific fields or methods are defined.

---

### 4. `LMChatReportStyle`  
**File Location:**  
[style.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/report/configurations/style.dart)

```dart
class LMChatReportStyle {
  const LMChatReportStyle();
}
```

- **Purpose:** Defines the appearance and styling of the report screen. No additional fields or methods are currently defined.

---

### 5. `LMChatReportConfig`  
**File Location:**  
[config.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/report/configurations/config.dart)

#### **Class Declaration**

```dart
class LMChatReportConfig {
  final LMChatReportBuilderDelegate builder;
  final LMChatReportSetting setting;
  final LMChatReportStyle style;

  const LMChatReportConfig({
    this.builder = const LMChatReportBuilderDelegate(),
    this.style = const LMChatReportStyle(),
    this.setting = const LMChatReportSetting(),
  });
}
```

#### Usage Example: Injecting Custom Configuration

1. **Create a Custom Builder:**

   ```dart
   class CustomReportBuilder extends LMChatReportBuilderDelegate {
     @override
     Widget submitButtonBuilder(
         BuildContext context, String entityId, int? reportTagId,
         String? reason, LMChatButton submitButton) {
       return submitButton.copyWith(
         style: submitButton.style.copyWith(
           backgroundColor: Colors.red,
         ),
       );
     }
   }
   ```

2. **Pass Custom Style and Setting along with Builder:**

   ```dart
   final customStyle = LMChatReportStyle();
   final customSetting = LMChatReportSetting();
   ```

3. **Inject the Custom Builder, Style, and Setting into the Config:**

   ```dart
   final reportConfig = LMChatReportConfig(
     builder: CustomReportBuilder(),
     style: customStyle,
     setting: customSetting,
   );
   ```

4. **Initialize with Custom Config:**

   ```dart
   LMChatCore.instance.initialize(
     config: LMChatConfig(
       reportConfig: reportConfig,
     ),
   );
   ```

---

### 6. Summary  

The **Report Screen** enables users to report chatroom entities with customized reasons. Developers can use the `LMChatReportBuilderDelegate` to adjust core components, such as the submit button and input fields. The `LMChatReportConfig` provides a flexible way to inject custom builders, styles, and settings to align the reporting experience with specific design and functional needs.



================================================
File: chat/Flutter/Core/Screens/LMChatroomParticipantsPage.md
================================================
---
sidebar_position: 7
title: Participants Screen
slug: /flutter/core/screens/participants-screen
---

# Participants Screen  

### Introduction  
The **Participants Screen** (`LMChatroomParticipantsPage`) allows users to view the participants of a chatroom. It provides various customization options, such as **app bar layout, participant tiles, and loading indicators**, through the builder delegate.

---

### 1. `LMChatroomParticipantsPage` Widget  
**File Location:**  
[participants.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/participants/participants.dart)

#### **Class Declaration**

```dart
class LMChatroomParticipantsPage extends StatefulWidget {
  /// The chatroom whose participants will be displayed.
  final LMChatRoomViewData chatroomViewData;

  const LMChatroomParticipantsPage({
    super.key,
    required this.chatroomViewData,
  });

  @override
  State<LMChatroomParticipantsPage> createState() =>
      _LMChatroomParticipantsPageState();
}
```

This widget renders the participants of a chatroom. It uses **pagination** and supports **search functionality** to manage and display participant data.

---

### 2. `LMChatParticipantBuilderDelegate`  
**File Location:**  
[builder.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/participants/configurations/builder.dart)

#### **Class Declaration**

```dart
class LMChatParticipantBuilderDelegate {
  const LMChatParticipantBuilderDelegate();
}
```

The `LMChatParticipantBuilderDelegate` provides **6 methods** for customizing the Participants Screen. Below are three key methods.

#### Methods in `LMChatParticipantBuilderDelegate` (3 out of 6 shown)

1. **`appBarBuilder`**  
   **Definition:** Builds the app bar for the Participants Screen.  
   **Purpose:** Customizes the app bar’s layout, title, and actions.

   **Usage Example:**
   ```dart
   @override
   PreferredSizeWidget appBarBuilder(
     BuildContext context,
    TextEditingController searchController,
    VoidCallback onSearch,
    LMChatAppBar appBar,
    ) {
     return defaultAppBar.copyWith(title: Text('Participants'));
   }
   ```

2. **`userTileBuilder`**  
   **Definition:** Builds individual participant tiles.  
   **Purpose:** Customizes the layout and style of participant entries.

   **Usage Example:**
   ```dart
   @override
   Widget userTileBuilder(BuildContext context, LMChatUserViewData user) {
     return ListTile(title: Text(user.name));
   }
   ```

3. **`firstPageProgressIndicatorBuilder`**  
   **Definition:** Builds the loading indicator for the first page of participants.  
   **Purpose:** Customizes the loading animation during the initial fetch.

   **Usage Example:**
   ```dart
   @override
   Widget firstPageProgressIndicatorBuilder(BuildContext context) {
     return CircularProgressIndicator();
   }
   ```

#### Remaining Methods (3 more)  
Explore the complete list of methods [here](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/participants/configurations/builder.dart).

---

### 3. `LMChatParticipantSetting`  
**File Location:**  
[setting.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/participants/configurations/setting.dart)

```dart
class LMChatParticipantSetting {
  const LMChatParticipantSetting();
}
```

- **Purpose:** Provides configuration settings for the Participants Screen. No additional fields or methods are defined.

---

### 4. `LMChatParticipantStyle`  
**File Location:**  
[style.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/participants/configurations/style.dart)

```dart
class LMChatParticipantStyle {
  const LMChatParticipantStyle();
}
```

- **Purpose:** Provides style configurations for the Participants Screen. No additional fields or methods are defined.

---

### 5. `LMChatParticipantConfig`  
**File Location:**  
[config.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/participants/configurations/config.dart)

#### **Class Declaration**

```dart
class LMChatParticipantConfig {
  final LMChatParticipantBuilderDelegate builder;
  final LMChatParticipantStyle style;
  final LMChatParticipantSetting setting;

  const LMChatParticipantConfig({
    this.builder = const LMChatParticipantBuilderDelegate(),
    this.style = const LMChatParticipantStyle(),
    this.setting = const LMChatParticipantSetting(),
  });
}
```

#### Usage Example: Injecting Custom Configuration

1. **Create a Custom Builder:**

   ```dart
   class CustomParticipantBuilder extends LMChatParticipantBuilderDelegate {
     @override
     Widget userTileBuilder(BuildContext context, LMChatUserViewData user) {
       return ListTile(
         title: Text(user.name),
         trailing: Icon(Icons.message),
       );
     }
   }
   ```

2. **Pass Custom Style or Setting along with Builder:**

   ```dart
   final customStyle = LMChatParticipantStyle();
   final customSetting = LMChatParticipantSetting();
   ```

3. **Inject the Custom Builder, Style, or Setting into the Config:**

   ```dart
   final participantConfig = LMChatParticipantConfig(
     builder: CustomParticipantBuilder(),
     style: customStyle,
     setting: customSetting,
   );
   ```

4. **Initialize with Custom Config:**

   ```dart
   LMChatCore.instance.initialize(
     config: LMChatConfig(
       participantConfig: participantConfig,
     ),
   );
   ```

---

### 6. Summary  

The **Participants Screen** provides a view of chatroom members with features such as **pagination** and **search**. Developers can use `LMChatParticipantBuilderDelegate` to customize key components like the **app bar** and **participant tiles**. Additional customization can be achieved through `LMChatParticipantConfig` by injecting **custom builders, styles, and settings**.



================================================
File: chat/Flutter/Core/Screens/LMChatroomScreen.md
================================================
---
sidebar_position: 1
title: Chatroom Screen
slug: /flutter/core/screens/chatroom-screen
---

# Chatroom Screen

### Introduction

The **Chatroom Screen** (`LMChatroomScreen`) serves as the primary interface for conversations. It enables users to engage in group or direct chats with customizable features such as **chat bubbles**, **app bars**, and **floating action buttons**.

---

### 1. `LMChatroomScreen` Widget

**File Location:**  
[chatroom.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/chatroom/chatroom.dart)

#### **Class Declaration**

```dart
class LMChatroomScreen extends StatefulWidget {
  static const routeName = '/chatroom';

  /// The ID of the chatroom.
  final int chatroomId;

  const LMChatroomScreen({
    Key? key,
    required this.chatroomId,
  }) : super(key: key);

  @override
  State<LMChatroomScreen> createState() => _LMChatroomScreenState();
}
```

The `LMChatroomScreen` widget renders the chat interface, providing access to message threads and chatroom-level features.

---

### 2. `LMChatroomBuilderDelegate`

**File Location:**  
[builder.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/chatroom/configurations/builder.dart)

#### **Class Declaration**

```dart
class LMChatroomBuilderDelegate {
  const LMChatroomBuilderDelegate();
}
```

The `LMChatroomBuilderDelegate` offers **9 methods** for customizing the chatroom interface. Below are three key methods.

#### Methods in `LMChatroomBuilderDelegate` (3 out of 9 shown)

1. **`sendButton`**  
   **Definition:** Builds the send button for messages.  
   **Purpose:** Customizes the appearance and behavior of the send button.

   **Usage Example:**

   ```dart
   @override
   Widget sendButton(BuildContext context,
    TextEditingController textController,
    VoidCallback onPressed,
    LMChatButton sendButton,
    ) {
     return button.copyWith(
       style: button.style?.copyWith(backgroundColor: Colors.green),
     );
   }
   ```

2. **`editButton`**  
   **Definition:** Builds the edit button for messages.  
   **Purpose:** Customizes the layout of the edit button in message options.

   **Usage Example:**

   ```dart
   @override
   Widget editButton(BuildContext context,
    LMChatConversationViewData conversation,
    LMChatButton editButton,
    ) {
     return button;
   }
   ```

3. **`copyButton`**  
   **Definition:** Builds the copy button for copying messages.  
   **Purpose:** Allows customization of the copy button’s style.

   **Usage Example:**

   ```dart
   @override
   Widget copyButton( BuildContext context,
    List<LMChatConversationViewData> conversations,
    LMChatButton copyButton,
    ) {
     return button.copyWith(
       style: button.style.copyWith(icon: Icons.copy),
     );
   }
   ```

#### Remaining Methods (6 more)

Explore the complete list of methods [here](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/chatroom/configurations/builder.dart).

---

### 3. `LMChatroomSetting`

**File Location:**  
[setting.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/chatroom/configurations/setting.dart)

```dart
class LMChatroomSetting {
  const LMChatroomSetting();
}
```

- **Purpose:** Defines configuration settings for the Chatroom Screen. No fields or methods are currently defined.

---

### 4. `LMChatroomStyle`

**File Location:**  
[style.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/chatroom/configurations/style.dart)

```dart
class LMChatroomStyle {
  const LMChatroomStyle();
}
```

- **Purpose:** Provides styling options for the Chatroom Screen. No additional fields or methods are currently defined.

---

### 5. `LMChatroomConfig`

**File Location:**  
[config.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/chatroom/configurations/config.dart)

#### **Class Declaration**

```dart
class LMChatroomConfig {
  final LMChatroomBuilderDelegate builder;
  final LMChatroomSetting setting;
  final LMChatroomStyle style;

  const LMChatroomConfig({
    this.builder = const LMChatroomBuilderDelegate(),
    this.setting = const LMChatroomSetting(),
    this.style = const LMChatroomStyle(),
  });
}
```

#### Usage Example: Injecting Custom Configuration

1. **Create a Custom Builder:**

   ```dart
   class CustomChatroomBuilder extends LMChatroomBuilderDelegate {
     @override
     Widget sendButton(BuildContext context, LMChatButton button) {
       return button.copyWith(
         style: button.style.copyWith(backgroundColor: Colors.purple),
       );
     }
   }
   ```

2. **Pass Custom Style or Setting along with Builder:**

   ```dart
   final customStyle = LMChatroomStyle();
   final customSetting = LMChatroomSetting();
   ```

3. **Inject the Custom Builder, Style, or Setting into the Config:**

   ```dart
   final chatroomConfig = LMChatroomConfig(
     builder: CustomChatroomBuilder(),
     style: customStyle,
     setting: customSetting,
   );
   ```

4. **Initialize with Custom Config:**

   ```dart
   LMChatCore.instance.initialize(
     config: LMChatConfig(
       chatroomConfig: chatroomConfig,
     ),
   );
   ```

---

### 6. Summary

The **Chatroom Screen** enables users to engage in conversations with customizable elements such as chat bubbles and buttons. Developers can modify core components using `LMChatroomBuilderDelegate` and inject configurations through `LMChatroomConfig`. This ensures that the chatroom experience meets specific design requirements.



================================================
File: chat/Flutter/Core/Screens/Media.md
================================================
---
sidebar_position: 6
title: Media Screen
slug: /flutter/core/screens/media-screen
---

# Media Screen  

### Introduction  
The **Media Screen** supports **media forwarding and previewing**. It provides interfaces to preview media files and forward them to other users or chatrooms. Developers can customize the interface using **builders, configurations, and style options** found across `forwarding` and `preview` configurations.

---

### 1. `LMChatMediaForwardingScreen` Widget  
**File Location:**  
[media_forwarding.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/media/media_forwarding.dart)

#### **Class Declaration**

```dart
class LMChatMediaForwardingScreen extends StatelessWidget {
  const LMChatMediaForwardingScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Forward Media'),
      ),
      body: Center(
        child: const Text('Media Forwarding UI'),
      ),
    );
  }
}
```

This widget allows users to **forward media files** to other chatrooms or participants.

---

### 2. `LMChatMediaPreviewScreen` Widget  
**File Location:**  
[media_preview.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/media/media_preview.dart)

#### **Class Declaration**

```dart
class LMChatMediaPreviewScreen extends StatefulWidget {
  final List<LMChatMedia> mediaList;
  final int initialPosition;

  const LMChatMediaPreviewScreen({
    super.key,
    required this.mediaList,
    this.initialPosition = 0,
  });

  @override
  State<LMChatMediaPreviewScreen> createState() =>
      _LMChatMediaPreviewScreenState();
}
```

This widget allows users to **preview media items** such as images and videos in a **carousel-style format**.

---

### 3. Builder Configurations

#### **`forwarding/builder.dart`**  
**File Location:**  
[forwarding/builder.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/media/configurations/forwarding/builder.dart)

```dart
class LMChatMediaForwardingBuilderDelegate {
  const LMChatMediaForwardingBuilderDelegate();
}
```

- **Purpose:** Customizes the forwarding interface, such as the **app bar** and the layout of forwarded media.

#### **Methods in LMChatMediaForwardingBuilderDelegate**  
1. **`forwardingAppBarBuilder`**  
   **Definition:** Customizes the app bar for the forwarding screen.

   **Usage Example:**
   ```dart
   @override
   PreferredSizeWidget forwardingAppBarBuilder(BuildContext context) {
     return AppBar(title: const Text('Forward Media'));
   }
   ```

2. **`mediaItemBuilder`**  
   **Definition:** Builds individual media items in the forwarding list.

   **Usage Example:**
   ```dart
   @override
   Widget mediaItemBuilder(BuildContext context, LMChatMedia media) {
     return ListTile(title: Text(media.name));
   }
   ```

---

#### **`preview/builder.dart`**  
**File Location:**  
[preview/builder.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/media/configurations/preview/builder.dart)

```dart
class LMChatMediaPreviewBuilderDelegate {
  const LMChatMediaPreviewBuilderDelegate();
}
```

- **Purpose:** Provides customization options for the **preview screen**, including the layout and navigation behavior.

---

### 4. Setting Configurations

#### **`forwarding/setting.dart`**  
**File Location:**  
[forwarding/setting.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/media/configurations/forwarding/setting.dart)

```dart
class LMChatMediaForwardingSetting {
  const LMChatMediaForwardingSetting();
}
```

- **Purpose:** Configures forwarding settings, such as **confirmation prompts** or limitations on forwarded items.

---

#### **`preview/setting.dart`**  
**File Location:**  
[preview/setting.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/media/configurations/preview/setting.dart)

```dart
class LMChatMediaPreviewSetting {
  const LMChatMediaPreviewSetting();
}
```

- **Purpose:** Configures **preview settings**, such as the initial position of media files or the visibility of thumbnails.

---

### 5. Style Configurations

#### **`forwarding/style.dart`**  
**File Location:**  
[forwarding/style.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/media/configurations/forwarding/style.dart)

```dart
class LMChatMediaForwardingStyle {
  const LMChatMediaForwardingStyle();
}
```

- **Purpose:** Provides **styling options** for forwarding screens, such as colors and fonts for forwarded media items.

---

#### **`preview/style.dart`**  
**File Location:**  
[preview/style.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/media/configurations/preview/style.dart)

```dart
class LMChatMediaPreviewStyle {
  const LMChatMediaPreviewStyle();
}
```

- **Purpose:** Provides **styling options** for preview screens, such as scaling and padding of media items.

---

### 6. Configurations

#### **`forwarding/config.dart`**  
**File Location:**  
[forwarding/config.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/media/configurations/forwarding/config.dart)

```dart
class LMChatMediaForwardingConfig {
  final LMChatMediaForwardingBuilderDelegate builder;
  final LMChatMediaForwardingStyle style;
  final LMChatMediaForwardingSetting setting;

  const LMChatMediaForwardingConfig({
    this.builder = const LMChatMediaForwardingBuilderDelegate(),
    this.style = const LMChatMediaForwardingStyle(),
    this.setting = const LMChatMediaForwardingSetting(),
  });
}
```

---

#### **`preview/config.dart`**  
**File Location:**  
[preview/config.dart](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/tree/master/lib/packages/core/lib/src/views/media/configurations/preview/config.dart)

```dart
class LMChatMediaPreviewConfig {
  final LMChatMediaPreviewBuilderDelegate builder;
  final LMChatMediaPreviewStyle style;
  final LMChatMediaPreviewSetting setting;

  const LMChatMediaPreviewConfig({
    this.builder = const LMChatMediaPreviewBuilderDelegate(),
    this.style = const LMChatMediaPreviewStyle(),
    this.setting = const LMChatMediaPreviewSetting(),
  });
}
```

---

### 7. Summary  

The **Media Screen** offers **media forwarding and previewing features** within chatrooms. Developers can use **builder delegates, settings, and styles** to control the appearance and behavior of media forwarding and preview screens. Custom configurations can be injected into the app using the provided config classes.



================================================
File: chat/Flutter/Core/Screens/Screens.md
================================================
---
sidebar_position: 1
title: Screens
slug: /flutter/introduction-to-screens
---

# Introduction to Screens in Flutter

The **LikeMinds Chat Flutter SDK** provides several core screens for implementing chat functionality. This document outlines the main screens, their purposes, and how to customize them using the SDK's customization mechanism; enabling developers to understand and leverage the SDK's customization capabilities effectively.

## Prerequisites

Before integrating the LikeMinds SDK, ensure that you have the following prerequisites:

1. A Flutter project that is properly set up and running.
2. The LikeMinds Flutter Chat SDK installed and initialized in your project. [Guide here](../../getting-started.md).


## Initialization

Before utilizing any chat screens or functionalities, the Core layer must be initialized. This process sets up essential services, configurations, and dependencies required by the SDK.

As per the above mentioned [prerequisites](#prerequisites), you have already initialized the Core layer.

#### Example Initialization

```dart
main(){
...
await LMChatCore.instance.initialize();
...
runApp(YourApp());
}
```

We will add customizations to the initialization process using the steps described in the [Customization](#how-to-customize-screens) section.

## Screens
The LikeMinds Chat Flutter SDK provides the following screens, which can be used as a starting point for your chat implementation:

- [LMChatHomeScreen](./LMChatHomeScreen.md) 
- [LMChatroomScreen](./LMChatroomScreen.md)
- [LMChatExplorePage](./LMChatExplorePage.md)
- [LMChatParticipantsPage](./LMChatroomParticipantsPage.md)
- [LMChatReportScreen](./LMChatReportScreen.md)
- ..and more

These screens are built using the [LikeMinds Chat Flutter SDK widgets](../Widgets/Widgets.md), and are designed to be easily customizable to match your app's requirements. Each screen within the SDK is designed to be highly customizable.
#### Key Components

- **State Management**: Utilizes `Bloc` for managing states.
- **UI Components**: Comprises of default app bars, LM widgets, and other UI components.
- **Customization Parameters**: Integrates builder delegates for UI customization.
- **Local Variables**: Handles any local variables required for the screen.

The next mentioned components (Builder Delegates, Configuration Classes, Supporting Files) are used to customize the screens. They are present for every screen in the SDK.

### Builder Delegates

Builder Delegates are classes that provide methods to build various parts of a screen. By extending these delegates, developers can inject custom widgets or modify existing ones without altering the core SDK code.

#### Example: [LMChatroomBuilderDelegate](./LMChatroomScreen.md#2-lmchatroombuilderdelegate)

This delegate defines methods to build different components of the `LMChatroomScreen`.

```dart
class LMChatroomBuilderDelegate {
  // Method to build the app bar
  PreferredSizeWidget appBarBuilder(...) {
    return appBar;
  }
}
```

### Configuration Classes

Configuration Classes bundle builder delegates, settings, and styles. They are passed to the Core layer during initialization, enabling the SDK to utilize custom builders and styles.

#### Example: [LMChatroomConfig](./LMChatroomScreen.md#5-lmchatroomconfig)

```dart
class LMChatroomConfig {
  final LMChatroomBuilderDelegate builder;
  final LMChatroomSetting setting;
  final LMChatroomStyle style;
}
```

### Supporting Files

These files are used to define the settings and styles for the screens.

#### Example: [LMChatroomSetting](./LMChatroomScreen.md#3-lmchatroomsetting)

Defines configurable settings for the chatroom.
  
  ```dart
  class LMChatroomSetting {
    const LMChatroomSetting();
  }
  ```

#### Example: [LMChatroomStyle](./LMChatroomScreen.md#4-lmchatroomstyle)

Defines styling options for the chatroom components.
  
  ```dart
  class LMChatroomStyle {
    const LMChatroomStyle();
  }
  ```


## How to Customize Screens

Let's walk through how to customize screens in the SDK using the `LMChatroomScreen` as our example. This process applies similarly to other screens in the SDK.

### 1. Extend Builder Delegates
Create a subclass of the relevant builder delegate to override default widget builders. This allows you to customize specific components while maintaining the default behavior for others.

```dart
import 'package:likeminds_chat_flutter_core/likeminds_chat_flutter_core.dart';

class CustomChatroomBuilder extends LMChatroomBuilderDelegate {
  @override
  PreferredSizeWidget appBarBuilder(
    BuildContext context,
    LMChatRoomViewData chatroom,
    LMChatAppBar appBar,
  ) {
    return AppBar(
      title: Text("Custom Chatroom Title"),
      actions: [
        IconButton(
          icon: Icon(Icons.settings),
          onPressed: () {
            // Custom action
          },
        ),
      ],
      backgroundColor: Colors.teal,
    );
  }

  @override
  Widget sendButton(
    BuildContext context,
    TextEditingController textController,
    VoidCallback onPressed,
    LMChatButton sendButton,
  ) {
    return ElevatedButton(
      onPressed: onPressed,
      child: Icon(Icons.send, color: Colors.white),
      style: ElevatedButton.styleFrom(
        primary: Colors.orange,
        shape: CircleBorder(),
        padding: EdgeInsets.all(12),
      ),
    );
  }
}
```

### 2. Create Custom Configuration
Instantiate a configuration class with your custom delegate. This configuration object will hold all your customization preferences.

```dart
import 'package:likeminds_chat_flutter_core/likeminds_chat_flutter_core.dart';
import 'custom_chatroom_builder.dart';

final customChatroomConfig = LMChatroomConfig(
  builder: CustomChatroomBuilder(),
  setting: CustomChatroomSetting(), // Any custom settings
  style: CustomChatroomStyle(), // Any custom styles
);
```

### 3. Initialize Core with Configuration
Pass the custom configuration during the Core layer initialization. This ensures your customizations are available throughout the app.

```dart
import 'package:likeminds_chat_flutter_core/likeminds_chat_flutter_core.dart';
import 'custom_chatroom_config.dart';

void main() async {
  await LMChatCore.instance.initialize(
    config: LMChatConfig(
      chatRoomConfig: customChatroomConfig,
      // Initialize other configurations as needed
    ),
    // Other initialization parameters
  );

  runApp(MyApp());
}
```

### 4. Navigate to Customized Screens
Use the SDK's navigation methods to access the customized screens. Your configurations will automatically be applied to the rendered screens.

```dart
import 'package:likeminds_chat_flutter_core/likeminds_chat_flutter_core.dart';

Navigator.push(
  context,
  MaterialPageRoute(
    builder: (context) => LMChatroomScreen(chatroomId: 123),
  ),
);
```

With these steps, your `LMChatroomScreen` will now feature:
- A custom app bar with additional actions
- A modified conversation list layout
- A redesigned send button
- Any other customizations defined in your builder

You can apply this same pattern to customize other screens in the SDK by using their respective builder delegates and configuration classes.


================================================
File: chat/Flutter/Core/Widgets/Widgets.md
================================================
---
sidebar_position: 2
title: Widgets
slug: /flutter/introduction-to-widgets
---

# Introduction to Widgets in Flutter

The **LikeMinds Chat Flutter SDK** provides several widgets for implementing chat functionality. This document outlines the main widgets, their purposes, and how to customize them using the SDK's customization mechanism; enabling developers to understand and leverage the SDK's customization capabilities effectively.

## Prerequisites

Before integrating the LikeMinds SDK, ensure that you have the following prerequisites:

1. A Flutter project that is properly set up and running.
2. The LikeMinds Flutter Chat SDK installed and initialized in your project. [Guide here](../../getting-started.md).

## Widgets

The UI Layer is built using Flutter widgets. The widgets are categorized into different categories:

- **Common Widgets**: Reusable UI components like text, icons, tiles, buttons, and more.
- **Extras**: Supplementary UI elements such as app bars, loaders, chips, etc.
- **Media**: Components handling different media types like images, videos, documents, GIFs, and voice notes.
- **Conversation**: Widgets specific to chat conversations, like chat bubbles.
- **Polls and Reactions**: UI elements for handling polls and user reactions.
- **Shimmers**: Placeholder animations for loading states.

Widgets are the building blocks of LikeMinds Chat Flutter SDK. Every widget is structured in a similar manner, and follows the same pattern. They are structured in an atom-molecule pattern, where each widget (atom) can be used to build bigger widgets (molecules). These are used in the Core Layer to build the UI screens.

Each widget is located in the UI layer's `lib/src/widgets` directory and is named according to the format `widget_name.dart`. The widget class name follows the format `LMWidgetName`.

### Base

Each widget in the SDK follows a consistent structure of the Widget class:

- Named as `LMWidgetName` (e.g., [`LMChatButton`](./Fundamentals/Button/LMChatButton.md))
- Extends `StatefulWidget` or `StatelessWidget` based on requirements
- Includes a `copyWith()` method for easy customization, and extension
- Contains widget parameters for customization
- Example parameters include:
    - Required parameters (marked with `required`)
    - Optional parameters with default values
    - Callback functions for user interactions
    - Style configuration

### Style

Each widget also has a corresponding style class, which contains all styling-related properties.

- Named as `LMWidgetNameStyle` (e.g., [`LMChatButtonStyle`](./Fundamentals/Button/LMChatButton.md#lmchatbuttonstyle))
- Contains all styling-related properties
- Provides factory constructors for common styles (e.g., `basic()`)
- Includes a `copyWith()` method for style modifications

## How to Customize Widgets

The most common usage of widgets is through the `LMChatCore` class, which provides a set of methods to access and use the widgets. This is done through the [builder delegate classes](../Screens/Screens.md#builder-delegates) of each screen where you might want to customise the UI of that screen.

For example, to use the [`LMChatButton`](./Fundamentals/Button/LMChatButton.md) widget for customising the send button in the chatroom, you would do the following:

```dart
import 'package:likeminds_chat_flutter_core/likeminds_chat_flutter_core.dart';

class CustomChatroomBuilder extends LMChatroomBuilderDelegate {
  @override
  Widget sendButton(
    BuildContext context,
    TextEditingController textController,
    VoidCallback onPressed,
    LMChatButton sendButton,
  ) {
    return LMChatButton(
      onTap: onPressed,
      icon: LMChatIcon(
        icon: Icons.send,
        type: LMChatIconType.icon,
      ),
      style: LMChatButtonStyle.basic(),
    );
  }
}
```

Or you can extend the current widget and modify it as per your needs, using the `copyWith()` method.

```dart
import 'package:likeminds_chat_flutter_core/likeminds_chat_flutter_core.dart';

class CustomChatroomBuilder extends LMChatroomBuilderDelegate {
  @override
  Widget sendButton(
    BuildContext context,
    TextEditingController textController,
    VoidCallback onPressed,
    LMChatButton sendButton,
  ) {
    return sendButton.copyWith(
      style: sendButton.style.copyWith(
        backgroundColor: Colors.orange,
        borderRadius: BorderRadius.circular(10),
      ),
    );
  }
}
```

You can then use your custom builders with the [Customization](../Screens/Screens.md#how-to-customize-screens) workflow to apply these customizations to the screens.



================================================
File: chat/Flutter/Core/Widgets/Chatbot/LMChatAIButton.md
================================================
---
sidebar_position: 1  
title: Button Widget  
slug: /flutter/ui/widgets/chatbot/button-widget  
---

# LMChatAIButton

**File location**  
[`chatbot_ai_button.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/core/lib/src/widgets/chatbot/chatbot_button.dart)  

`LMChatAIButton` is a customizable button widget used within the chat interface to allow for direct initialization of the AI chatbot. It can be used as a `FloatingActionButton` or as a regular button. It supports icons, text, and state management for active and inactive modes.

## Properties

| Property | Type                   | Required | Description                                                                                           |
|----------|------------------------|----------|-------------------------------------------------------------------------------------------------------|
| `text`   | `LMChatText?`          | No       | The text widget to be displayed on the button                                                         |
| `icon`   | `LMChatIcon?`          | No       | The icon widget to be displayed on the button                                                         |
| `style`  | `LMChatAIButtonStyle?` | No       | Style configuration for customizing the button's appearance                                           |
| `props`  | `LMChatAIButtonProps?` | No       | Configuration properties for AI chatbot initialization, including authentication and user information |
| `onTap`  | `VoidCallback?`        | No       | Callback function triggered when the button is tapped                                                 |

---

## Styling

### LMChatButtonStyle

**File location**  
[`chatbot_ai_button.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/core/lib/src/widgets/chatbot/chatbot_ai_button.dart)  

`LMChatAIButtonStyle` defines the visual appearance of the button, including text, colors, size, and icon placement.

| Property         | Type                       | Required | Default                          | Description                                           |
|------------------|----------------------------|----------|----------------------------------|-------------------------------------------------------|
| `text`           | `String?`                  | No       | `'AI Bot'`                       | The text to be displayed on the button                |
| `textSize`       | `double?`                  | No       | `14`                             | The size of the button text in logical pixels         |
| `textColor`      | `Color?`                   | No       | `Color(0xFFFFFFFF)`              | The color of the button text                          |
| `backgroundColor`| `Color?`                   | No       | `Color(0xFF020D42)`              | The background color of the button                    |
| `borderRadius`   | `double?`                  | No       | `28`                             | The border radius of the button in logical pixels     |
| `icon`           | `IconData?`                | No       | null                             | The icon to be displayed on the button                |
| `iconPlacement`  | `LMChatIconButtonPlacement`| No       | `LMChatIconButtonPlacement.start`| The placement of the icon relative to the text        |

You can use the `LMChatAIButtonStyle.basic()` method to create a basic style with default values.

**Note:** These properties are only a subset. More can be found inside the style class.

---

## Props

The `LMChatAIButton` accepts the following properties through the `LMChatAIButtonProps` class:

| Prop           | Type     | Required    | Description                                                                                                                             |
|----------------|----------|-------------|-----------------------------------------------------------------------------------------------------------------------------------------|
| `apiKey`       | String   | Required*   | The API key used for authentication when not using token-based security. Required when using the non-token based authentication method. |
| `uuid`         | String   | Required*   | The unique identifier for the user. Required when using the non-token based authentication method.                                      |
| `userName`     | String   | Required*   | The display name of the user. Required when using the non-token based authentication method.                                            |
| `imageUrl`     | String   | Optional    | The URL of the user's profile image. Used for user profile customization.                                                               |
| `isGuest`      | bool     | Optional    | Indicates whether the user is a guest user. Defaults to false if not provided.                                                          |
| `accessToken`  | String   | Required**  | The access token for token-based security authentication. Required when using the token-based authentication method.                    |
| `refreshToken` | String   | Required**  | The refresh token for token-based security authentication. Required when using the token-based authentication method.                   |

\* Required for client-side authentication
\** Required for server-side authentication

### Authentication Methods

The `LMChatAIButton` supports two authentication methods:

1. **Client-Side Authentication**
   - Requires: `apiKey`, `uuid`, and `userName`
   - Optional: `imageUrl`, `isGuest`

2. **Server-Side Authentication**
   - Requires: `accessToken` and `refreshToken`

### Example Usage

```dart
// Example with server-side authentication
final chatButton = LMChatAIButton(
  text: LMChatText('Chat with AI'),
  icon: LMChatIcon(Icons.chat),
  style: LMChatAIButtonStyle.basic(),
  props: LMChatAIButtonProps(
    accessToken: 'your-access-token',
    refreshToken: 'your-refresh-token',
  ),
);

// Example with client-side authentication
final apiKeyChatButton = LMChatAIButton(
  text: LMChatText('Chat with AI'),
  icon: LMChatIcon(Icons.chat),
  style: LMChatAIButtonStyle.basic(),
  props: LMChatAIButtonProps(
    apiKey: 'your-api-key',
    uuid: 'user-unique-id',
    userName: 'John Doe',
  ),
  onTap: () => print('Button tapped'),
);
```



================================================
File: chat/Flutter/Core/Widgets/Chatroom/LMChatBubble.md
================================================
---
sidebar_position: 1  
title: Chat Bubble Widget  
slug: /flutter/ui/widgets/chat-bubble-widget  
---

# LMChatBubble

**File location**  
[`chat_bubble.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/conversation/chat_bubble.dart)  

`LMChatBubble` displays a chat bubble in the interface, handling messages, avatars, and interactive actions.

## Properties

1. **`avatar`** (`Widget?`)  
   Optional avatar displayed with the chat bubble.

2. **`onTap`** (`Function(bool isSelected, LMChatBubble bubble)?`)  
   Callback triggered on bubble tap.

3. **`style`** (`LMChatBubbleStyle?`)  
   Controls the appearance and layout of the chat bubble.

**Note:** These properties are only a subset. More can be found inside the widget class. You can refer to the relevant widget class for more reference.

---

## Styling

### LMChatBubbleStyle

**File location**  
[`chat_bubble.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/conversation/chat_bubble.dart)  

`LMChatBubbleStyle` provides customization for the appearance of the chat bubble.

| **Property**      | **Type**   | **Description**                     | **Required** | **Default**        |
|-------------------|------------|-------------------------------------|--------------|--------------------|
| `backgroundColor` | `Color?`   | Background color for the bubble     | No           | _Theme default_    |
| `borderRadius`    | `BorderRadius?` | Border radius of the bubble | No           | `8.0`              |
| `selectedColor`   | `Color?`   | Color when the bubble is selected   | No           | `Color(0xFF006056)`|

**Note:** These properties are only a subset. More can be found inside the style class. You can refer to the relevant style class for more reference.

---

## Example Usage

```dart
final chatBubble = LMChatBubble(
  avatar: CircleAvatar(backgroundImage: NetworkImage('https://example.com/avatar.png')),
  onTap: (isSelected, bubble) => print('Bubble selected: $isSelected'),
  style: LMChatBubbleStyle(
    backgroundColor: Colors.white,
    selectedColor: Colors.green,
    borderRadius: BorderRadius.circular(8.0),
  ),
);



================================================
File: chat/Flutter/Core/Widgets/Chatroom/LMChatBubbleClipper.md
================================================
---
sidebar_position: 2  
title: Chat Bubble Clipper  
slug: /flutter/ui/widgets/chat-bubble-clipper  
---

# LMChatBubbleClipper

**File location**  
[`chat_bubble_clipper.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/conversation/chat_bubble_clipper.dart)  

`LMChatBubbleClipper` is a custom clipper that shapes chat bubbles, differentiating between sent and received messages with customizable "nip" elements.

## Properties

1. **`isSent`** (`bool`)  
   Indicates if the bubble is for a sent message.

2. **`radius`** (`double`)  
   Radius for rounding the bubble corners (default: 10).

3. **`nipHeight`** (`double`)  
   Height of the bubble's nip (default: 10).

**Note:** These properties are only a subset. More can be found inside the widget class. You can refer to the relevant widget class for more reference.

---

## Example Usage

```dart
final clipper = LMChatBubbleClipper(
  isSent: true,
  radius: 12.0,
  nipHeight: 8.0,
  nipWidth: 12.0,
  nipRadius: 4.0,
);



================================================
File: chat/Flutter/Core/Widgets/Chatroom/LMChatBubbleContent.md
================================================
---
sidebar_position: 14  
title: Chat Bubble Content Widget  
slug: /flutter/ui/widgets/chat-bubble-content-widget  
---

# LMChatBubbleContent

**File location**  
[`chat_bubble_content.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/conversation/chat_bubble_content.dart)  

`LMChatBubbleContent` manages the main content within a chat bubble, including text, mentions, and links. It offers customization for padding, styling, and interactive tag clicks.

## Properties

1. **`conversation`** (`LMChatConversationViewData`)  
   Represents the conversation being displayed.

2. **`onTagTap`** (`Function(String tag)`)  
   Callback triggered when a tag is tapped.

3. **`style`** (`LMChatBubbleContentStyle?`)  
   Controls the appearance of the chat bubble content.

**Note:** These properties are only a subset. More can be found inside the widget class. You can refer to the relevant widget class for more reference.

---

## Styling

### LMChatBubbleContentStyle

**File location**  
[`chat_bubble_content.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/conversation/chat_bubble_content.dart)  

`LMChatBubbleContentStyle` provides customization for the appearance of the chat bubble content.

| **Property**     | **Type**      | **Description**                  | **Required** | **Default**        |
|------------------|---------------|----------------------------------|--------------|--------------------|
| `visibleLines`   | `int?`        | Number of visible lines         | No           | `6`                |
| `textStyle`      | `TextStyle?`  | Text style for the bubble text  | No           | Font size 14, weight 400 |
| `padding`        | `EdgeInsets?` | Padding inside the bubble       | No           | `EdgeInsets.zero`  |

**Note:** These properties are only a subset. More can be found inside the style class. You can refer to the relevant style class for more reference.

---

## Example Usage

```dart
final customChatBubble = LMChatBubbleContent(
  conversation: conversationData,
  onTagTap: (tag) => print('Tag tapped: $tag'),
  style: LMChatBubbleContentStyle(
    textStyle: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
    padding: EdgeInsets.all(8.0),
    animation: true,
  ),
);



================================================
File: chat/Flutter/Core/Widgets/Chatroom/LMChatBubbleFooter.md
================================================
---
sidebar_position: 4  
title: Chat Bubble Footer  
slug: /flutter/ui/widgets/chat-bubble-footer  
---

# LMChatBubbleFooter

**File location**  
[`chat_bubble_footer.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/conversation/chat_bubble_footer.dart)  

`LMChatBubbleFooter` renders additional information like timestamps, message status, and pending icons at the bottom of a chat bubble.

## Properties

1. **`conversation`** (`LMChatConversationViewData`)  
   The conversation data associated with the chat bubble.

2. **`textWidth`** (`double?`)  
   Optional width for the footer.

3. **`pendingTimer`** (`LMChatIcon?`)  
   Optional icon indicating a pending message timer.

**Note:** These properties are only a subset. More can be found inside the widget class. You can refer to the relevant widget class for more reference.

---

## Styling

### LMChatBubbleFooterStyle

**File location**  
[`chat_bubble_footer.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/conversation/chat_bubble_footer.dart)  

`LMChatBubbleFooterStyle` allows customization of the footer’s layout, alignment, and styles for text and icons.

| **Property**          | **Type**              | **Description**                 | **Required** | **Default**       |
|-----------------------|-----------------------|---------------------------------|--------------|------------------|
| `timeStampStyle`      | `LMChatTextStyle?`    | Style for the timestamp text    | No           | _None_            |
| `pendingIconStyle`    | `LMChatIconStyle?`    | Style for the pending icon      | No           | _None_            |
| `mainAxisAlignment`   | `MainAxisAlignment?`  | Alignment along the main axis  | No           | `End`             |

**Note:** These properties are only a subset. More can be found inside the style class. You can refer to the relevant style class for more reference.

---

## Example Usage

```dart
final footer = LMChatBubbleFooter(
  conversation: conversationData,
  textWidth: 200.0,
  pendingTimer: LMChatIcon(iconData: Icons.timer),
  style: LMChatBubbleFooterStyle(
    timeStampStyle: LMChatTextStyle(
      textStyle: TextStyle(fontSize: 10, color: Colors.grey),
    ),
    mainAxisAlignment: MainAxisAlignment.end,
  ),
);



================================================
File: chat/Flutter/Core/Widgets/Chatroom/LMChatBubbleHeader.md
================================================
---
sidebar_position: 5  
title: Chat Bubble Header  
slug: /flutter/ui/widgets/chat-bubble-header  
---

# LMChatBubbleHeader

**File location**  
[`chat_bubble_header.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/conversation/chat_bubble_header.dart)  

`LMChatBubbleHeader` displays the header information of a chat bubble, including the sender’s name.

## Properties

1. **`conversationUser`** (`LMChatUserViewData`)  
   Represents the user associated with the conversation.

2. **`style`** (`LMChatTextStyle?`)  
   Controls the appearance of the header text.

**Note:** These properties are only a subset. More can be found inside the widget class.

---

## Example Usage

```dart
final header = LMChatBubbleHeader(
  conversationUser: LMChatUserViewData(name: 'John Doe'),
  style: LMChatTextStyle(
    textStyle: TextStyle(
      fontWeight: FontWeight.bold,
      color: Colors.blue,
    ),
  ),
);



================================================
File: chat/Flutter/Core/Widgets/Chatroom/LMChatBubbleMedia.md
================================================
---
sidebar_position: 6
title: Chat Bubble Media Widget
slug: /flutter/ui/widgets/chat-bubble-media-widget
---

# LMChatBubbleMedia

**File location**  
[`chat_bubble_media.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/conversation/chat_bubble_media.dart)  

`LMChatBubbleMedia` handles media attachments within a chat bubble, such as images or videos.

## Properties

1. **`count`** (`int`)  
   Represents the media count.

2. **`attachmentUploaded`** (`bool`)  
   Indicates if the attachment has been uploaded.

3. **`conversation`** (`LMChatConversationViewData`)  
   Contains the conversation data.

4. **`imageBuilder`** (`LMChatImageBuilder?`)  
   A builder function for images.

5. **`videoBuilder`** (`LMChatVideoBuilder?`)  
   A builder function for videos.

**Note:** Rest of the properties can be found in the widget class file.



================================================
File: chat/Flutter/Core/Widgets/Chatroom/LMChatBubbleReactions.md
================================================
---
sidebar_position: 7  
title: Chat Bubble Reactions  
slug: /flutter/ui/widgets/chat-bubble-reactions  
---

# LMChatBubbleReactions

**File location**  
[`chat_bubble_reactions.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/conversation/chat_bubble_reactions.dart)  

`LMChatBubbleReactions` handles displaying and interacting with message reactions inside a chat bubble.

## Properties

1. **`conversation`** (`LMChatConversationViewData`)  
   Represents the conversation associated with the reactions.

2. **`reactions`** (`List<LMChatReactionViewData>?`)  
   List of reactions associated with the chat bubble.

3. **`style`** (`LMChatBubbleReactionsStyle?`)  
   Customizes the appearance of the reactions.

**Note:** These properties are only a subset. More can be found inside the widget class.

---

## Styling

### LMChatBubbleReactionsStyle

**File location**  
[`chat_bubble_reactions.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/conversation/chat_bubble_reactions.dart)  

`LMChatBubbleReactionsStyle` provides styling for the reactions, including padding, margin, container color, and text style.

| **Property**            | **Type**      | **Description**                      | **Required** | **Default**               |
|-------------------------|---------------|--------------------------------------|--------------|---------------------------|
| `padding`               | `EdgeInsets?` | Padding around the reaction bubble  | No           | `EdgeInsets.only(top: 4)` |
| `containerBorderRadius` | `double?`     | Border radius of the container      | No           | `18.0`                    |
| `reactionTextStyle`     | `TextStyle?`  | Text style for the reaction text    | No           | _Inherited_                |

**Note:** These properties are only a subset. More can be found inside the style class.

---

## Example Usage

```dart
final reactionBubble = LMChatBubbleReactions(
  conversation: conversationData,
  reactions: reactionList,
  style: LMChatBubbleReactionsStyle(
    padding: EdgeInsets.only(top: 4),
    containerBorderRadius: 18.0,
    reactionTextStyle: TextStyle(fontSize: 12, color: Colors.grey),
  ),
);



================================================
File: chat/Flutter/Core/Widgets/Chatroom/LMChatBubbleReply.md
================================================
---
sidebar_position: 8  
title: Chat Bubble Reply  
slug: /flutter/ui/widgets/chat-bubble-reply  
---

# LMChatBubbleReply

**File location**  
[`chat_bubble_reply.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/conversation/chat_bubble_reply.dart)  

`LMChatBubbleReply` displays a reply to a conversation within a chat bubble, showing relevant information such as media, title, or subtitle.

## Properties

1. **`replyToConversation`** (`LMChatConversationViewData`)  
   The conversation to which this reply belongs.

2. **`title`** (`Widget?`)  
   Custom title widget for the reply item.

3. **`chatBubbleReplyStyle`** (`LMChatBubbleReplyStyle?`)  
   Style configuration for the reply item.

**Note:** These properties are only a subset. More can be found inside the widget class.

---

## Styling

### LMChatBubbleReplyStyle

**File location**  
[`chat_bubble_reply.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/conversation/chat_bubble_reply.dart)  

`LMChatBubbleReplyStyle` defines the appearance of the reply bubble, including padding, colors, and border radius.

| **Property**     | **Type**              | **Description**                      | **Required** | **Default**         |
|------------------|-----------------------|--------------------------------------|--------------|---------------------|
| `backgroundColor`| `Color?`              | Background color of the reply item  | No           | `null`              |
| `borderRadius`   | `double?`             | Border radius of the reply bubble   | No           | `8.0`               |
| `padding`        | `EdgeInsetsGeometry?` | Padding inside the reply bubble     | No           | _None_              |

**Note:** These properties are only a subset. More can be found inside the style class.

---

## Example Usage

```dart
final replyBubble = LMChatBubbleReply(
  replyToConversation: conversationData,
  title: Text('Reply Title'),
  chatBubbleReplyStyle: LMChatBubbleReplyStyle(
    backgroundColor: Colors.grey[200],
    borderRadius: 8.0,
    padding: EdgeInsets.all(8.0),
  ),
);



================================================
File: chat/Flutter/Core/Widgets/Chatroom/LMChatBubbleStates.md
================================================
---
sidebar_position: 9  
title: Chat Bubble State  
slug: /flutter/ui/widgets/chat-bubble-state  
---

# LMChatStateBubble

**File location**  
[`chat_bubble_state.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/conversation/chat_bubble_state.dart)  

`LMChatStateBubble` displays the state of a chat message, such as informational messages or system events, inside a bubble with customizable styles.

## Properties

1. **`message`** (`String`)  
   The message displayed within the state bubble.

2. **`style`** (`LMChatStateBubbleStyle?`)  
   Controls the appearance of the state bubble.

**Note:** These properties are only a subset. More can be found inside the widget class.

---

## Styling

### LMChatStateBubbleStyle

**File location**  
[`chat_bubble_state.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/conversation/chat_bubble_state.dart)  

`LMChatStateBubbleStyle` defines the appearance of the state bubble, including colors, borders, and alignment.

| **Property**     | **Type**              | **Description**                      | **Required** | **Default**         |
|------------------|-----------------------|--------------------------------------|--------------|---------------------|
| `backgroundColor`| `Color?`              | Background color of the state bubble | No           | _Theme default_     |
| `borderRadius`   | `double?`             | Border radius of the bubble          | No           | `18.0`              |
| `messageStyle`   | `LMChatTextStyle?`    | Style for the message text           | No           | _Inherited theme_   |

**Note:** These properties are only a subset. More can be found inside the style class.

---

## Example Usage

```dart
final stateBubble = LMChatStateBubble(
  message: 'This message was deleted',
  style: LMChatStateBubbleStyle(
    backgroundColor: Colors.grey[300],
    borderRadius: 18.0,
    messageStyle: LMChatTextStyle(
      textStyle: TextStyle(fontSize: 12, color: Colors.black),
    ),
  ),
);



================================================
File: chat/Flutter/Core/Widgets/Chatroom/LMChatMedia.md
================================================
---
sidebar_position: 10
title: Chat Bubble Media  
slug: /flutter/ui/widgets/chat-bubble-media  
---

# LMChatBubbleMedia

**File location**  
[`chat_bubble_media.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/conversation/chat_bubble_media.dart)  

`LMChatBubbleMedia` displays media content, such as images, videos, GIFs, or documents, within a chat bubble.

## Properties

1. **`attachments`** (`List<LMChatAttachmentViewData>`)  
   List of media attachments associated with the message.

2. **`count`** (`int`)  
   Number of attachments in the message.

3. **`attachmentUploaded`** (`bool`)  
   Indicates if the attachment has been uploaded.

**Note:** These properties are only a subset. More can be found inside the widget class.

---

## Example Usage

```dart
final mediaBubble = LMChatBubbleMedia(
  conversation: conversationData,
  attachments: attachmentsList,
  count: attachmentsList.length,
  attachmentUploaded: true,
  imageBuilder: (context, attachment) => Image.network(attachment.url),
);



================================================
File: chat/Flutter/Core/Widgets/Chatroom/LMChatroomTopic.md
================================================
---
sidebar_position: 13
title: Chatroom Topic Widget
slug: /flutter/ui/widgets/chatroom-topic-widget
---

# LMChatRoomTopic

**File location**  
[`chatroom_topic.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/chatroom/chatroom_topic.dart)  

`LMChatRoomTopic` is a widget designed to represent topics within a chatroom interface, offering customization for headers, footers, and user interaction.

## Properties

1. **`key`** (`Key?`)  
   Optional. Inherited from `super.key`.

2. **`conversation`** (`LMChatConversationViewData`)  
   Required. Contains the data of the conversation to display.

3. **`onTap`** (`Function`)  
   Required. Callback function triggered when the topic is tapped.

4. **`leading`** (`Widget?`)  
   Optional. A widget to display at the start of the topic (e.g., an avatar or icon).

5. **`trailing`** (`Widget?`)  
   Optional. A widget to display at the end of the topic (e.g., a button or status indicator).

**Note:** Rest of the properties can be found in the widget class file.

## Styling

There are no dedicated style classes referenced in this widget.

## Example Usage

```dart
final chatRoomTopic = LMChatRoomTopic(
  conversation: conversationData,
  onTap: () => print('Topic tapped!'),
  leading: Icon(Icons.chat),
  trailing: Icon(Icons.arrow_forward),
);



================================================
File: chat/Flutter/Core/Widgets/Chatroom/_category_.json
================================================
{
  "label": "Chatroom",
  "position": 2,
  "link": {
    "type": "generated-index",
    "description": "Documentation for Core Layer Chatroom Widgets in Chat"
  }
}



================================================
File: chat/Flutter/Core/Widgets/Fundamentals/_category_.json
================================================
{
  "label": "Fundamentals",
  "position": 1,
  "link": {
    "type": "generated-index",
    "description": "Documentation for Core Layer Fundamentals Widgets in Chat"
  }
}



================================================
File: chat/Flutter/Core/Widgets/Fundamentals/Button/LMChatButton.md
================================================
---
sidebar_position: 1  
title: Button Widget  
slug: /flutter/ui/widgets/button-widget  
---

# LMChatButton

**File location**  
[`button.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/common/buttons/button.dart)  

`LMChatButton` is a customizable button widget used within the chat interface. It supports icons, text, and state management for active and inactive modes.

## Properties

1. **`isActive`** (`bool`)  
   Indicates whether the button is active or inactive.

2. **`text`** (`LMChatText?`)  
   The text to display within the button.

3. **`style`** (`LMChatButtonStyle?`)  
   Customizes the button's appearance.

4. **`onTap`** (`VoidCallback?`)  
   Callback triggered when the button is tapped.

**Note:** These properties are only a subset. More can be found inside the widget class.

---

## Styling

### LMChatButtonStyle

**File location**  
[`button.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/common/buttons/button.dart)  

`LMChatButtonStyle` defines the visual appearance of the button, including size, padding, colors, and icon placement.

| **Property**      | **Type**              | **Description**                    | **Required** | **Default**          |
|-------------------|-----------------------|------------------------------------|--------------|---------------------|
| `backgroundColor` | `Color?`              | Background color of the button     | No           | `Colors.transparent` |
| `borderRadius`    | `double?`             | Border radius of the button        | No           | `8.0`                |
| `padding`         | `EdgeInsets?`         | Padding around the button          | No           | `EdgeInsets.all(4)`  |

**Note:** These properties are only a subset. More can be found inside the style class.

---

## Example Usage

```dart
final chatButton = LMChatButton(
  text: LMChatText('Send'),
  isActive: true,
  onTap: () => print('Button tapped'),
  style: LMChatButtonStyle(
    backgroundColor: Colors.blue,
    borderRadius: 8.0,
    padding: EdgeInsets.all(8.0),
  ),
);



================================================
File: chat/Flutter/Core/Widgets/Fundamentals/Button/LMChatFloatingActionButton.md
================================================
---
sidebar_position: 2  
title: Floating Action Button Widget  
slug: /flutter/ui/widgets/floating-action-button  
---

# LMChatFloatingActionButton

**File location**  
[`floating_action_button.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/common/buttons/floating_action_button.dart)  

`LMChatFloatingActionButton` is a customizable floating action button for the chat interface. It supports toggling between collapsed and expanded states, along with text and icon customization.

## Properties

1. **`isCollapsed`** (`bool`)  
   Determines if the button is in a collapsed state.

2. **`text`** (`String?`)  
   Optional text displayed inside the button.

3. **`onTap`** (`VoidCallback?`)  
   Callback function triggered on button tap.

**Note:** These properties are only a subset. More can be found inside the widget class.

---

## Styling

### LMChatFloatingActionButtonStyle

**File location**  
[`floating_action_button.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/common/buttons/floating_action_button.dart)  

`LMChatFloatingActionButtonStyle` defines the appearance of the floating action button, including size, colors, and animation behavior.

| **Property**        | **Type**              | **Description**                      | **Required** | **Default**       |
|---------------------|-----------------------|--------------------------------------|--------------|------------------|
| `backgroundColor`   | `Color?`              | Background color of the button      | No           | _Inherited theme_ |
| `collapsedHeight`   | `double?`             | Height when the button is collapsed | No           | _None_            |
| `expandedWidth`     | `double?`             | Width when the button is expanded   | No           | _None_            |

**Note:** These properties are only a subset. More can be found inside the style class.

---

## Example Usage

```dart
final floatingActionButton = LMChatFloatingActionButton(
  isCollapsed: false,
  text: 'New',
  onTap: () => print('FAB tapped'),
  style: LMChatFloatingActionButtonStyle(
    backgroundColor: Colors.blue,
    collapsedHeight: 56.0,
    expandedWidth: 72.0,
    animationDuration: Duration(milliseconds: 300),
    animationCurve: Curves.easeInOut,
  ),
);



================================================
File: chat/Flutter/Core/Widgets/Fundamentals/Button/_category_.json
================================================
{
  "label": "Fundamentals: Button",
  "position": 1,
  "link": {
    "type": "generated-index",
    "description": "Documentation for Core Layer Fundamentals: Button Widgets in Chat"
  }
}



================================================
File: chat/Flutter/Core/Widgets/Fundamentals/Dialog/LMChatDialog.md
================================================
---
sidebar_position: 1  
title: Dialog Widget  
slug: /flutter/ui/widgets/dialog-widget  
---

# LMChatDialog

**File location**  
[`dialog.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/common/dialog/dialog.dart)  

`LMChatDialog` is a customizable dialog widget for the chat interface. It supports displaying a title, content, and actions with flexible styling.

## Properties

1. **`title`** (`Widget?`)  
   The title of the dialog.

2. **`content`** (`Widget?`)  
   The main content displayed within the dialog.

3. **`actions`** (`List<Widget>?`)  
   List of action buttons displayed at the bottom of the dialog.

4. **`style`** (`LMChatDialogStyle?`)  
   Customizes the appearance of the dialog.

**Note:** These properties are only a subset. More can be found inside the widget class.

---

## Styling

### LMChatDialogStyle

**File location**  
[`dialog.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/common/dialog/dialog.dart)  

`LMChatDialogStyle` defines the visual appearance of the dialog, including background color and shape.

| **Property**      | **Type**      | **Description**                    | **Required** | **Default**          |
|-------------------|---------------|------------------------------------|--------------|---------------------|
| `backgroundColor` | `Color?`      | Background color of the dialog    | No           | _Inherited theme_   |
| `shape`           | `ShapeBorder?`| Shape of the dialog               | No           | _None_              |

**Note:** These properties are only a subset. More can be found inside the style class.

---

## Example Usage

```dart
final chatDialog = LMChatDialog(
  title: Text('Dialog Title'),
  content: Text('This is the dialog content'),
  actions: [
    TextButton(
      onPressed: () => print('Dialog Action'),
      child: Text('Close'),
    ),
  ],
  style: LMChatDialogStyle(
    backgroundColor: Colors.white,
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.circular(8.0),
    ),
  ),
);



================================================
File: chat/Flutter/Core/Widgets/Fundamentals/Dialog/_category_.json
================================================
{
  "label": "Fundamentals: Dialog",
  "position": 2,
  "link": {
    "type": "generated-index",
    "description": "Documentation for Core Layer Fundamentals: Dialog Widgets in Chat"
  }
}



================================================
File: chat/Flutter/Core/Widgets/Fundamentals/Icon/LMChatIcon.md
================================================
---
sidebar_position: 1  
title: Icon Widget  
slug: /flutter/ui/widgets/icon-widget  
---

# LMChatIcon

**File location**  
[`icon.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/common/icon/icon.dart)  

`LMChatIcon` is a versatile widget used to display icons, SVGs, or PNGs within the chat interface. It supports multiple icon types with customizable styles for size, color, and fit.

## Properties

1. **`type`** (`LMChatIconType`)  
   Defines the type of icon to display (e.g., `icon`, `svg`, or `png`).

2. **`icon`** (`IconData?`)  
   Icon data if the type is `LMChatIconType.icon`.

3. **`assetPath`** (`String?`)  
   Asset path for PNG or SVG icons.

4. **`style`** (`LMChatIconStyle?`)  
   Customizes the appearance of the icon.

**Note:** These properties are only a subset. More can be found inside the widget class.

---

## Styling

### LMChatIconStyle

**File location**  
[`icon.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/common/icon/icon.dart)  

`LMChatIconStyle` defines the visual aspects of the icon, including size, padding, background color, and border.

| **Property**      | **Type**              | **Description**                   | **Required** | **Default**      |
|-------------------|-----------------------|-----------------------------------|--------------|-----------------|
| `color`           | `Color?`              | Color of the icon                | No           | _Inherited theme_ |
| `size`            | `double?`             | Size of the icon                 | No           | `24.0`           |
| `boxBorderRadius` | `double?`             | Border radius of the icon box    | No           | `0.0`            |

**Note:** These properties are only a subset. More can be found inside the style class.

---

## Example Usage

```dart
final chatIcon = LMChatIcon(
  type: LMChatIconType.icon,
  icon: Icons.message,
  style: LMChatIconStyle(
    color: Colors.blue,
    size: 32.0,
    boxBorderRadius: 8.0,
  ),
);



================================================
File: chat/Flutter/Core/Widgets/Fundamentals/Icon/_category_.json
================================================
{
  "label": "Fundamentals: Icon",
  "position": 3,
  "link": {
    "type": "generated-index",
    "description": "Documentation for Core Layer Fundamentals: Icon Widgets in Chat"
  }
}



================================================
File: chat/Flutter/Core/Widgets/Fundamentals/Menu/LMChatMenu.md
================================================



================================================
File: chat/Flutter/Core/Widgets/Fundamentals/Menu/LMChatMenuItem.md
================================================
---
sidebar_position: 2  
title: Menu Item Widget  
slug: /flutter/ui/widgets/menu-item-widget  
---

# LMChatMenuItem

**File location**  
[`menu_item.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/common/menu/menu_item.dart)  

`LMChatMenuItem` represents an individual item within a chat menu. It supports a title, optional leading widget, and a tap callback for interaction.

## Properties

1. **`leading`** (`Widget?`)  
   An optional widget displayed before the title.

2. **`title`** (`Widget`)  
   The title widget of the menu item.

3. **`onTap`** (`VoidCallback`)  
   Callback function triggered when the menu item is tapped.

**Note:** These properties are only a subset. More can be found inside the widget class.

---

## Styling

### LMChatMenuItemStyle

**File location**  
[`menu_item.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/common/menu/menu_item.dart)  

`LMChatMenuItemStyle` allows customization of the appearance of menu items. This can include padding, margin, or background configuration (details can be extended as needed).

---

## Example Usage

```dart
final menuItem = LMChatMenuItem(
  leading: Icon(Icons.reply),
  title: Text('Reply'),
  onTap: () => print('Reply selected'),
);



================================================
File: chat/Flutter/Core/Widgets/Fundamentals/Menu/_category_.json
================================================
{
  "label": "Fundamentals: Menu",
  "position": 4,
  "link": {
    "type": "generated-index",
    "description": "Documentation for Core Layer Fundamentals: Menu Widgets in Chat"
  }
}



================================================
File: chat/Flutter/Core/Widgets/Fundamentals/Sheets/LMChatBottomSheet.md
================================================
---
sidebar_position: 1  
title: Bottom Sheet Widget  
slug: /flutter/ui/widgets/bottom-sheet-widget  
---

# LMChatBottomSheet

**File location**  
[`bottom_sheet.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/common/sheets/bottom_sheet.dart)  

`LMChatBottomSheet` is a customizable bottom sheet widget used within the chat interface. It supports dynamic height, children widgets, and styling options.

## Properties

1. **`title`** (`LMChatText?`)  
   An optional title displayed at the top of the sheet.

2. **`children`** (`List<Widget>`)  
   A list of child widgets displayed inside the bottom sheet.

3. **`style`** (`LMChatBottomSheetStyle?`)  
   Customizes the appearance of the bottom sheet.

**Note:** These properties are only a subset. More can be found inside the widget class.

---

## Styling

### LMChatBottomSheetStyle

**File location**  
[`bottom_sheet.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/common/sheets/bottom_sheet.dart)  

`LMChatBottomSheetStyle` defines the appearance of the bottom sheet, including colors, padding, and drag bar options.

| **Property**      | **Type**               | **Description**                   | **Required** | **Default**      |
|-------------------|------------------------|-----------------------------------|--------------|-----------------|
| `backgroundColor` | `Color?`               | Background color of the sheet    | No           | _Inherited theme_ |
| `height`          | `double?`              | Height of the bottom sheet       | No           | _None_           |
| `borderRadius`    | `BorderRadiusGeometry?`| Border radius of the sheet       | No           | `8.0`            |

**Note:** These properties are only a subset. More can be found inside the style class.

---

## Example Usage

```dart
final bottomSheet = LMChatBottomSheet(
  title: LMChatText('Options'),
  children: [
    ListTile(title: Text('Item 1')),
    ListTile(title: Text('Item 2')),
  ],
  style: LMChatBottomSheetStyle(
    backgroundColor: Colors.white,
    height: 300.0,
    borderRadius: BorderRadius.circular(16.0),
    padding: EdgeInsets.all(16.0),
    dragBar: Container(
      width: 48,
      height: 8,
      color: Colors.grey,
    ),
  ),
);



================================================
File: chat/Flutter/Core/Widgets/Fundamentals/Sheets/_category_.json
================================================
{
  "label": "Fundamentals: Sheets",
  "position": 5,
  "link": {
    "type": "generated-index",
    "description": "Documentation for Core Layer Fundamentals: Sheets Widgets in Chat"
  }
}



================================================
File: chat/Flutter/Core/Widgets/Fundamentals/Snackbar/LMChatSnackBar.md
================================================
---
sidebar_position: 1  
title: Snackbar Widget  
slug: /flutter/ui/widgets/snackbar-widget  
---

# LMChatSnackBar

**File location**  
[`snackbar.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/common/snackbar/snackbar.dart)  

`LMChatSnackBar` is a customizable snackbar widget used within the chat interface to display brief messages or notifications. It supports a wide range of customization options, including actions, animations, and styles.

## Properties

1. **`content`** (`Widget`)  
   The main content displayed within the snackbar.

2. **`style`** (`LMChatSnackBarStyle?`)  
   Customizes the appearance and behavior of the snackbar.

**Note:** These properties are only a subset. More can be found inside the widget class.

---

## Styling

### LMChatSnackBarStyle

**File location**  
[`snackbar.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/common/snackbar/snackbar.dart)  

`LMChatSnackBarStyle` defines the appearance and behavior of the snackbar, including padding, shape, and actions.

| **Property**             | **Type**                | **Description**                     | **Required** | **Default**         |
|--------------------------|-------------------------|-------------------------------------|--------------|--------------------|
| `backgroundColor`        | `Color?`                | Background color of the snackbar   | No           | _Inherited theme_  |
| `elevation`              | `double?`               | Elevation of the snackbar          | No           | `6.0`              |
| `duration`               | `Duration?`             | Duration for which the snackbar is visible | No | `4 seconds`     |
| `dismissDirection`       | `DismissDirection?`     | Dismiss direction for the snackbar | No           | `DismissDirection.down` |
| `padding`                | `EdgeInsetsGeometry?`   | Padding inside the snackbar        | No           | `EdgeInsets.all(8)` |

**Note:** These properties are only a subset. More can be found inside the style class.

---

## Example Usage

```dart
final chatSnackBar = LMChatSnackBar(
  content: Text('This is a snackbar message'),
  style: LMChatSnackBarStyle(
    backgroundColor: Colors.black,
    elevation: 4.0,
    dismissDirection: DismissDirection.down,
    padding: EdgeInsets.all(16.0),
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.circular(8.0),
    ),
  ),
);

ScaffoldMessenger.of(context).showSnackBar(chatSnackBar);



================================================
File: chat/Flutter/Core/Widgets/Fundamentals/Snackbar/_category_.json
================================================
{
  "label": "Fundamentals: Snackbar",
  "position": 6,
  "link": {
    "type": "generated-index",
    "description": "Documentation for Core Layer Fundamentals: Snackbar Widgets in Chat"
  }
}



================================================
File: chat/Flutter/Core/Widgets/Fundamentals/Text/LMChatText.md
================================================
---
sidebar_position: 1  
title: Text Widget  
slug: /flutter/ui/widgets/text-widget  
---

# LMChatText

**File location**  
[`text.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/common/text/text.dart)  

`LMChatText` is a reusable text widget designed for use throughout the chat interface. It provides high customizability through styles and supports interaction with `onTap` functionality.

## Properties

1. **`text`** (`String`)  
   The text content to display.

2. **`onTap`** (`Function()?`)  
   An optional callback function triggered on tapping the text.

3. **`style`** (`LMChatTextStyle?`)  
   Customizes the appearance of the text widget.

**Note:** These properties are only a subset. More can be found inside the widget class.

---

## Styling

### LMChatTextStyle

**File location**  
[`text.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/common/text/text.dart)  

`LMChatTextStyle` defines the visual appearance of the text, including alignment, padding, and background configuration.

| **Property**      | **Type**               | **Description**                    | **Required** | **Default**        |
|-------------------|------------------------|------------------------------------|--------------|-------------------|
| `textAlign`       | `TextAlign?`           | Alignment of the text             | No           | `TextAlign.start` |
| `textStyle`       | `TextStyle?`           | Styling for the text appearance   | No           | _Default TextStyle_ |
| `padding`         | `EdgeInsetsGeometry?`  | Padding around the text box       | No           | `EdgeInsets.zero` |
| `backgroundColor` | `Color?`               | Background color of the text box  | No           | _Transparent_      |
| `borderRadius`    | `double?`              | Border radius for the text box    | No           | `4.0`              |

**Note:** These properties are only a subset. More can be found inside the style class.

---

## Example Usage

```dart
final chatText = LMChatText(
  'Hello, World!',
  style: LMChatTextStyle(
    textAlign: TextAlign.center,
    textStyle: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
    padding: EdgeInsets.all(8.0),
    backgroundColor: Colors.blue.withOpacity(0.1),
    borderRadius: 8.0,
  ),
  onTap: () => print('Text tapped'),
);



================================================
File: chat/Flutter/Core/Widgets/Fundamentals/Text/_category_.json
================================================
{
  "label": "Fundamentals: Text",
  "position": 7,
  "link": {
    "type": "generated-index",
    "description": "Documentation for Core Layer Fundamentals: Text Widgets in Chat"
  }
}



================================================
File: chat/Flutter/Core/Widgets/Fundamentals/Tile/LMChatTile.md
================================================
---
sidebar_position: 1  
title: Tile Widget  
slug: /flutter/ui/widgets/tile-widget  
---

# LMChatTile

**File location**  
[`tile.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/common/tile/tile.dart)  

`LMChatTile` is a reusable widget for displaying content in a tile layout. It supports customizable child elements like leading icons, titles, subtitles, and trailing widgets.

## Properties

1. **`leading`** (`Widget?`)  
   An optional widget displayed at the start of the tile.

2. **`title`** (`Widget?`)  
   The main title of the tile.

3. **`onTap`** (`VoidCallback?`)  
   Callback function triggered when the tile is tapped.

4. **`style`** (`LMChatTileStyle?`)  
   Defines the appearance of the tile.

**Note:** These properties are only a subset. More can be found inside the widget class.

---

## Styling

### LMChatTileStyle

**File location**  
[`tile.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/common/tile/tile.dart)  

`LMChatTileStyle` allows for customization of the tile's appearance, including layout, colors, and spacing.

| **Property**           | **Type**               | **Description**                  | **Required** | **Default**           |
|------------------------|------------------------|----------------------------------|--------------|----------------------|
| `backgroundColor`      | `Color?`               | Background color of the tile    | No           | _Transparent_        |
| `borderRadius`         | `double?`              | Border radius of the tile       | No           | `0.0`                |
| `padding`              | `EdgeInsets?`          | Padding inside the tile         | No           | `EdgeInsets.all(12)` |
| `height`               | `double?`              | Height of the tile              | No           | _None_               |

**Note:** These properties are only a subset. More can be found inside the style class.

---

## Example Usage

```dart
final chatTile = LMChatTile(
  leading: Icon(Icons.person),
  title: Text('John Doe'),
  subtitle: Text('Active now'),
  trailing: Icon(Icons.arrow_forward),
  onTap: () => print('Tile tapped'),
  style: LMChatTileStyle(
    backgroundColor: Colors.white,
    borderRadius: 8.0,
    padding: EdgeInsets.all(16.0),
  ),
);



================================================
File: chat/Flutter/Core/Widgets/Fundamentals/Tile/_category_.json
================================================
{
  "label": "Fundamentals: Tile",
  "position": 8,
  "link": {
    "type": "generated-index",
    "description": "Documentation for Core Layer Fundamentals: Tile Widgets in Chat"
  }
}



================================================
File: chat/Flutter/Core/Widgets/Media/LMChatGIF.md
================================================
---
sidebar_position: 2  
title: GIF Widget  
slug: /flutter/ui/widgets/gif-widget  
---

# LMChatGIF

**File location**  
[`gif.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/media/gif.dart)  

`LMChatGIF` is a widget to display and control GIF animations within the chat interface. It supports autoplay, customizable styles, and overlay elements.

## Properties

1. **`media`** (`LMChatMediaModel`)  
   Contains the GIF data to be displayed.

2. **`fps`** (`int?`)  
   The frames per second for the GIF animation.

3. **`overlay`** (`Widget?`)  
   An optional widget to overlay on top of the GIF.

**Note:** These properties are only a subset. More can be found inside the widget class.

---

## Styling

### LMChatGIFStyle

**File location**  
[`gif.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/media/gif.dart)  

`LMChatGIFStyle` defines the appearance of the GIF widget, including size, fit, and overlay options.

| **Property**       | **Type**              | **Description**                     | **Required** | **Default**       |
|--------------------|-----------------------|-------------------------------------|--------------|------------------|
| `width`            | `double?`             | Width of the GIF container         | No           | _None_           |
| `borderRadius`     | `BorderRadius?`       | Border radius of the GIF container | No           | `8.0`            |
| `overlayColor`     | `Color?`              | Color of the overlay container     | No           | _Black (50%)_    |

**Note:** These properties are only a subset. More can be found inside the style class.

---

## Example Usage

```dart
final gifWidget = LMChatGIF(
  media: mediaData,
  fps: 24,
  overlay: Icon(Icons.play_arrow, color: Colors.white),
  style: LMChatGIFStyle(
    width: 100.0,
    borderRadius: BorderRadius.circular(8),
    overlayColor: Colors.black.withOpacity(0.5),
  ),
);



================================================
File: chat/Flutter/Core/Widgets/Media/LMChatImage.md
================================================
---
sidebar_position: 3  
title: Image Widget  
slug: /flutter/ui/widgets/image-widget  
---

# LMChatImage

**File location**  
[`image.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/media/image.dart)  

`LMChatImage` displays images within a chat interface. It supports multiple sources (network, file, asset) and allows customization through style and error handling.

## Properties

1. **`imageUrl`** (`String?`)  
   URL of the image to load from the network.

2. **`imageFile`** (`File?`)  
   File object for local images.

3. **`style`** (`LMChatImageStyle?`)  
   Controls the appearance and layout of the image.

**Note:** These properties are only a subset. More can be found inside the widget class.

---

## Styling

### LMChatImageStyle

**File location**  
[`image.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/media/image.dart)  

`LMChatImageStyle` allows customization of the image widget, including dimensions, borders, padding, and background.

| **Property**      | **Type**              | **Description**                     | **Required** | **Default**      |
|-------------------|-----------------------|-------------------------------------|--------------|-----------------|
| `height`          | `double?`             | Height of the image container      | No           | _None_           |
| `borderRadius`    | `BorderRadius?`       | Border radius of the image         | No           | `8.0`            |
| `boxFit`          | `BoxFit?`             | How the image should be fitted     | No           | _Cover_          |

**Note:** These properties are only a subset. More can be found inside the style class.

---

## Example Usage

```dart
final chatImage = LMChatImage(
  imageUrl: 'https://example.com/image.png',
  style: LMChatImageStyle(
    height: 150.0,
    borderRadius: BorderRadius.circular(8.0),
    boxFit: BoxFit.cover,
  ),
  onTap: () => print('Image tapped'),
);



================================================
File: chat/Flutter/Core/Widgets/Media/LMChatLinkPreview.md
================================================
---
sidebar_position: 4  
title: Link Preview Widget  
slug: /flutter/ui/widgets/link-preview  
---

# LMChatLinkPreview

**File location**  
[`link_preview.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/media/link_preview.dart)  

`LMChatLinkPreview` displays a preview of a link in the chat interface using Open Graph tags, with support for custom builders and style configurations.

## Properties

1. **`ogTags`** (`LMChatOGTagsViewData`)  
   Open Graph tags used to display link data.

2. **`onTap`** (`VoidCallback?`)  
   Callback for handling tap events on the link preview.

3. **`style`** (`LMChatLinkPreviewStyle?`)  
   Customizes the appearance of the link preview.

**Note:** These properties are only a subset. More can be found inside the widget class.

---

## Styling

### LMChatLinkPreviewStyle

**File location**  
[`link_preview.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/media/link_preview.dart)  

`LMChatLinkPreviewStyle` defines the appearance of the link preview, including padding, size, and text styles.

| **Property**       | **Type**            | **Description**                 | **Required** | **Default**            |
|--------------------|---------------------|---------------------------------|--------------|------------------------|
| `margin`           | `EdgeInsets?`       | Margin around the preview      | No           | `EdgeInsets.only(bottom: 8)` |
| `width`            | `double?`           | Width of the preview container | No           | `double.infinity`      |
| `titleStyle`       | `LMChatTextStyle?`  | Text style for the title       | No           | _Defined default style_ |

**Note:** These properties are only a subset. More can be found inside the style class.

---

## Example Usage

```dart
final linkPreview = LMChatLinkPreview(
  ogTags: ogTagsData,
  onTap: () => launch(ogTagsData.url),
  style: LMChatLinkPreviewStyle(
    margin: EdgeInsets.only(bottom: 8),
    width: double.infinity,
    titleStyle: LMChatTextStyle(
      textStyle: TextStyle(
        fontSize: 12,
        fontWeight: FontWeight.w500,
      ),
    ),
  ),
);



================================================
File: chat/Flutter/Core/Widgets/Media/LMChatLinkPreviewBar.md
================================================
---
sidebar_position: 5  
title: Link Preview Bar Widget  
slug: /flutter/ui/widgets/link-preview-bar  
---

# LMChatLinkPreviewBar

**File location**  
[`link_preview_bar.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/media/link_preview_bar.dart)  

`LMChatLinkPreviewBar` displays a preview of a link on top of the chat bar text field. It supports customizable builders for different parts of the preview and style configurations.

## Properties

1. **`ogTags`** (`LMChatOGTagsViewData`)  
   The Open Graph tags to be displayed in the link preview bar.

2. **`onCanceled`** (`VoidCallback?`)  
   Callback triggered when the link preview bar is canceled.

3. **`style`** (`LMChatLinkPreviewBarStyle?`)  
   Customizes the appearance of the link preview bar.

**Note:** These properties are only a subset. More can be found inside the widget class.

---

## Styling

### LMChatLinkPreviewBarStyle

**File location**  
[`link_preview_bar.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/media/link_preview_bar.dart)  

`LMChatLinkPreviewBarStyle` defines the appearance of the link preview bar, including size, padding, and text style.

| **Property**       | **Type**              | **Description**                    | **Required** | **Default**            |
|--------------------|-----------------------|------------------------------------|--------------|------------------------|
| `innerPadding`     | `EdgeInsetsGeometry?` | Padding inside the preview bar    | No           | `EdgeInsets.all(8)`    |
| `width`            | `double?`             | Width of the preview bar container | No           | `80.w`                 |
| `titleStyle`       | `LMChatTextStyle?`    | Text style for the title          | No           | _Default font size 14_ |

**Note:** These properties are only a subset. More can be found inside the style class.

---

## Example Usage

```dart
final linkPreviewBar = LMChatLinkPreviewBar(
  ogTags: ogTagsData,
  onCanceled: () => print('Link preview canceled'),
  style: LMChatLinkPreviewBarStyle(
    innerPadding: EdgeInsets.all(8.0),
    width: 300.0,
    titleStyle: LMChatTextStyle(
      textStyle: TextStyle(
        fontSize: 14,
        fontWeight: FontWeight.w500,
      ),
    ),
  ),
);



================================================
File: chat/Flutter/Core/Widgets/Media/LMChatMediaErrorWidget.md
================================================
---
sidebar_position: 1  
title: Media Error Widget  
slug: /flutter/ui/widgets/media-error  
---

# LMChatMediaErrorWidget

**File location**  
[`error.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/media/error.dart)  

`LMChatMediaErrorWidget` displays an error message when there is a failure in fetching media content. It offers customization for colors and icons based on different states.

## Properties

1. **`isPP`** (`bool`)  
   Indicates whether the error is related to a profile picture (PP).

2. **`style`** (`LMChatMediaErrorStyle?`)  
   Controls the appearance of the error widget.

**Note:** These properties are only a subset. More can be found inside the widget class.

---

## Styling

### LMChatMediaErrorStyle

**File location**  
[`error.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/media/error.dart)  

`LMChatMediaErrorStyle` defines the appearance of the media error widget, including primary color, background color, and text styles.

| **Property**        | **Type**  | **Description**                | **Required** | **Default**          |
|---------------------|-----------|--------------------------------|--------------|----------------------|
| `primaryColor`      | `Color?`  | Primary color of the widget    | No           | _Inherited from theme_ |
| `backgroundColor`   | `Color?`  | Background color of the widget | No           | _Default white_       |
| `iconColor`         | `Color?`  | Color for the error icon       | No           | _Theme default_       |

**Note:** These properties are only a subset. More can be found inside the style class.

---

## Example Usage

```dart
final mediaErrorWidget = LMChatMediaErrorWidget(
  isPP: true,
  style: LMChatMediaErrorStyle(
    primaryColor: Colors.red,
    backgroundColor: Colors.white,
    iconColor: Colors.black,
  ),
);



================================================
File: chat/Flutter/Core/Widgets/Media/LMChatVideo.md
================================================
---
sidebar_position: 6  
title: Video Widget  
slug: /flutter/ui/widgets/video-widget  
---

# LMChatVideo

**File location**  
[`video.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/media/video.dart)  

`LMChatVideo` is a widget that plays video content within the chat interface, supporting customization through style and playback controls.

## Properties

1. **`media`** (`LMChatMediaModel`)  
   The media model containing the video information.

2. **`style`** (`LMChatVideoStyle?`)  
   Controls the appearance and behavior of the video widget.

3. **`muteButton`** (`LMChatButtonBuilder?`)  
   Custom builder for the mute button.

**Note:** These properties are only a subset. More can be found inside the widget class.

---

## Styling

### LMChatVideoStyle

**File location**  
[`video.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/media/video.dart)  

`LMChatVideoStyle` allows you to customize the video widget, including size, borders, controls, and playback behavior.

| **Property**        | **Type**              | **Description**                 | **Required** | **Default**       |
|---------------------|-----------------------|---------------------------------|--------------|------------------|
| `width`             | `double?`             | Width of the video container   | No           | _None_           |
| `borderRadius`      | `BorderRadius?`       | Border radius of the video     | No           | `8.0`            |
| `autoPlay`          | `bool?`               | Auto-play the video            | No           | `false`          |

**Note:** These properties are only a subset. More can be found inside the style class.

---

## Example Usage

```dart
final videoWidget = LMChatVideo(
  media: mediaData,
  style: LMChatVideoStyle(
    width: 300.0,
    borderRadius: BorderRadius.circular(8.0),
    autoPlay: true,
  ),
  muteButton: (context) => IconButton(
    icon: Icon(Icons.volume_off),
    onPressed: () => print('Mute toggled'),
  ),
);



================================================
File: chat/Flutter/Core/Widgets/Media/_category_.json
================================================
{
  "label": "Media",
  "position": 3,
  "link": {
    "type": "generated-index",
    "description": "Documentation for Core Layer Media Widgets in Chat"
  }
}



================================================
File: chat/Flutter/Core/Widgets/Media/Document/LMChatDocumentPreview.md
================================================
---
sidebar_position: 1  
title: Document Preview Widget  
slug: /flutter/ui/widgets/document-preview  
---

# LMChatDocumentPreview

**File location**  
[`preview.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/media/document/preview.dart)  

`LMChatDocumentPreview` displays a preview of a document with customizable styles, supporting media attachment management and flexible layouts.

## Properties

1. **`media`** (`LMChatMediaModel`)  
   The media content to be displayed in the preview.

2. **`style`** (`LMChatDocumentPreviewStyle?`)  
   Customizes the appearance of the document preview.

**Note:** These properties are only a subset. More can be found inside the widget class.

---

## Styling

### LMChatDocumentPreviewStyle

**File location**  
[`preview.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/media/document/preview.dart)  

`LMChatDocumentPreviewStyle` defines the visual aspects of the document preview, such as colors, padding, and borders.

| **Property**      | **Type**              | **Description**                     | **Required** | **Default**        |
|-------------------|-----------------------|-------------------------------------|--------------|-------------------|
| `backgroundColor` | `Color?`              | Background color of the preview    | No           | `Colors.white`    |
| `borderRadius`    | `BorderRadius?`       | Border radius of the preview       | No           | `8.0`             |
| `padding`         | `EdgeInsets?`         | Padding inside the preview         | No           | `EdgeInsets.all(8)` |

**Note:** These properties are only a subset. More can be found inside the style class.

---

## Example Usage

```dart
final documentPreview = LMChatDocumentPreview(
  media: mediaData,
  style: LMChatDocumentPreviewStyle(
    backgroundColor: Colors.grey[200],
    borderRadius: BorderRadius.circular(8.0),
    padding: EdgeInsets.all(8.0),
  ),
);



================================================
File: chat/Flutter/Core/Widgets/Media/Document/LMChatDocumentThumbnail.md
================================================
---
sidebar_position: 2  
title: Document Thumbnail Widget  
slug: /flutter/ui/widgets/document-thumbnail  
---

# LMChatDocumentThumbnail

**File location**  
[`thumbnail.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/media/document/thumbnail.dart)  

`LMChatDocumentThumbnail` displays a thumbnail representation of a document within the chat interface, supporting overlays and custom styles.

## Properties

1. **`media`** (`LMChatMediaModel`)  
   The media content for the document thumbnail.

2. **`overlay`** (`LMChatDocumentTile?`)  
   An optional overlay widget for the thumbnail.

3. **`style`** (`LMChatDocumentThumbnailStyle?`)  
   Customizes the appearance of the document thumbnail.

**Note:** These properties are only a subset. More can be found inside the widget class.

---

## Styling

### LMChatDocumentThumbnailStyle

**File location**  
[`thumbnail.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/media/document/thumbnail.dart)  

`LMChatDocumentThumbnailStyle` defines the visual aspects of the document thumbnail, including size, border, and padding.

| **Property**      | **Type**              | **Description**                  | **Required** | **Default**         |
|-------------------|-----------------------|----------------------------------|--------------|--------------------|
| `height`          | `double?`             | Height of the thumbnail          | No           | `100.0`             |
| `borderRadius`    | `BorderRadius?`       | Border radius of the thumbnail   | No           | `8.0`               |
| `backgroundColor` | `Color?`              | Background color of the thumbnail | No          | `Colors.white`      |

**Note:** These properties are only a subset. More can be found inside the style class.

---

## Example Usage

```dart
final documentThumbnail = LMChatDocumentThumbnail(
  media: mediaData,
  showOverlay: true,
  style: LMChatDocumentThumbnailStyle(
    height: 100.0,
    borderRadius: BorderRadius.circular(8.0),
    backgroundColor: Colors.white,
  ),
);



================================================
File: chat/Flutter/Core/Widgets/Media/Document/LMChatDocumentTile.md
================================================
---
sidebar_position: 3  
title: Document Tile Widget  
slug: /flutter/ui/widgets/document-tile  
---

# LMChatDocumentTile

**File location**  
[`tile.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/media/document/tile.dart)  

`LMChatDocumentTile` displays a tile for a document within the chat interface, supporting title, subtitle, and icons with flexible styling options.

## Properties

1. **`media`** (`LMChatMediaModel`)  
   The document to display in the tile.

2. **`title`** (`Widget?`)  
   An optional title widget for the document.

3. **`style`** (`LMChatDocumentTileStyle?`)  
   Controls the appearance of the document tile.

**Note:** These properties are only a subset. More can be found inside the widget class.

---

## Styling

### LMChatDocumentTileStyle

**File location**  
[`tile.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/media/document/tile.dart)  

`LMChatDocumentTileStyle` defines the appearance of the document tile, including layout, padding, colors, and icon styles.

| **Property**      | **Type**              | **Description**                  | **Required** | **Default**         |
|-------------------|-----------------------|----------------------------------|--------------|--------------------|
| `height`          | `double?`             | Height of the tile               | No           | `100.0`             |
| `borderRadius`    | `BorderRadius?`       | Border radius of the tile        | No           | `8.0`               |
| `backgroundColor` | `Color?`              | Background color of the tile     | No           | `Colors.white`      |

**Note:** These properties are only a subset. More can be found inside the style class.

---

## Example Usage

```dart
final documentTile = LMChatDocumentTile(
  media: mediaData,
  title: Text('Document Title'),
  style: LMChatDocumentTileStyle(
    height: 120.0,
    borderRadius: BorderRadius.circular(8.0),
    backgroundColor: Colors.white,
  ),
);



================================================
File: chat/Flutter/Core/Widgets/Media/Document/_category_.json
================================================
{
  "label": "Media Document",
  "position": 1,
  "link": {
    "type": "generated-index",
    "description": "Documentation for Core Layer Media Document Widgets in Chat"
  }
}



================================================
File: chat/Flutter/Core/Widgets/Poll/LMChatPoll.md
================================================
---
sidebar_position: 1  
title: Poll Widget  
slug: /flutter/ui/widgets/poll-widget  
---

# LMChatPoll

**File location**  
[`poll.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/poll/poll.dart)  

`LMChatPoll` is responsible for creating interactive poll UI, which have poll question, options, submit vote button and vote count.

## Properties

1. **`pollData`** (`LMChatConversationViewData`)  
   The data associated with the poll.

2. **`isVoteEditing`** (`bool`)  
   Indicates whether the poll is in editing mode.

3. **`onOptionSelect`** (`void Function(LMChatPollOptionViewData)?`)  
   Callback triggered when an option is selected.

**Note:** These properties are only a subset. More can be found inside the widget class.

---

## Styling

### LMChatPollStyle

**File location**  
[`poll.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/poll/poll.dart)  

`LMChatPollStyle` defines the visual presentation of the poll, including option styles, buttons, and text formatting.

| **Property**       | **Type**              | **Description**                    | **Required** | **Default**        |
|--------------------|-----------------------|------------------------------------|--------------|-------------------|
| `pollOptionStyle`  | `LMChatPollOptionStyle?` | Style for individual poll options | No           | _Inherited theme_ |
| `submitButtonStyle`| `LMChatButtonStyle?`    | Style for the submit button       | No           | _None_            |
| `editButtonStyle`  | `LMChatButtonStyle?`    | Style for the edit button         | No           | _None_            |

**Note:** These properties are only a subset. More can be found inside the style class.

---

## Example Usage

```dart
final pollWidget = LMChatPoll(
  pollData: conversationData,
  isVoteEditing: false,
  onOptionSelect: (option) => print('Option selected: ${option.id}'),
  style: LMChatPollStyle(
    pollOptionStyle: LMChatPollOptionStyle(
      borderRadius: BorderRadius.circular(8.0),
    ),
    submitButtonStyle: LMChatButtonStyle(
      backgroundColor: Colors.blue,
    ),
  ),
);



================================================
File: chat/Flutter/Core/Widgets/Poll/LMChatPollOption.md
================================================
---
sidebar_position: 2  
title: Poll Option Widget  
slug: /flutter/ui/widgets/poll-option-widget  
---

# LMChatPollOption

**File location**  
[`poll_option.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/poll/poll_option.dart)  

`LMChatPollOption` renders individual options for a poll in the chat interface. It supports custom callbacks, builders, and styles for option text and icons.

## Properties

1. **`option`** (`LMChatPollOptionViewData`)  
   The poll option data to be displayed.

2. **`onOptionSelect`** (`void Function(LMChatPollOptionViewData)?`)  
   Callback triggered when an option is selected.

3. **`style`** (`LMChatPollOptionStyle?`)  
   Customizes the appearance of the poll option.

**Note:** These properties are only a subset. More can be found inside the widget class.

---

## Styling

### LMChatPollOptionStyle

**File location**  
[`poll_option.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/poll/poll_option.dart)  

`LMChatPollOptionStyle` defines the appearance of individual poll options, including borders, colors, and text styles.

| **Property**           | **Type**              | **Description**                    | **Required** | **Default**       |
|------------------------|-----------------------|------------------------------------|--------------|------------------|
| `pollOptionTextStyle`  | `LMChatTextStyle?`    | Text style for the poll option     | No           | _Default style_  |
| `pollOptionSelectedCheckColor` | `Color?`  | Color for the selected option check | No        | _Theme color_    |
| `votesCountStyles`     | `LMChatTextStyle?`    | Text style for the vote count      | No           | _Inherited_      |

**Note:** These properties are only a subset. More can be found inside the style class.

---

## Example Usage

```dart
final pollOption = LMChatPollOption(
  option: pollOptionData,
  onOptionSelect: (option) => print('Option selected: ${option.text}'),
  style: LMChatPollOptionStyle(
    pollOptionTextStyle: LMChatTextStyle(
      textStyle: TextStyle(fontSize: 16, fontWeight: FontWeight.w400),
    ),
    pollOptionSelectedCheckColor: Colors.green,
    votesCountStyles: LMChatTextStyle(
      textStyle: TextStyle(fontSize: 12, color: Colors.grey),
    ),
  ),
);



================================================
File: chat/Flutter/Core/Widgets/Poll/_category_.json
================================================
{
  "label": "Poll",
  "position": 4,
  "link": {
    "type": "generated-index",
    "description": "Documentation for Core Layer Poll Widgets in Chat"
  }
}



================================================
File: chat/Flutter/Core/Widgets/Profile/LMChatProfilePicture.md
================================================
---
sidebar_position: 1  
title: Profile Picture Widget  
slug: /flutter/ui/widgets/profile-picture  
---

# LMChatProfilePicture

**File location**  
[`profile_picture.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/profile/profile_picture.dart)  

`LMChatProfilePicture` displays a profile picture within the chat interface, supporting image URLs, local file paths, fallback text, and customizable overlays.

## Properties

1. **`imageUrl`** (`String?`)  
   The URL of the profile picture.

2. **`filePath`** (`String?`)  
   Path to the local image file.

3. **`style`** (`LMChatProfilePictureStyle?`)  
   Customizes the appearance of the profile picture.

**Note:** These properties are only a subset. More can be found inside the widget class.

---

## Styling

### LMChatProfilePictureStyle

**File location**  
[`profile_picture.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/profile/profile_picture.dart)  

`LMChatProfilePictureStyle` defines the appearance of the profile picture, including size, borders, and background color.

| **Property**      | **Type**              | **Description**                    | **Required** | **Default**        |
|-------------------|-----------------------|------------------------------------|--------------|-------------------|
| `size`            | `double?`             | Size of the profile picture       | No           | `48.0`            |
| `borderRadius`    | `double?`             | Border radius of the picture      | No           | `24.0`            |
| `backgroundColor` | `Color?`              | Background color of the picture  | No           | _Primary color_   |

**Note:** These properties are only a subset. More can be found inside the style class.

---

## Example Usage

```dart
final profilePicture = LMChatProfilePicture(
  imageUrl: 'https://example.com/image.png',
  fallbackText: 'JD',
  style: LMChatProfilePictureStyle(
    size: 50.0,
    borderRadius: 25.0,
    backgroundColor: Colors.grey[300],
  ),
  overlay: Icon(Icons.edit, color: Colors.white),
);



================================================
File: chat/Flutter/Core/Widgets/Profile/LMChatUserTile.md
================================================
---
sidebar_position: 2  
title: User Tile Widget  
slug: /flutter/ui/widgets/user-tile  
---

# LMChatUserTile

**File location**  
[`user_tile.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/profile/user_tile.dart)  

`LMChatUserTile` represents a user in the chat interface using a customizable tile. It supports profile pictures, titles, and other UI elements.

## Properties

1. **`userViewData`** (`LMChatUserViewData`)  
   The user data to be displayed in the tile.

2. **`onTap`** (`VoidCallback?`)  
   Callback function triggered on tile tap.

3. **`style`** (`LMChatTileStyle?`)  
   Customizes the appearance of the tile.

**Note:** These properties are only a subset. More can be found inside the widget class.

---

## Styling

### LMChatTileStyle

**File location**  
[`user_tile.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/profile/user_tile.dart)  

`LMChatTileStyle` defines the appearance of the user tile, including background color, margin, and spacing between elements.

| **Property**      | **Type**              | **Description**                  | **Required** | **Default**         |
|-------------------|-----------------------|----------------------------------|--------------|--------------------|
| `backgroundColor` | `Color?`              | Background color of the tile     | No           | _Theme container_  |
| `gap`             | `double?`             | Space between elements          | No           | `4.0`              |
| `margin`          | `EdgeInsets?`         | Margin around the tile           | No           | `EdgeInsets.only(bottom: 2)` |

**Note:** These properties are only a subset. More can be found inside the style class.

---

## Example Usage

```dart
final userTile = LMChatUserTile(
  userViewData: userViewData,
  onTap: () => print('User tile tapped'),
  style: LMChatTileStyle(
    backgroundColor: Colors.white,
    gap: 8.0,
    margin: EdgeInsets.all(8.0),
  ),
);



================================================
File: chat/Flutter/Core/Widgets/Profile/_category_.json
================================================
{
  "label": "Profile",
  "position": 5,
  "link": {
    "type": "generated-index",
    "description": "Documentation for Core Layer Profile Widgets in Chat"
  }
}



================================================
File: chat/Flutter/Core/Widgets/Reaction/LMChatReactionBar.md
================================================
---
sidebar_position: 1  
title: Reaction Bar Widget  
slug: /flutter/ui/widgets/reaction-bar  
---

# LMChatReactionBar

**File location**  
[`reaction_bar.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/reaction/reaction_bar.dart)  

`LMChatReactionBar` displays a bar with emojis for selecting reactions. It supports customization through styles and interaction callbacks.

## Properties

1. **`onReaction`** (`Function(String reaction)?`)  
   Callback triggered when a reaction is selected.

2. **`style`** (`LMChatReactionBarStyle?`)  
   Defines the appearance of the reaction bar.

**Note:** These properties are only a subset. More can be found inside the widget class.

---

## Styling

### LMChatReactionBarStyle

**File location**  
[`reaction_bar.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/reaction/reaction_bar.dart)  

`LMChatReactionBarStyle` defines the appearance of the reaction bar, including colors, size, and icons.

| **Property**      | **Type**              | **Description**                    | **Required** | **Default**      |
|-------------------|-----------------------|------------------------------------|--------------|-----------------|
| `background`      | `Color?`              | Background color of the bar       | No           | _Theme container_ |
| `width`           | `double?`             | Width of the reaction bar         | No           | `80.w`          |
| `borderRadius`    | `double?`             | Border radius of the bar          | No           | `6.0`            |

**Note:** These properties are only a subset. More can be found inside the style class.

---

## Example Usage

```dart
final reactionBar = LMChatReactionBar(
  onReaction: (reaction) => print('Reaction selected: $reaction'),
  style: LMChatReactionBarStyle(
    background: Colors.white,
    width: 100.0,
    borderRadius: 10.0,
  ),
);



================================================
File: chat/Flutter/Core/Widgets/Reaction/LMChatReactionBottomSheet.md
================================================
---
sidebar_position: 2  
title: Reaction Bottom Sheet Widget  
slug: /flutter/ui/widgets/reaction-bottom-sheet  
---

# LMChatReactionBottomSheet

**File location**  
[`reaction_bottom_sheet.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/reaction/reaction_bottom_sheet.dart)  

`LMChatReactionBottomSheet` displays a bottom sheet that allows users to view and manage reactions within a conversation. Users can also remove their reactions through the provided interface.

## Properties

1. **`mappedReactions`** (`Map<String, List<LMChatReactionViewData>>?`)  
   A map of reactions with their corresponding view data.

2. **`currentUser`** (`LMChatUserViewData`)  
   The user interacting with the reactions.

3. **`onRemoveReaction`** (`Function(String reaction)?`)  
   Callback triggered when a reaction is removed.

4. **`style`** (`LMChatReactionBottomSheetStyle?`)  
   Customizes the appearance of the bottom sheet.

**Note:** These properties are only a subset. More can be found inside the widget class.

---

## Styling

### LMChatReactionBottomSheetStyle

**File location**  
[`reaction_bottom_sheet.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/reaction/reaction_bottom_sheet.dart)  

`LMChatReactionBottomSheetStyle` defines the visual appearance of the reaction bottom sheet, including padding, background color, and text styles.

| **Property**           | **Type**              | **Description**                  | **Required** | **Default**       |
|------------------------|-----------------------|----------------------------------|--------------|------------------|
| `padding`              | `EdgeInsets?`         | Padding inside the bottom sheet | No           | `EdgeInsets.all(8)` |
| `backgroundColor`      | `Color?`              | Background color of the sheet   | No           | _Inherited theme_ |
| `borderRadius`         | `BorderRadius?`       | Border radius of the sheet      | No           | `8.0`              |

**Note:** These properties are only a subset. More can be found inside the style class.

---

## Example Usage

```dart
final reactionBottomSheet = LMChatReactionBottomSheet(
  mappedReactions: reactionData,
  currentUser: currentUserData,
  onRemoveReaction: (reaction) => print('Removed reaction: $reaction'),
  style: LMChatReactionBottomSheetStyle(
    padding: EdgeInsets.all(8.0),
    backgroundColor: Colors.white,
    borderRadius: BorderRadius.circular(8.0),
  ),
);



================================================
File: chat/Flutter/Core/Widgets/Reaction/LMChatReactionKeyboard.md
================================================
---
sidebar_position: 3  
title: Reaction Emoji Keyboard Widget  
slug: /flutter/ui/widgets/reaction-emoji-keyboard  
---

# LMChatReactionKeyboard

**File location**  
[`reaction_emoji_keyboard.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/reaction/reaction_emoji_keyboard.dart)  

`LMChatReactionKeyboard` provides a keyboard for selecting emojis to react to messages. It supports customization of colors, layout, and emoji selection behavior.

## Properties

1. **`textController`** (`TextEditingController?`)  
   Controller for handling text input in the emoji keyboard.

2. **`onEmojiSelected`** (`Function(String emoji)?`)  
   Callback function triggered when an emoji is selected.

3. **`style`** (`LMChatReactionKeyboardStyle?`)  
   Customizes the appearance and layout of the emoji keyboard.

**Note:** These properties are only a subset. More can be found inside the widget class.

---

## Styling

### LMChatReactionKeyboardStyle

**File location**  
[`reaction_emoji_keyboard.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/reaction/reaction_emoji_keyboard.dart)  

`LMChatReactionKeyboardStyle` defines the appearance and layout of the emoji keyboard, including button colors, grid configuration, and padding.

| **Property**           | **Type**              | **Description**                    | **Required** | **Default**       |
|------------------------|-----------------------|------------------------------------|--------------|------------------|
| `buttonIconColor`      | `Color?`              | Color of the keyboard button icons | No           | `Colors.grey`    |
| `gridPadding`          | `EdgeInsets?`         | Padding around the emoji grid     | No           | `EdgeInsets.zero` |
| `recentsLimit`         | `int?`                | Limit for recent emojis           | No           | `28`             |

**Note:** These properties are only a subset. More can be found inside the style class.

---

## Example Usage

```dart
final emojiKeyboard = LMChatReactionKeyboard(
  textController: TextEditingController(),
  onEmojiSelected: (emoji) => print('Selected emoji: $emoji'),
  style: LMChatReactionKeyboardStyle.basic(),
);



================================================
File: chat/Flutter/Core/Widgets/Reaction/_category_.json
================================================
{
  "label": "Reaction",
  "position": 6,
  "link": {
    "type": "generated-index",
    "description": "Documentation for Core Layer Reaction Widgets in Chat"
  }
}



================================================
File: chat/Flutter/Core/Widgets/Shimmer/LMChatDocumentShimmer.md
================================================
---
sidebar_position: 2  
title: Document Shimmer Widget  
slug: /flutter/ui/widgets/document-shimmer  
---

# LMChatDocumentShimmer

**File location**  
[`document_shimmer.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/shimmers/document_shimmer.dart)  

`LMChatDocumentShimmer` provides a shimmer effect as a placeholder while a document tile is loading. It mimics the layout of the document tile to enhance user experience during loading.

## Properties

1. **`style`** (`LMChatDocumentShimmerStyle?`)  
   Customizes the appearance and layout of the shimmer effect.

**Note:** These properties are only a subset. More can be found inside the widget class.

---

## Styling

### LMChatDocumentShimmerStyle

**File location**  
[`document_shimmer.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/shimmers/document_shimmer.dart)  

`LMChatDocumentShimmerStyle` defines the visual properties of the shimmer effect, including layout, colors, and sizes.

| **Property**      | **Type**               | **Description**                  | **Required** | **Default**               |
|-------------------|------------------------|----------------------------------|--------------|--------------------------|
| `height`          | `double?`              | Height of the shimmer container | No           | `80`                     |
| `width`           | `double?`              | Width of the shimmer container  | No           | `60.w`                   |
| `borderRadius`    | `BorderRadius?`        | Border radius of the shimmer    | No           | `BorderRadius.circular(8)` |
| `baseColor`       | `Color?`               | Base color of the shimmer       | No           | `Colors.black26`         |
| `highlightColor`  | `Color?`               | Highlight color of the shimmer  | No           | `Colors.black12`         |

---

## Example Usage

```dart
final documentShimmer = LMChatDocumentShimmer(
  style: LMChatDocumentShimmerStyle.basic().copyWith(
    height: 100.0,
    width: 70.0,
    borderRadius: BorderRadius.circular(12.0),
    baseColor: Colors.grey[300],
    highlightColor: Colors.grey[100],
  ),
);



================================================
File: chat/Flutter/Core/Widgets/Shimmer/LMChatMediaShimmerWidget.md
================================================
---
sidebar_position: 3  
title: Media Shimmer Widget  
slug: /flutter/ui/widgets/media-shimmer  
---

# LMChatMediaShimmerWidget

**File location**  
[`media_shimmer.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/shimmers/media_shimmer.dart)  

`LMChatMediaShimmerWidget` provides a shimmer effect to indicate loading of media elements, such as profile pictures or other containers. It can display both circular and rectangular placeholders.

## Properties

1. **`isPP`** (`bool`)  
   Determines if the shimmer should display a circular avatar placeholder.

2. **`height`** (`double?`)  
   The height of the shimmer container.

3. **`width`** (`double?`)  
   The width of the shimmer container.$$

4. **`style`** (`LMChatMediaShimmerStyle?`)  
   Customizes the appearance of the shimmer effect.

**Note:** These properties are only a subset. More can be found inside the widget class.

---

## Styling

### LMChatMediaShimmerStyle

**File location**  
[`media_shimmer.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/shimmers/media_shimmer.dart)  

`LMChatMediaShimmerStyle` defines the colors used in the shimmer effect, including the base and highlight colors.

| **Property**      | **Type**   | **Description**                   | **Required** | **Default**          |
|-------------------|------------|-----------------------------------|--------------|---------------------|
| `baseColor`       | `Color?`   | Base color of the shimmer         | No           | `Colors.grey.shade100` |
| `highlightColor`  | `Color?`   | Highlight color of the shimmer    | No           | `Colors.grey.shade200` |

**Note:** These properties are only a subset. More can be found inside the style class.

---

## Example Usage

```dart
final mediaShimmer = LMChatMediaShimmerWidget(
  isPP: true,
  height: 50.0,
  width: 50.0,
  style: LMChatMediaShimmerStyle(
    baseColor: Colors.grey.shade300,
    highlightColor: Colors.grey.shade100,
  ),
);



================================================
File: chat/Flutter/Core/Widgets/Shimmer/LMChatSkeletonChatPage.md
================================================
---
sidebar_position: 1  
title: Chatroom Skeleton Widget  
slug: /flutter/ui/widgets/chatroom-skeleton  
---

# LMChatSkeletonChatPage

**File location**  
[`chatroom_skeleton.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/shimmers/chatroom_skeleton.dart)  

`LMChatSkeletonChatPage` provides a skeleton screen for the chatroom, displaying placeholders to create a loading state effect. It includes skeletons for the app bar, chat list, and input bar.

## Properties

This widget contains the following key components:

1. **`LMChatSkeletonAppBar`**  
   A skeleton representation of the app bar.

2. **`LMChatSkeletonChatList`**  
   Placeholder for the chat list.

3. **`LMChatSkeletonChatBar`**  
   A skeleton version of the chat input bar.

**Note:** These are the core components used in the chatroom skeleton.

---

## Example Usage

```dart
final chatroomSkeleton = LMChatSkeletonChatPage();



================================================
File: chat/Flutter/Core/Widgets/Shimmer/SkeletonChatBox.md
================================================
---
sidebar_position: 4  
title: Skeleton Chat Box Widget  
slug: /flutter/ui/widgets/skeleton-chat-box  
---

# SkeletonChatBox

**File location**  
[`skeleton_chat_box.dart`](https://github.com/LikeMindsCommunity/likeminds-chat-flutter/blob/master/lib/packages/ui/lib/src/widgets/shimmers/skeleton_chat_box.dart)  

`SkeletonChatBox` provides a shimmer effect placeholder for a chat message, enhancing user experience during loading.

## Properties

This widget does not expose any configurable properties.

---

## Example Usage

```dart
final skeletonChatBox = SkeletonChatBox();



================================================
File: chat/Flutter/Core/Widgets/Shimmer/_category_.json
================================================
{
  "label": "Shimmer",
  "position": 7,
  "link": {
    "type": "generated-index",
    "description": "Documentation for Core Layer Shimmer Widgets in Chat"
  }
}



================================================
File: chat/Flutter/Data/_category_.json
================================================
{
  "label": "Data",
  "position": 5,
  "link": {
    "type": "generated-index",
    "description": "Documentation for Data Layer Widgets in Chat"
  }
}



================================================
File: chat/Flutter/Data/introduction.md
================================================
---
sidebar_position: 1
title: Getting Started
slug: /flutter/data/getting-started
---

# Getting Started

The LikeMinds Flutter Chat SDK serves as a network layer that wraps around network calls, utilizing appropriate models to facilitate a seamless integration experience with minimal configuration required.

## Add dependency

Open the terminal, and run the following command in your Flutter project's directory.

```shell
flutter pub add likeminds_chat_fl
```

## Usage

To start using the package, import it in your `main.dart` file

```dart
import 'package:likeminds_chat_fl/likeminds_chat_fl.dart';
```

After adding the import, get an instance of the `LMChatClient` class using the builder pattern provided with the client.

```dart
// Initiate the LMChatClient instance
final LMChatClient lmChatClient = (LMChatClientBuilder()
          ..sdkCallback(lmChatSDKCallback)
          ..excludedConversationStates(excludedConversationStates ?? []))
        .build();
```

:::tip
Maintain this instance of the `LMChatClient` class throughout your application. You can use it to access the different methods exposed by the package.
:::

### LMSdkCallback

The `LMSdkCallback` class is a callback class that is used to listen to analytic events from the LikeMinds Chat package. It has 3 methods that you can override to listen to events from the package.

```dart
class YourCallback extends LMSdkCallback {
  @override
  void eventFiredCallback(String eventKey, Map<String, dynamic> propertiesMap) {
    // Implement eventFiredCallback
  }

  @override
  void loginRequiredCallback() {
    // Implement loginRequiredCallback
  }

  @override
  void logoutCallback() {
    // Implement logoutCallback
  }
}
```



================================================
File: chat/Flutter/Data/Chatbot/_category_.json
================================================
{
  "label": "Chatbot",
  "position": 10,
  "link": {
    "type": "generated-index",
    "description": "Documentation for all chatbot related functions"
  }
}



================================================
File: chat/Flutter/Data/Chatbot/get_chatbots.md
================================================
---
sidebar_position: 1
title: Get Chatbots
slug: /flutter/data/get-chatbot-users
---

# Get Chatbots

Simplify your chatbot application development with LikeMinds Flutter Chat SDK. By utilizing this feature you can view all the chatbots for your community.

## Steps to fetch Chatbots

1. Create an object of the [`GetChatbotsRequest`](#getchatbotsrequest) class using the `GetChatbotsRequestBuilder` class.
2. For creating a post call `getChatbots()` present in `LMChatClient` class using your request object.
3. Process the response LMResponse&lt;[`GetChatbotsResponse`](#getchatbotsresponse)&gt; as per your requirement.

```dart
GetChatbotsRequest request = (GetChatbotsRequestBuilder()
      ..page(1)
      ..pageSize(10))
      .build();

LMResponse<GetChatbotsResponse> response = await lmChatClient.getChatbots(request);

if (response.success) {
    // your function to process the response data
   processResponse(response);
} else {
   // your function to process error message
   processError(response);
}
```

## Models

### GetChatbotsRequest

List of parameters for the `GetChatbotsRequest` class

| Variable   | Type | Description                  | Optional |
| ---------- | ---- | ---------------------------- | -------- |
| `page`     | int  | Page number for API response |          |
| `pageSize` | int  | Page size for API response   |          |

### GetChatbotsResponse

List of parameters for the `GetChatbotsResponse` class

| Variable        | Type                                  | Description                        | Optional |
| --------------- | ------------------------------------- | ---------------------------------- | -------- |
| `page`          | int                                   | Current page number                |          |
| `totalPages`    | int                                   | Total number of pages              |          |
| `totalChatbots` | int                                   | Total number of chatbots available |          |
| `users`         | List&lt;[User](../Models/user.md)&gt; | List of chatbot users              |          |



================================================
File: chat/Flutter/Data/Chatroom/_category_.json
================================================
{
  "label": "Chatroom",
  "position": 4,
  "link": {
    "type": "generated-index",
    "description": "Documentation for Chatroom features"
  }
}



================================================
File: chat/Flutter/Data/Chatroom/get_chatroom.md
================================================
---
sidebar_position: 1
title: Get Chatroom
slug: /flutter/data/get-chatroom
---

# Get Chatroom

A chatroom is a place where users can interact with each other.The LikeMinds Flutter Chat SDK supports different types of chatrooms, including:

- Open chatrooms: Open to all users within the community, allowing for broad participation and discussions.
- Secret chatrooms: Highly secure and hidden, accessible only to invited members, ensuring utmost privacy and confidentiality.

These diverse chatroom types cater to various communication needs, providing flexibility and control over the conversations within your Flutter chat application. A chatroom can be created by a user or by the community manager.

## Steps to fetch Chatrooms

1. Create an object of the [`GetChatroomRequest`](#getchatroomrequest) class.
2. Call the `getChatroom()` function using the instance of the `LMChatClient` class.
3. Process the response LMResponse&lt;[`GetChatroomResponse`](#getchatroomresponse)&gt; as per your requirement.

```dart
GetChatroomRequest request = (GetChatroomRequestBuilder()
                    ..chatroomId("ENTER_CHATROOM_ID")
                    ..page(1)
                    ..pageSize(10))
                    .build();

LMResponse<GetChatroomResponse> response = await lmChatClient.getChatroom(request);

if (response.success) {
  // your function to process the response data
  processResponse(response);
} else {
  // your function to process error message
  processError(response.errorMessage);
}
```

## Models

### GetChatroomRequest

List of parameters for the `GetChatroomRequest` class

| Variable     | Type | Description                        | Optional           |
| ------------ | ---- | ---------------------------------- | ------------------ |
| `chatroomId` | int  | Unique ID of the chatroom          |                    |
| `page`       | int? | Page number for paginated response | :heavy_check_mark: |
| `pageSize`   | int? | Page size for paginated response   | :heavy_check_mark: |

### GetChatroomResponse

List of parameters for the `GetChatroomResponse` class

| Variable                  | Type                                                               | Description                                        | Optional           |
| ------------------------- | ------------------------------------------------------------------ | -------------------------------------------------- | ------------------ |
| `canAccessSecretChatroom` | bool?                                                              | Indicates if the user can access a secret chatroom | :heavy_check_mark: |
| `chatroom`                | [ChatRoom](../Models/chatroom.md)?                                 | The chatroom object containing chatroom details    | :heavy_check_mark: |
| `chatroomActions`         | List&lt;[ChatroomAction](../Models/chatroom.md#chatoomaction)&gt;? | List of actions available in the chatroom          | :heavy_check_mark: |
| `community`               | [Community](../Models/community.md)?                               | The community object associated with the chatroom  | :heavy_check_mark: |
| `conversationUsers`       | List&lt;[User](../Models/user.md)&gt;?                             | List of users participating in the chatroom        | :heavy_check_mark: |
| `lastConversationId`      | int?                                                               | ID of the last conversation in the chatroom        | :heavy_check_mark: |
| `participantCount`        | int?                                                               | Total number of participants in the chatroom       | :heavy_check_mark: |
| `unreadMessages`          | int?                                                               | Total number of unread messages in the chatroom    | :heavy_check_mark: |



================================================
File: chat/Flutter/Data/Chatroom/mark_read_chatroom.md
================================================
---
sidebar_position: 2
title: Mark Read Chatroom
slug: /flutter/data/mark-read-chatroom
---

# Mark Read Chatroom

Marking a chatroom as read with LikeMinds Flutter Chat SDK allows you to control your notification preferences for that specific chatroom.

## Steps to Mark a Chatroom as Read

1. Create an object of the [`MarkReadChatroomRequest`](#markreadchatroomrequest) class.
2. Call the `markReadChatroom()` function using the instance of the `LMChatClient` class.
3. Process the response LMResponse&lt;void&gt; as per your requirement.

```dart
MarkReadChatroomRequest request = (MarkReadChatroomRequestBuilder()
                        ..chatroomId("ENTER_CHATROOM_ID"))
                        .build();

LMResponse<void> response =
    await lmChatClient.markReadChatroom(request);

if (response.success) {
     // your function to process the response data
   processResponse(response);
} else {
    // your function to process error message
   processError(response);
}
```

## Models

### MarkReadChatroomRequest

List of parameters for the `MarkReadChatroomRequest` class

| Variable     | Type | Description | Optional |
| ------------ | ---- | ----------- | -------- |
| `chatroomId` | int  | Chatroom Id |          |



================================================
File: chat/Flutter/Data/Chatroom/mute_chatroom.md
================================================
---
sidebar_position: 3
title: Mute Chatroom
slug: /flutter/data/mute-chatroom
---

# Mute Chatroom

Muting a chatroom in LikeMinds Flutter Chat SDK ensures that you won't receive any notifications for new posts within that chatroom. This feature allows you to customize your notification preferences and avoid interruptions when you don't wish to be notified of new messages.

## Steps to Mute a Chatroom

1. Create an object of the [`MuteChatroomRequest`](#mutechatroomrequest) class.
2. Call the `muteChatroom()` function using the instance of the `LMChatClient` class.
3. Process the response LMResponse&lt;void&gt; as per your requirement.

### Example Usage

```dart
MuteChatroomRequest request = (MuteChatroomRequestBuilder()
                    ..chatroomId("ENTER_CHATROOM_ID")
                    ..value(true)) // Set to false for unmute the chatroom
                    .build();

LMResponse<void> response = await lmChatClient.muteChatroom(request);

if (response.success) {
  // your function to handle successful muting
  handleMuteSuccess();
} else {
  // your function to handle mute error
  handleMuteError(response.errorMessage);
}
```

## Models

### MuteChatroomRequest

List of parameters for the `MuteChatroomRequest` class

| Variable     | Type | Description                              | Optional |
| ------------ | ---- | ---------------------------------------- | -------- |
| `chatroomId` | int  | Unique ID of the chatroom                |          |
| `value`      | bool | Set to `true` to mute, `false` to unmute |          |



================================================
File: chat/Flutter/Data/Chatroom/Direct Messages/_category_.json
================================================
{
  "label": "Direct Messages",
  "position": 5,
  "link": {
    "type": "generated-index",
    "description": "Documentation for all direct messages chatroom related functions"
  }
}



================================================
File: chat/Flutter/Data/Chatroom/Direct Messages/block-unblock-member.md
================================================
---
sidebar_position: 3
title: Block/Unblock Member
slug: /flutter/data/block-unblock-member
---

# Block Member

The `blockMember()` method is used to block a member from a specific chatroom. You can pass the required parameters such as the `chatroomId` and the `status` (which represents the block status).

## Steps to Block a Member

1. Create a [`BlockMemberRequest`](#blockmemberrequest) object with the required parameters such as `chatroomId` and `status`.
2. Call the `blockMember()` function using the instance of the `LMChatClient` class.
3. Use the response LMResponse&lt;[`BlockMemberResponse`](#blockmemberresponse)&gt; to fetch details about the conversation after blocking the member.

```dart
BlockMemberRequest request = (BlockMemberRequestBuilder()
                    ..chatroomId("ENTER_CHATROOM_ID") // Provide the chatroom ID
                    ..status(1)) // Provide the status to block (1 or another value for unblocking)
                    .build();

final LMResponse<BlockMemberResponse> response = await lmChatClient.blockMember(request);

if (response.success) {
  // Use the returned conversation details
  handleConversation(response.data.conversation);
} else {
  // Handle error
  handleError(response);
}
```

## Models

### BlockMemberRequest

List of parameters for the `BlockMemberRequest` class:

| Variable     | Type | Description                                                                | Optional |
| ------------ | ---- | -------------------------------------------------------------------------- | -------- |
| `chatroomId` | int  | The ID of the chatroom where the member will be blocked or unblocked       |          |
| `status`     | int  | The block status <br/> - `0` to Block Member <br/> - `1` to Unblock Member |          |

### BlockMemberResponse

List of parameters for the `BlockMemberResponse` class:

| Variable       | Type                                         | Description                                        | Optional           |
| -------------- | -------------------------------------------- | -------------------------------------------------- | ------------------ |
| `conversation` | [Conversation](../../Models/conversation.md) | The updated conversation after blocking the member | :heavy_check_mark: |



================================================
File: chat/Flutter/Data/Chatroom/Direct Messages/send-direct-message-request.md
================================================
---
sidebar_position: 2
title: Send Direct Message Request
slug: /flutter/data/send-direct-message-request
---

# Send DM Request

The `sendDMRequest()` method is used to send a direct message (DM) request. You can pass parameters such as `chatroomId`, `chatRequestState`, and `text`.

## Steps to Send a DM Request

1. Create a [`SendDMRequest`](#senddmrequest) object with the required parameters: `chatroomId`, `chatRequestState`, and `text`.
2. Call the `sendDMRequest()` function using the instance of the `LMChatClient` class.
3. Use the response LMResponse&lt;[`SendDMResponse`](#senddmresponse)&gt; to fetch details about the conversation after sending the DM request.

```dart
SendDMRequest request = (SendDMRequestBuilder()
                    ..chatroomId("ENTER_CHATROOM_ID") // Provide the chatroom ID
                    ..chatRequestState(1) // Provide the request state (e.g., 1 for sending)
                    ..text("ENTER_TEXT")) // Provide the message text
                    .build();

final LMResponse<SendDMResponse> response = await lmChatClient.sendDMRequest(request);

if (response.success) {
  // Use the returned conversation details
  handleConversation(response.data.conversation);
} else {
  // Handle error
  handleError(response);
}
```

## Models

### SendDMRequest

List of parameters for the `SendDMRequest` class:

| Variable           | Type   | Description                                                                                           | Optional |
| ------------------ | ------ | ----------------------------------------------------------------------------------------------------- | -------- |
| `chatroomId`       | int    | The ID of the chatroom where the DM request will be sent                                              |          |
| `chatRequestState` | int    | The state of the DM request <br/> - 0 is for initiating <br/> - 1 for accepting<br/>- 2 for rejecting |          |
| `text`             | String | The message text to be sent in the DM request                                                         |          |

### SendDMResponse

List of parameters for the `SendDMResponse` class:

| Variable       | Type                                         | Description                                           | Optional           |
| -------------- | -------------------------------------------- | ----------------------------------------------------- | ------------------ |
| `conversation` | [Conversation](../../Models/conversation.md) | The updated conversation after sending the DM request | :heavy_check_mark: |



================================================
File: chat/Flutter/Data/Chatroom/Group Chat/_category_.json
================================================
{
  "label": "Group Chat",
  "position": 4,
  "link": {
    "type": "generated-index",
    "description": "Documentation for Group Chatroom functions"
  }
}



================================================
File: chat/Flutter/Data/Chatroom/Group Chat/get_participants.md
================================================
---
sidebar_position: 4
title: View Participants
slug: /flutter/data/view-participants
---

# View Participants

To retrieve the list of participants in a chatroom, LikeMinds Flutter Chat SDK provides this feature. It enables you to retrieve user details, such as usernames or profile information, for better engagement and interaction within the chatroom.

## Steps to Get the List of Participants in a Chatroom

1. Create an object of the [`GetParticipantsRequest`](#getparticipantsrequest) class.
2. Call the `getParticipants()` function using the instance of the `LMChatClient` class.
3. Process the response LMResponse&lt;[`GetParticipantsResponse`](#getparticipantsresponse)&gt; as per your requirement.

```dart
GetParticipantsRequest request = (GetParticipantsRequestBuilder()
                    ..chatroomId("ENTER_CHATROOM_ID")
                    ..page(1)
                    ..pageSize(10)
                    ..isSecret(false) //set to true for secret chatroom
                    ..search('ENTER_PARTICIPANT_NAME_TO_SEARCH'))
                    .build();

LMResponse<GetParticipantsResponse> response = await lmChatClient.getParticipants(request);

if (response.success) {
  // your function to process the response data
  processResponse(response);
} else {
  // your function to process error message
  processError(response.errorMessage);
}
```

## Models

### GetParticipantsRequest

List of parameters for the `GetParticipantsRequest` class

| Variable     | Type    | Description                              | Optional           |
| ------------ | ------- | ---------------------------------------- | ------------------ |
| `chatroomId` | int     | Unique ID of the chatroom                |                    |
| `page`       | int     | Page number for paginated response       |                    |
| `pageSize`   | int     | Page size for paginated response         |                    |
| `isSecret`   | bool    | Indicates if the chatroom is secret      |                    |
| `search`     | String? | Search string for filtering participants | :heavy_check_mark: |

### GetParticipantsResponse

List of parameters for the `GetParticipantsResponse` class

| Variable             | Type                                       | Description                                        | Optional           |
| -------------------- | ------------------------------------------ | -------------------------------------------------- | ------------------ |
| `canEditParticipant` | bool?                                      | Indicates if the user can edit participant details | :heavy_check_mark: |
| `participants`       | List&lt;[User](../../Models/user.md)&gt;? | List of participants in the chatroom               | :heavy_check_mark: |



================================================
File: chat/Flutter/Data/Chatroom/Group Chat/join_chatroom.md
================================================
---
sidebar_position: 1
title: Join Chatroom
slug: /flutter/data/join-chatroom
---

# Join Chatroom

Joining a chatroom with LikeMinds Flutter Chat SDK allows you to receive timely notifications for all conversations happening within that chatroom.Experience real-time engagement and never miss out on any important conversations by joining the chatroom using LikeMinds Flutter Chat SDK.

## Steps to Join an Open Chatroom

1. Create an object of the [`FollowChatroomRequest`](#followchatroomrequest) class.
2. Call the `followChatroom()` function using the instance of the `LMChatClient` class.
3. Process the response LMResponse&lt;void&gt; as per your requirement.

```dart
// To leave a chatroom, set the value to false
FollowChatroomRequest request = (FollowChatroomRequestBuilder()
                      ..chatroomId("ENTER_CHATROOM_ID")
                      ..memberId("ENTER_MEMBER_ID")
                      ..value(true)) //Set to false in case of leave
                      .build();

LMResponse<void> response = await lmChatClient.followChatroom(request);

if (response.success) {
  // your function to handle successful follow action
  handleFollowSuccess();
} else {
  // your function to handle follow error
  handleFollowError(response.errorMessage);
}
```

## Models

### FollowChatroomRequest

List of parameters for the `FollowChatroomRequest` class

| Variable     | Type | Description                                  | Optional           |
| ------------ | ---- | -------------------------------------------- | ------------------ |
| `chatroomId` | int  | Unique ID of the chatroom                    |                    |
| `memberId`   | int? | Unique ID of the member                      | :heavy_check_mark: |
| `value`      | bool | Set to `true` to follow, `false` to unfollow |                    |


================================================
File: chat/Flutter/Data/Chatroom/Group Chat/leave_chatroom.md
================================================
---
sidebar_position: 2
title: Leave Chatroom
slug: /flutter/data/leave-chatroom
---

# Leave Chatroom

Leaving a chatroom with LikeMinds Flutter Chat SDK allows you to exit a chatroom that you no longer want to be a part of.

## Steps to Leave an Open Chatroom

1. Create an object of the [`FollowChatroomRequest`](#followchatroomrequest) class.
2. Call the `followChatroom()` function using the instance of the `LMChatClient` class.
3. Process the response LMResponse&lt;void&gt; as per your requirement.

```dart
// To leave a chatroom, set the value to false
FollowChatroomRequest request = (FollowChatroomRequestBuilder()
                      ..chatroomId("ENTER_CHATROOM_ID")
                      ..memberId("ENTER_MEMBER_ID")
                      ..value(true)) //Set to false to leave a chatroom
                      .build();

LMResponse<void> response = await lmChatClient.followChatroom(request);

if (response.success) {
  // your function to handle successful follow action
  handleFollowSuccess();
} else {
  // your function to handle follow error
  handleFollowError(response.errorMessage);
}
```

## Models

### FollowChatroomRequest

List of parameters for the `FollowChatroomRequest` class

| Variable     | Type | Description                                  | Optional           |
| ------------ | ---- | -------------------------------------------- | ------------------ |
| `chatroomId` | int  | Unique ID of the chatroom                    |                    |
| `memberId`   | int? | Unique ID of the member                      | :heavy_check_mark: |
| `value`      | bool | Set to `true` to follow, `false` to unfollow |                    |

## Steps to Leave a Secret Chatroom

1. Create an object of the [`DeleteParticipantRequest`](#deleteparticipantrequest) class.
2. Call the `deleteParticipant()` function using the instance of the `LMChatClient` class.
3. Process the response LMResponse&lt;void&gt; as per your requirement.

When deleting a participant from a secret chatroom, ensure that the `isSecret` parameter is set to `true`.

```dart
DeleteParticipantRequest request = (DeleteParticipantRequestBuilder()
                    ..chatroomId("ENTER_CHATROOM_ID")
                    ..isSecret(true)
                    ..memberId("ENTER_MEMBER_ID"))
                    .build();

LMResponse<void> response = await lmChatClient.deleteParticipant(request);

if (response.success) {
  // your function to handle successful deletion
  handleDeleteSuccess();
} else {
  // your function to handle deletion error
  handleDeleteError(response.errorMessage);
}
```

## Models

### DeleteParticipantRequest

List of parameters for the `DeleteParticipantRequest` class

| Variable     | Type    | Description                           | Optional           |
| ------------ | ------- | ------------------------------------- | ------------------ |
| `chatroomId` | int     | Unique ID of the chatroom             |                    |
| `isSecret`   | bool?   | Indicates if the chatroom is secret   | :heavy_check_mark: |
| `memberId`   | String? | Unique ID of the member to be deleted |                    |



================================================
File: chat/Flutter/Data/Chatroom/Group Chat/set_topic_chatroom.md
================================================
---
sidebar_position: 3
title: Set Topic Chatroom
slug: /flutter/data/set-chatroom-topic
---

# Set Topic Chatroom

With LikeMinds Flutter Chat SDK, you have the ability to set a topic for a chatroom. This feature allows you to categorize and organize discussions, making it easier for participants to understand the purpose or theme of the chatroom.

## Steps to Set a Chatroom Topic

1. Create an object of the [`SetChatroomTopicRequest`](#set-topic-chatroom) class.
2. Call the `setChatroomTopic()` function using the instance of the `LMChatClient` class.
3. Process the response LMResponse&lt;void&gt; as per your requirement.

```dart
SetChatroomTopicRequest request = (SetChatroomTopicRequestBuilder()
                    ..chatroomId(ENTER_CHATROOM_ID)
                    ..conversationId(ENTER_CONVERSATION_ID))
                    .build();

LMResponse<void> response = await lmChatClient.setChatroomTopic(request);

if (response.success) {
  // your function to handle successful topic setting
  handleSetTopicSuccess();
} else {
  // your function to handle error in setting topic
  handleSetTopicError(response.errorMessage);
}
```

## Models

### SetChatroomTopicRequest

List of parameters for the `SetChatroomTopicRequest` class

| Variable         | Type | Description                   | Optional |
| ---------------- | ---- | ----------------------------- | -------- |
| `chatroomId`     | int  | Unique ID of the chatroom     |          |
| `conversationId` | int  | Unique ID of the conversation |          |



================================================
File: chat/Flutter/Data/Community/_category_.json
================================================
{
  "label": "Community",
  "position": 6,
  "link": {
    "type": "generated-index",
    "description": "Documentation for Community functions in Chat"
  }
}


================================================
File: chat/Flutter/Data/Community/community_configurations.md
================================================
---
sidebar_position: 1
title: Get Community Configurations
slug: /flutter/data/get-community-configurations
---
# Get Community Configurations

The `getCommunityConfigurations` function retrieves configuration details for the communities. It provides a list of configurations that include a description, type, and associated values.

## Usage

1. Call the `getCommunityConfigurations()` method to fetch the configurations.
2. The response will include a list of community configurations if successful.

### Example

```dart
final LMResponse<GetCommunityConfigurationsResponse> response =
    await lmChatClient.getCommunityConfigurations();

if (response.success) {
  final configurations = response.data?.communityConfigurations ?? [];
  for (final config in configurations) {
    print('Description: ${config.description}');
    print('Type: ${config.type}');
    print('Value: ${config.value}');
  }
} else {
  print('Failed to fetch configurations: ${response.errorMessage}');
}
```

---

## Models

### GetCommunityConfigurationsResponse

| Parameter                 | Type                          | Description                         | Optional |
| ------------------------- | ----------------------------- | ----------------------------------- | -------- |
| `communityConfigurations` | List<[CommunityConfigurations](#communityconfigurations)\> | A list of community configurations |       |

### CommunityConfigurations

| Parameter      | Type                     | Description                               | Optional        |
| -------------- | ------------------------ | ----------------------------------------- | --------------- |
| `description`  | String?                  | A description of the configuration        | :heavy_check_mark: |
| `type`         | String?                  | The type of configuration                 | :heavy_check_mark: |
| `value`        | Map<String, dynamic>?    | The value associated with the configuration | :heavy_check_mark: |



================================================
File: chat/Flutter/Data/Conversation/_category_.json
================================================
{
    "label": "Conversation",
    "position": 5,
    "link": {
      "type": "generated-index",
      "description": "Documentation for Conversation features"
    }
  }
  


================================================
File: chat/Flutter/Data/Conversation/delete_conversation.md
================================================
---
sidebar_position: 4
title: Delete Conversation
slug: /flutter/data/delete-conversations
---

# Delete Conversations

Deleting a conversation means that you can delete the text content of specified conversations corresponding to unique conversation IDs.

## Steps to Delete Conversations

1. Create an object of the [`DeleteConversationRequest`](#deleteconversationrequest) class using the `DeleteConversationRequestBuilder` class and specify the conversation IDs.
2. Call `deleteConversation()` present in the `LMChatClient` class using your request object.
3. Process the response LMResponse&lt;[`DeleteConversationResponse`](#deleteconversationresponse)&gt; as per your requirement.

```dart
DeleteConversationRequest request = (DeleteConversationRequestBuilder()
          ..conversationIds("ENTER_CONVERSATION_IDS")
          ..reason("ENTER_REASON"))
          .build();

LMResponse<DeleteConversationResponse> response =
    await lmClient.deleteConversation(request);

if (response.success) {
    // your function to process the response data
    processResponse(response);
} else {
    // your function to process error message
    processError(response.errorMessage);
}
```

## Models

### DeleteConversationRequest

List of parameters for the `DeleteConversationRequest` class

| Variable          | Type       | Description                      | Optional |
| ----------------- | ---------- | -------------------------------- | -------- |
| `conversationIds` | List<int\> | List of conversation IDs         |          |
| `reason`          | String     | Reason for conversation deletion |          |

### DeleteConversationResponse

List of parameters for the `DeleteConversationResponse` class

| Variable        | Type                                                   | Description                  | Optional           |
| --------------- | ------------------------------------------------------ | ---------------------------- | ------------------ |
| `conversations` | List&lt;[Conversation](../Models/conversation.md)&gt;? | List of conversation objects | :heavy_check_mark: |



================================================
File: chat/Flutter/Data/Conversation/edit_conversation.md
================================================
---
sidebar_position: 3
title: Edit Conversation
slug: /flutter/data/edit-conversation
---

# Edit Conversation

Editing a conversation means that you can change the text content of a specified conversation corresponding to a unique conversation ID.

## Steps to Edit a Conversation

1. Create an object of the [`EditConversationRequest`](#editconversationrequest) class using the `EditConversationRequestBuilder` class.
2. For editing a conversation, call `editConversation()` present in the `LMChatClient` class using your request object.
3. Process the response LMResponse&lt;[`EditConversationResponse`](#editconversationresponse)&gt; as per your requirement.

```dart
EditConversationRequest request = (EditConversationRequestBuilder()
    ..conversationId("ENTER_CONVERSATION_ID")
    ..text("ENTER_UPDATED_TEXT"))
    .build();

LMResponse<EditConversationResponse> response = await lmChatClient.editConversation(request);

if (response.success) {
    // your function to process the response data
    processResponse(response);
} else {
    // your function to process error message
    processError(response.errorMessage);
}
```

## Models

### EditConversationRequest

List of parameters for the `EditConversationRequest` class

| Variable         | Type   | Description     | Optional |
| ---------------- | ------ | --------------- | -------- |
| `conversationId` | int    | Conversation ID |          |
| `text`           | String | Text content    |          |

### EditConversationResponse

List of parameters for the `EditConversationResponse` class

| Variable       | Type                                       | Description         | Optional           |
| -------------- | ------------------------------------------ | ------------------- | ------------------ |
| `conversation` | [Conversation](../Models/conversation.md)? | Edited conversation | :heavy_check_mark: |



================================================
File: chat/Flutter/Data/Conversation/get-conversations.md
================================================
---
sidebar_position: 1
title: Get Conversations
slug: /flutter/data/get-conversations
---

# Get Conversations

Simplify your chat application development with LikeMinds Flutter Chat SDK. Enhance user conversations, enable real-time messaging, and provide seamless communication experiences with minimal coding effort. By utilizing this feature you can view all the conversations in the chatroom.

## Steps to Fetch Conversations Inside a Chatroom

1. Create an object of the [`GetConversationRequest`](#getconversationrequest) class using the `GetConversationRequestBuilder` class.
2. Call `getConversation()` present in the `LMChatClient` class using your request object.
3. Process the response LMResponse&lt;[`GetConversationResponse`](#getconversationresponse)&gt; as per your requirement.

```dart
GetConversationRequest request = (GetConversationRequestBuilder()
      ..chatroomId("ENTER_CHATROOM_ID")
      ..page(1)
      ..pageSize(100)
      ..maxTimestamp(DateTime.now().millisecondsSinceEpoch)
      ..minTimestamp(0))
      .build();

LMResponse<GetConversationResponse> response = await lmChatClient.getConversation(request);

if (response.success) {
    // your function to process the response data
    processResponse(response);
} else {
    // your function to process error message
    processError(response.errorMessage);
}
```

## Models

### GetConversationRequest

List of parameters for the `GetConversationRequest` class

| Variable       | Type | Description                           | Optional |
| -------------- | ---- | ------------------------------------- | -------- |
| `chatroomId`   | int  | Chatroom ID                           |          |
| `page`         | int  | Page number for API response          |          |
| `pageSize`     | int  | Page size for API response            |          |
| `maxTimestamp` | int  | Maximum timestamp for API response    |          |
| `minTimestamp` | int  | Minimum timestamp for API response    |          |
| `isLocalDB`    | bool | Whether to fetch from local DB or not |          |

### GetConversationResponse

List of parameters for the `GetConversationResponse` class

| Variable                      | Type                                                                   | Description                               | Optional           |
| ----------------------------- | ---------------------------------------------------------------------- | ----------------------------------------- | ------------------ |
| `conversationData`            | List&lt;[Conversation](../Models/conversation.md)&gt;?                 | List of conversations                     | :heavy_check_mark: |
| `chatroomMeta`                | Map&lt;int, [ChatRoom](../Models/chatroom.md)&gt;?                     | Map of chatroom meta data                 | :heavy_check_mark: |
| `communityMeta`               | Map&lt;int, [Community](../Models/community.md)&gt;?                   | Map of community meta data                | :heavy_check_mark: |
| `userMeta`                    | Map&lt;int, [User](../Models/user.md)&gt;?                             | Map of user meta data                     | :heavy_check_mark: |
| `conversationMeta`            | Map&lt;String, [Conversation](../Models/conversation.md)&gt;?          | Map of conversation meta data             | :heavy_check_mark: |
| `conversationAttachmentsMeta` | Map&lt;String, [Attachment](../Models/conversation.md#attachment)&gt;? | Map of conversation attachments meta data | :heavy_check_mark: |
| `widgets`                     | Map&lt;String, [Widget](../Models/conversation.md#lmwidgetdata)&gt;?   | Map of conversation widget                | :heavy_check_mark: |



================================================
File: chat/Flutter/Data/Conversation/post_conversation.md
================================================
---
sidebar_position: 2
title: Post Conversation
slug: /flutter/data/post-conversation
---

# Post Conversation

LikeMinds Flutter Chat SDK allows you to conveniently post a conversation in an existing chatroom by specifying the chatroom ID. This powerful feature enables you to contribute to ongoing discussions, share important information, or engage with other participants in real-time.

## Steps to Post a Conversation

1. Create an object of the [`PostConversationRequest`](#postconversationrequest) class using the `PostConversationRequestBuilder` class and specify the chatroom ID and text.
2. Call `postConversation()` present in the `LMChatClient` class using your request object.
3. Process the response LMResponse&lt;[`PostConversationResponse`](#postconversationresponse)&gt; as per your requirement.

```dart
PostConversationRequest request = (PostConversationRequestBuilder()
          ..chatroomId("ENTER_CHATROOM_ID")
          ..text("ENTER_TEXT")
          ..expiryTime(0))
          .build();

LMResponse<PostConversationResponse> response = await lmChatClient.postConversation(request);

if (response.success) {
     // your function to process the response data
   processResponse(response);
} else {
   // your function to process error message
   processError(response);
}
```

## Models

### PostConversationRequest

List of parameters for the `PostConversationRequest` class

| Variable      | Type                                                       | Description                                               | Optional           |
| ------------- | ---------------------------------------------------------- | --------------------------------------------------------- | ------------------ |
| `chatroomId`  | int                                                        | Chatroom Id                                               |                    |
| `text`        | String                                                     | Text to be posted                                         |                    |
| `replyId`     | int?                                                       | ID of the conversation to which the reply is being posted | :heavy_check_mark: |
| `temporaryId` | String                                                     | Temporary ID of the conversation                          |                    |
| `hasFiles`    | bool                                                       | Whether the conversation has files                        |                    |
| `attachments` | List<[Attachment](../Models/conversation.md#attachment)\>? | List of attachments in the conversation                   | :heavy_check_mark: |
| `ogTags`      | [OgTags](../Models/conversation.md#ogtags)?                | Open Graph tags for the conversation                      | :heavy_check_mark: |
| `shareLink`   | String?                                                    | A link to be shared with the conversation                 | :heavy_check_mark: |
| `triggerBot`  | bool?                                                      | Whether to trigger a bot after posting the conversation   | :heavy_check_mark: |
| `metadata`    | Map&lt;String, dynamic&gt;?                                | Custom metadata associated with the conversation          | :heavy_check_mark: |

### PostConversationResponse

List of parameters for the `PostConversationResponse` class

| Variable       | Type                                                                 | Description                       | Optional           |
| -------------- | -------------------------------------------------------------------- | --------------------------------- | ------------------ |
| `conversation` | [Conversation](../Models/conversation.md)?                           | Conversation object               | :heavy_check_mark: |
| `id`           | int?                                                                 | The ID of the posted conversation | :heavy_check_mark: |
| `widgets`      | Map&lt;String, [Widget](../Models/conversation.md#lmwidgetdata)&gt;? | Map of conversation widget        | :heavy_check_mark: |



================================================
File: chat/Flutter/Data/Conversation/Poll/_category_.json
================================================
{
  "label": "Poll",
  "position": 5,
  "link": {
    "type": "generated-index",
    "description": "Documentation for all poll related functions"
  }
}



================================================
File: chat/Flutter/Data/Conversation/Poll/add-poll-option.md
================================================
---
sidebar_position: 4
title: Add Poll Option
slug: /flutter/data/add-poll-option
---

# Add Poll Option

The `addPollOption()` method allows you to add an option to a poll in a specific conversation. The request requires the `poll` text and the `conversationId`. The response provides the added poll option.

## Steps to Add a Poll Option

1. Create an [`AddPollOptionRequest`](#addpolloptionrequest) object with the required parameters: `poll` (poll option text) and `conversationId`.
2. Call the `addPollOption()` function using the instance of the `LMChatClient` class.
3. Use the response LMResponse&lt;[`AddPollOptionResponse`](#addpolloptionresponse)&gt; to retrieve the newly added poll option.

```dart
AddPollOptionRequest request = (AddPollOptionRequestBuilder()
                    ..poll('ENTER_POLL_TEXT') // Provide the poll option text
                    ..conversationId("ENTER_CONVERSATION_ID")) // Provide the conversation ID
                    .build();

final LMResponse<AddPollOptionResponse> response =
    await lmChatClient.addPollOption(request);

if (response.success) {
  // Handle the added poll option
  PollOption addedPollOption = response.data?.poll ?? PollOption();
  handleAddedPollOption(addedPollOption);
} else {
  // Handle error
  handleError(response);
}
```

:::tip
Ensure that both `poll` (poll option text) and `conversationId` are provided to add a new option to the poll.
:::

## Models

### AddPollOptionRequest

List of parameters for the `AddPollOptionRequest` class:

| Variable         | Type   | Description                 | Optional |
| ---------------- | ------ | --------------------------- | -------- |
| `poll`           | String | The text of the poll option |          |
| `conversationId` | int    | The ID of the conversation  |          |

### AddPollOptionResponse

List of parameters for the `AddPollOptionResponse` class:

| Variable | Type                                                  | Description           | Optional           |
| -------- | ----------------------------------------------------- | --------------------- | ------------------ |
| `poll`   | [PollOption](../../Models/conversation.md#polloption) | The added poll option | :heavy_check_mark: |



================================================
File: chat/Flutter/Data/Conversation/Poll/get-poll-users.md
================================================
---
sidebar_position: 3
title: Get Poll Users
slug: /flutter/data/get-poll-users
---

# Get Poll Users

The `getPollUsers()` method is used to fetch users who participated in a poll within a specific conversation. The request requires `pollId` and `conversationId` to retrieve the poll users. The response returns a list of `User` entities.

## Steps to Get Poll Users

1. Create a [`GetPollUsersRequest`](#getpollusersrequest) object with the required parameters: `pollId` and `conversationId`.
2. Call the `getPollUsers()` function using the instance of the `LMChatClient` class.
3. Use the response LMResponse&lt;[`GetPollUsersResponse`](#getpollusersresponse)&gt; to get the list of users who participated in the poll.

```dart
GetPollUsersRequest request = (GetPollUsersRequestBuilder()
                    ..pollId("ENTER_POLL_ID") // Provide the poll ID
                    ..conversationId("ENTER_CONVERSATION_ID")) // Provide the conversation ID
                    .build();

final LMResponse<GetPollUsersResponse> response =
    await lmChatClient.getPollUsers(request);

if (response.success) {
  // Handle the list of users
  List<User> pollUsers = response.data?.data ?? [];
  handlePollUsers(pollUsers);
} else {
  // Handle error
  handleError(response);
}
```

:::tip
Ensure that both `pollId` and `conversationId` are provided to fetch the correct list of poll users.
:::

## Models

### GetPollUsersRequest

List of parameters for the `GetPollUsersRequest` class:

| Variable         | Type | Description                | Optional |
| ---------------- | ---- | -------------------------- | -------- |
| `pollId`         | int  | The ID of the poll         |          |
| `conversationId` | int  | The ID of the conversation |          |

### GetPollUsersResponse

List of parameters for the `GetPollUsersResponse` class:

| Variable | Type                                     | Description                                  | Optional           |
| -------- | ---------------------------------------- | -------------------------------------------- | ------------------ |
| `data`   | List&lt;[User](../../Models/user.md)&gt; | A list of users who participated in the poll | :heavy_check_mark: |



================================================
File: chat/Flutter/Data/Conversation/Poll/post-poll-conversation.md
================================================
---
sidebar_position: 1
title: Post Poll Conversation
slug: /flutter/data/post-poll-conversation
---

# Post Poll Conversation

The `postPollConversation()` method allows you to post a poll in a chatroom, either as a new conversation or as a reply. It requires a variety of parameters, including the chatroom ID, poll options, and additional configuration like anonymity and the expiry time.

## Steps to Post a Poll Conversation

1. Create a [`PostPollConversationRequest`](#postpollconversationrequest) object using the builder pattern, providing the necessary parameters such as the `chatroomId`, `text` (poll text), `polls` (list of poll options), and other optional parameters like `repliedConversationId`, `multipleSelectState`, etc.
2. Call the `postPollConversation()` function using the `LMChatClient` instance.
3. Use the LMResponse&lt;[`PostConversationResponse`](#postconversationresponse)&gt; to retrieve the conversation details, including the poll that was posted.

```dart
PostPollConversationRequest request = (PostPollConversationRequestBuilder()
                    ..chatroomId("ENTER_CHATROOM_ID") // Provide the chatroom ID
                    ..text("ENTER_POLL_QUESTION") // Provide the poll text
                    ..polls([PollOption('Option 1'), PollOption('Option 2')]) // Provide poll options
                    ..pollType(1) // Specify poll type
                    ..isAnonymous(true) // Anonymize the poll
                    ..allowAddOption(false) // Disable adding options
                    ..expiryTime(3600) // Set expiry time for the poll
                    ..temporaryId('temp123')) // Provide temporary ID for the poll
                    .build();

final LMResponse<PostConversationResponse> response =
    await lmChatClient.postPollConversation(request);

if (response.success) {
  // Handle the posted poll conversation
  Conversation postedConversation = response.data?.conversation ?? Conversation();
  handlePostedConversation(postedConversation);
} else {
  // Handle error
  handleError(response);
}
```

:::tip
Ensure that `polls`, `chatroomId`, `text`, and `pollType` are set before sending a request to post a poll.
:::

## Models

### PostPollConversationRequest

List of parameters for the `PostPollConversationRequest` class:

| Variable                | Type                                                              | Description                                             | Optional           |
| ----------------------- | ----------------------------------------------------------------- | ------------------------------------------------------- | ------------------ |
| `chatroomId`            | int                                                               | The ID of the chatroom where the poll will be posted    |                    |
| `text`                  | String                                                            | The poll text to be posted                              |                    |
| `state`                 | int                                                               | The state of the poll (e.g., active, closed)            |                    |
| `repliedConversationId` | String?                                                           | ID of the conversation being replied to                 | :heavy_check_mark: |
| `polls`                 | List&lt;[PollOption](../../Models/conversation.md#polloption)&gt; | List of poll options                                    |                    |
| `pollType`              | int                                                               | The type of poll (e.g., single choice, multiple choice) |                    |
| `multipleSelectState`   | int?                                                              | The state of multiple selection (if applicable)         | :heavy_check_mark: |
| `multipleSelectNo`      | int?                                                              | The number of options allowed for multiple selection    | :heavy_check_mark: |
| `isAnonymous`           | bool                                                              | Whether the poll is anonymous                           |                    |
| `allowAddOption`        | bool                                                              | Whether new options can be added to the poll            |                    |
| `expiryTime`            | int                                                               | The expiry time for the poll                            |                    |
| `temporaryId`           | String                                                            | Temporary ID for the poll                               |                    |
| `noPollExpiry`          | bool?                                                             | Whether the poll has no expiry                          | :heavy_check_mark: |
| `allowVoteChange`       | bool?                                                             | Whether users can change their vote                     | :heavy_check_mark: |

### PostConversationResponse

List of parameters for the `PostConversationResponse` class:

| Variable       | Type                                         | Description                                 | Optional           |
| -------------- | -------------------------------------------- | ------------------------------------------- | ------------------ |
| `conversation` | [Conversation](../../Models/conversation.md) | The conversation object for the posted poll | :heavy_check_mark: |
| `id`           | int                                          | The ID of the posted conversation           | :heavy_check_mark: |



================================================
File: chat/Flutter/Data/Conversation/Poll/submit-poll.md
================================================
---
sidebar_position: 2
title: Submit Poll
slug: /flutter/data/submit-poll
---

# Submit Poll

The `submitPoll()` method is used to submit the poll responses for a specific conversation. This requires the `conversationId` and the selected `polls` that are submitted by the user.

## Steps to Submit a Poll

1. Create a [`SubmitPollRequest`](#submitpollrequest) object using the builder pattern, providing the necessary parameters such as the `conversationId` and `polls` (list of selected poll options).
2. Call the `submitPoll()` function using the `LMChatClient` instance.
3. The method returns `LMResponse<void>`, which you can use to check whether the poll was successfully submitted or if an error occurred.

```dart
SubmitPollRequest request = (SubmitPollRequestBuilder()
                    ..conversationId("ENTER_CONVERSATION_ID") // Provide the conversation ID
                    ..polls([PollOption('Option 1'), PollOption('Option 2')])) // Provide selected poll options
                    .build();

final LMResponse<void> response = await lmChatClient.submitPoll(request);

if (response.success) {
  // Handle successful poll submission
  handleSuccess();
} else {
  // Handle error
  handleError(response);
}
```

:::tip
Ensure that `conversationId` and `polls` are correctly set before sending the request to submit the poll.
:::

## Models

### SubmitPollRequest

List of parameters for the `SubmitPollRequest` class:

| Variable         | Type                                                              | Description                                          | Optional |
| ---------------- | ----------------------------------------------------------------- | ---------------------------------------------------- | -------- |
| `conversationId` | int                                                               | The ID of the conversation where the poll was posted |          |
| `polls`          | List&lt;[PollOption](../../Models/conversation.md#polloption)&gt; | List of poll options selected by the user            |          |



================================================
File: chat/Flutter/Data/Conversation/Reaction/_category_.json
================================================
{
  "label": "Reaction",
  "position": 6,
  "link": {
    "type": "generated-index",
    "description": "Documentation for all reactions related functions"
  }
}



================================================
File: chat/Flutter/Data/Conversation/Reaction/delete_reaction.md
================================================
---
sidebar_position: 2
title: Delete Reaction
slug: /flutter/data/delete-reaction
---

# Delete Reaction

You can integrate "remove reaction" which enables your user to remove their reaction from already reacted chat messages. You can do so by following the given steps.

## Steps to Delete Reaction in a Conversation

1. Create an object of the [`DeleteReactionRequest`](#deletereactionrequest) class using the `DeleteReactionRequestBuilder` class.
2. Call `deleteReaction()` present in the `LMChatClient` class using your request object.
3. Process the response LMResponse&lt;void&gt; as per your requirement.

```dart
DeleteReactionRequest request = (DeleteReactionRequestBuilder()
    ..conversationId("ENTER_CONVERSATION_ID")
    ..reaction("ENTER_REACTION"))
    .build();

LMResponse<void> response = await lmChatClient.deleteReaction(request);

if (response.success) {
    // your function to process the response data
    processResponse(response);
} else {
    // your function to process error message
    processError(response.errorMessage);
}
```

## Models

### DeleteReactionRequest

List of parameters for the `DeleteReactionRequest` class

| Variable         | Type   | Description     | Optional |
| ---------------- | ------ | --------------- | -------- |
| `conversationId` | int    | Conversation ID |          |
| `reaction`       | String | Reaction        |          |



================================================
File: chat/Flutter/Data/Conversation/Reaction/put_reaction.md
================================================
---
sidebar_position: 1
title: Add Reaction
slug: /flutter/data/add-reaction
---

# Add Reaction

Reactions are used to add context to a message, such as by indicating that the user agree or disagree with something that was said. You can integrate reactions to react to chat messages and enable your users to react to these messages by following the given steps

## Steps to Add Reaction in a Conversation

1. Create an object of the [`PutReactionRequest`](#putreactionrequest) class using the `PutReactionRequestBuilder` class.
2. Call `putReaction()` present in the `LMChatClient` class using your request object.
3. Process the response LMResponse&lt;void&gt; as per your requirement.

```dart
PutReactionRequest request = (PutReactionRequestBuilder()
    ..conversationId("ENTER_CONVERSATION_ID")
    ..reaction("ENTER_REACTION"))
    .build();

LMResponse<void> response = await lmChatClient.putReaction(request);

if (response.success) {
    // your function to process the response data
    processResponse(response);
} else {
    // your function to process error message
    processError(response);
}
```

## Models

### PutReactionRequest

List of parameters for the `PutReactionRequest` class

| Variable         | Type   | Description     | Optional |
| ---------------- | ------ | --------------- | -------- |
| `conversationId` | int    | Conversation ID |          |
| `reaction`       | String | Reaction        |          |



================================================
File: chat/Flutter/Data/Direct Message Feed/_category_.json
================================================
{
  "label": "Direct Messages Feed",
  "position": 3,
  "link": {
    "type": "generated-index",
    "description": "Documentation for Direct Message Feed functions"
  }
}



================================================
File: chat/Flutter/Data/Direct Message Feed/check-dm-status.md
================================================
---
sidebar_position: 3
title: Check DM Status
slug: /flutter/data/check-dm-status
---

# Check DM Status

The `checkDMStatus` method is used to check the status of the Direct Message (DM) functionality for a specific user. It provides information on whether the DM feature is available and any related call-to-action (CTA) messages.

## Steps to Check DM Status

1. Create a `CheckDMStatusRequest` object with the required `reqFrom` parameter and optionally the `uuid`.
2. Call the `checkDMStatus()` function using the instance of the `LMChatClient` class.
3. Use the response (`LMResponse<CheckDMStatusResponse>`) to retrieve the DM status data.

```dart
CheckDMStatusRequest request = (CheckDMStatusRequestBuilder()
                    ..reqFrom("source") // Provide the request source
                    ..uuid("user-uuid")) // Optionally provide the user UUID
                    .build();

final LMResponse<CheckDMStatusResponse> response = await lmChatClient.checkDMStatus(request);

if (response.success) {
  // Use the retrieved DM status data
  handleDMStatus(response.data);
} else {
  // Handle error
  handleError(response);
}
```

:::tip
The `reqFrom` parameter is required to specify the source of the request. You can optionally provide the `uuid` to check the DM status for a specific user.
:::

## Models

### CheckDMStatusRequest

List of parameters for the `CheckDMStatusRequest` class:

| Variable | Type   | Description               | Optional |
| -------- | ------ | ------------------------- | -------- |
| `reqFrom` | String | The source of the DM status request |          |
| `uuid`    | String | Unique identifier for the user | :heavy_check_mark: |

### CheckDMStatusResponse

List of parameters for the `CheckDMStatusResponse` class:

| Variable  | Type   | Description                                     | Optional           |
| --------- | ------ | ----------------------------------------------- | ------------------ |
| `cta`     | String | Call-to-action message, if any                  | :heavy_check_mark: |
| `showDm`  | bool   | Indicates whether the DM feature is available  | :heavy_check_mark: |


================================================
File: chat/Flutter/Data/Direct Message Feed/get-dm-feed.md
================================================
---
sidebar_position: 1
title: Get Direct Messages Chatrooms
slug: /flutter/data/get-direct-message-chatrooms
---

# Get Direct Messages Chatrooms

The Home Feed for Direct Messages (DM) chatrooms is an essential feature in many applications, allowing users to easily access and interact with their private conversations. In the context of the Flutter SDK, this Home Feed is designed to provide a streamlined and dynamic interface specifically for DM chatrooms, enabling users to quickly find and engage with their direct messages.


## Steps to Get Group Chatrooms

1. Create an object of the [`GetHomeFeedRequest`](#gethomefeedrequest) class.
2. Call the `getHomeFeed()` function using the instance of the `LMChatClient` class.
3. Process the response LMResponse&lt;[`GetHomeFeedResponse`](#gethomefeedresponse)&gt; as per your requirement.

```dart
GetHomeFeedRequest request = (GetHomeFeedRequestBuilder()
                    ..page(1) // Specify the page number
                    ..pageSize(20) // Set the page size
                    ..minTimestamp(1627683600) // Minimum timestamp
                    ..maxTimestamp(1627770000) // Maximum timestamp
                    ..chatroomTypes([10]) // Specify chatroom types
                    ..isLocalDb(true)) // Use local database
                    .build();

final LMResponse<GetHomeFeedResponse> response =
    await lmChatClient.getHomeFeed(request);

if (response.success) {
  // Handle the home feed response
  GetHomeFeedResponse homeFeed = response.data!;
  handleHomeFeed(homeFeed);
} else {
  // Handle error
  handleError(response);
}
```

## Models

### GetHomeFeedRequest

List of parameters for the `GetHomeFeedRequest` class

| Variable        | Type        | Description                        | Optional           |
| --------------- | ----------- | ---------------------------------- | ------------------ |
| `page`          | int         | Page number for paginated response |                    |
| `pageSize`      | int?        | Page size for paginated response   | :heavy_check_mark: |
| `minTimestamp`  | int?        | Minimum timestamp for filtering    | :heavy_check_mark: |
| `maxTimestamp`  | int?        | Maximum timestamp for filtering    | :heavy_check_mark: |
| `chatroomTypes` | List<int\>? | List of chatroom types to filter   | :heavy_check_mark: |
| `tag`           | String?     | The tag filter for the home feed   | :heavy_check_mark: |
| `isLocalDb`     | bool        | Flag to indicate local DB usage    | :heavy_check_mark: |

### GetHomeFeedResponse

List of parameters for the `GetHomeFeedResponse` class

| Variable                      | Type                                                                        | Description                                              | Optional           |
| ----------------------------- | --------------------------------------------------------------------------- | -------------------------------------------------------- | ------------------ |
| `communityMeta`               | Map&lt;String, [Community](../Models/community.md)&gt;?                     | Map of communities with their ID as the key              | :heavy_check_mark: |
| `chatroomsData`               | List&lt;[ChatRoom](../Models/chatroom.md)&gt;?                              | List of chatrooms                                        | :heavy_check_mark: |
| `conversationMeta`            | Map&lt;String, [Conversation](../Models/conversation.md)&gt;?               | Map of conversations with their ID as the key            | :heavy_check_mark: |
| `userMeta`                    | Map&lt;int, [User](../Models/user.md)&gt;?                                  | Map of users with their ID as the key                    | :heavy_check_mark: |
| `cardAttachmentsMeta`         | Map&lt;String, [Attachment](../Models/conversation.md#attachment)&gt;?      | Map of card attachments                                  | :heavy_check_mark: |
| `conversationAttachmentsMeta` | Map&lt;String, List<[Attachment](../Models/conversation.md#attachment)&gt;? | Map of conversation attachments with their ID as the key | :heavy_check_mark: |
| `conversationPollsMeta`       | Map&lt;dynamic, dynamic&gt;?                       | Map of conversation polls                                | :heavy_check_mark: |


================================================
File: chat/Flutter/Data/Group Chatroom Feed/_category_.json
================================================
{
  "label": "Group Chatroom Feed",
  "position": 2,
  "link": {
    "type": "generated-index",
    "description": "Documentation for Group Chatroom Feed functions"
  }
}



================================================
File: chat/Flutter/Data/Group Chatroom Feed/get-explore-feed.md
================================================
---
sidebar_position: 2
title: Get Explore Feed
slug: /flutter/data/get-explore-feed
---

# Get Explore Feed

The Explore Feed is used to explore new chatrooms. You can follow the given steps to integrate this to your chat community. The `getExploreFeed()` function is used to fetch the explore feed.

## Steps to Get Explore Feed

1. Create an object of the [`GetExploreFeedRequest`](#getexplorefeedrequest) class.
2. Call the `getExploreFeed()` function using the instance of the `LMChatClient` class.
3. Process the response LMResponse&lt;[`GetExploreFeedResponse`](#getexplorefeedresponse)&gt; as per your requirement.

```dart
GetExploreFeedRequest request = (GetExploreFeedRequestBuilder()
                    ..page(1)
                    ..orderType(1)
                    ..pinned(false))
                    .build();

LMResponse<GetExploreFeedResponse> response = await lmChatClient.getExploreFeed(request);

if (response.success) {
  // your function to process the response data
  processResponse(response);
} else {
  // your function to process error message
  processError(response);
}
```

## Models

### GetExploreFeedRequest

List of parameters for the `GetExploreFeedRequest` class

| Variable    | Type | Description                        | Optional |
| ----------- | ---- | ---------------------------------- | -------- |
| `page`      | int  | Page number for paginated response |          |
| `orderType` | int  | Type of ordering for chatrooms     |          |
| `pinned`    | bool | Flag to filter pinned chatrooms    |          |

### GetExploreFeedResponse

List of parameters for the `GetExploreFeedResponse` class

| Variable              | Type                                           | Description               | Optional           |
| --------------------- | ---------------------------------------------- | ------------------------- | ------------------ |
| `chatrooms`           | List&lt;[ChatRoom](../Models/chatroom.md)&gt;? | List of chatrooms         | :heavy_check_mark: |
| `pinnedChatroomCount` | int?                                           | Count of pinned chatrooms | :heavy_check_mark: |



================================================
File: chat/Flutter/Data/Group Chatroom Feed/get-explore-tab-count.md
================================================
---
sidebar_position: 3
title: Get Explore Tab Count
slug: /flutter/data/get-explore-tab-count
---

# Get Explore Tab Count

This function gives indication for many chatrooms are available and any new chatroom is created. The `getExploreTabCount()` gives the count of channels available in the explore tab.

## Steps to Get Explore Tab Count

1. Call the `getExploreTabCount()` function using the instance of the `LMChatClient` class.
2. Process the response LMResponse&lt;[`GetExploreTabCountResponse`](#getexploretabcountresponse)&gt; as per your requirement.

```dart
LMResponse<GetExploreTabCountResponse> response = await lmChatClient.getExploreTabCount();

if (response.success) {
  // your function to process the response data
  processResponse(response);
} else {
  // your function to process error message
  processError(response);
}
```

## Models

### GetExploreTabCountResponse

List of parameters for the `GetExploreTabCountResponse` class

| Variable             | Type | Description               | Optional           |
| -------------------- | ---- | ------------------------- | ------------------ |
| `totalChannelCount`  | int? | Total number of channels  | :heavy_check_mark: |
| `unseenChannelCount` | int? | Number of unseen channels | :heavy_check_mark: |



================================================
File: chat/Flutter/Data/Group Chatroom Feed/get-group-chatrooms.md
================================================
---
sidebar_position: 1
title: Get Group Chatrooms
slug: /flutter/data/get-group-chatrooms
---

# Get Group Chatrooms

The Home Feed is a vital component of many applications, providing users with a centralized hub to discover and engage with various content, including chatrooms, discussions, and other interactive features. In the context of the Flutter SDK, the Home Feed serves as a customizable and dynamic feed that can be tailored to suit your application's needs.

This guide provide step-by-step instructions, code snippets, and best practices for integrating the Home Feed and fetching community chatrooms in your Flutter app.

Let's dive into the world of Home Feed integration with the Flutter SDK and unlock the potential for vibrant chatroom communities within your application.

## Steps to Get Group Chatrooms

1. Create an object of the [`GetHomeFeedRequest`](#gethomefeedrequest) class.
2. Call the `getHomeFeed()` function using the instance of the `LMChatClient` class.
3. Process the response LMResponse&lt;[`GetHomeFeedResponse`](#gethomefeedresponse)&gt; as per your requirement.

```dart
GetHomeFeedRequest request = (GetHomeFeedRequestBuilder()
                    ..page(1) // Specify the page number
                    ..pageSize(20) // Set the page size
                    ..minTimestamp(1627683600) // Minimum timestamp
                    ..maxTimestamp(1627770000) // Maximum timestamp
                    ..chatroomTypes([0, 7]) // Specify chatroom types
                    ..tag('tag_name') // Add a tag filter
                    ..isLocalDb(true)) // Use local database
                    .build();

final LMResponse<GetHomeFeedResponse> response =
    await lmChatClient.getHomeFeed(request);

if (response.success) {
  // Handle the home feed response
  GetHomeFeedResponse homeFeed = response.data!;
  handleHomeFeed(homeFeed);
} else {
  // Handle error
  handleError(response);
}
```

## Models

### GetHomeFeedRequest

List of parameters for the `GetHomeFeedRequest` class

| Variable        | Type        | Description                        | Optional           |
| --------------- | ----------- | ---------------------------------- | ------------------ |
| `page`          | int         | Page number for paginated response |                    |
| `pageSize`      | int?        | Page size for paginated response   | :heavy_check_mark: |
| `minTimestamp`  | int?        | Minimum timestamp for filtering    | :heavy_check_mark: |
| `maxTimestamp`  | int?        | Maximum timestamp for filtering    | :heavy_check_mark: |
| `chatroomTypes` | List<int\>? | List of chatroom types to filter   | :heavy_check_mark: |
| `tag`           | String?     | The tag filter for the home feed   | :heavy_check_mark: |
| `isLocalDb`     | bool        | Flag to indicate local DB usage    | :heavy_check_mark: |

### GetHomeFeedResponse

List of parameters for the `GetHomeFeedResponse` class

| Variable                      | Type                                                                        | Description                                              | Optional           |
| ----------------------------- | --------------------------------------------------------------------------- | -------------------------------------------------------- | ------------------ |
| `communityMeta`               | Map&lt;String, [Community](../Models/community.md)&gt;?                     | Map of communities with their ID as the key              | :heavy_check_mark: |
| `chatroomsData`               | List&lt;[ChatRoom](../Models/chatroom.md)&gt;?                              | List of chatrooms                                        | :heavy_check_mark: |
| `conversationMeta`            | Map&lt;String, [Conversation](../Models/conversation.md)&gt;?               | Map of conversations with their ID as the key            | :heavy_check_mark: |
| `userMeta`                    | Map&lt;int, [User](../Models/user.md)&gt;?                                  | Map of users with their ID as the key                    | :heavy_check_mark: |
| `cardAttachmentsMeta`         | Map&lt;String, [Attachment](../Models/conversation.md#attachment)&gt;?      | Map of card attachments                                  | :heavy_check_mark: |
| `conversationAttachmentsMeta` | Map&lt;String, List<[Attachment](../Models/conversation.md#attachment)&gt;? | Map of conversation attachments with their ID as the key | :heavy_check_mark: |
| `conversationPollsMeta`       | Map&lt;dynamic, dynamic&gt;?                       | Map of conversation polls                                | :heavy_check_mark: |


================================================
File: chat/Flutter/Data/Helper/_category_.json
================================================
{
  "label": "Helper",
  "position": 8,
  "link": {
    "type": "generated-index",
    "description": "Documentation for Helper functions in Chat"
  }
}



================================================
File: chat/Flutter/Data/Helper/decode_url.md
================================================
---
sidebar_position: 2
title: Decode URL
slug: /flutter/data/decode-url
---

# Decode URL

You can get the link preview by calling the `decodeUrl()` method present in `LMChatClient` class and passing the request object.

## Steps to Decode a URL

1. Create an object of the [`DecodeUrlRequest`](#decodeurlrequest) class.
2. Call the `decodeUrl()` function using the instance of the `LMChatClient` class.
3. Process the response LMResponse&lt;[`DecodeUrlResponse`](#decodeurlresponse)&gt; as per your requirement.

```dart
DecodeUrlRequest request = (DecodeUrlRequestBuilder()
                    ..url("ENTER_URL"))
                    .build();

LMResponse<DecodeUrlResponse> response = await lmChatClient.decodeUrl(request);

if (response.success) {
  // your function to handle successful decoding
  handleDecodeSuccess(response.data?.ogTags);
} else {
  // your function to handle decode error
  handleDecodeError(response.errorMessage);
}
```

## Models

### DecodeUrlRequest

List of parameters for the `DecodeUrlRequest` class

| Variable | Type   | Description       | Optional |
| -------- | ------ | ----------------- | -------- |
| `url`    | String | The URL to decode |          |

### DecodeUrlResponse

List of parameters for the `DecodeUrlResponse` class

| Variable | Type                                        | Description                                | Optional           |
| -------- | ------------------------------------------- | ------------------------------------------ | ------------------ |
| `ogTags` | [OgTags](../Models/conversation.md#ogtags)? | The Open Graph tags extracted from the URL | :heavy_check_mark: |



================================================
File: chat/Flutter/Data/Helper/tag_member.md
================================================
---
sidebar_position: 1
title: Get Tagging Member List
slug: /flutter/data/get-member-tagging-list
---

# Get Tagging Member List

You can get the list of all the tags present in the community by calling the `getTaggingList()` method present in `LMChatClient` class and passing the request object.

## Steps to Tag Member in a Conversation

1. Create a [`TagRequestModel`](#tagrequestmodel) object using the `TagRequestModelBuilder` class.
2. Call `getTaggingList()` function using the instance of `LMChatClient` class, using your request object.
3. Process the response LMResponse&lt;[`TagResponseModel`](#tagresponsemodel)&gt; as per your requirement.

```dart
TagRequestModel request = (TagRequestModelBuilder()
      ..chatroomId("ENTER_CHATROOM_ID"))
      .build();

LMResponse<TagResponseModel> response = await lmClient.getTaggingList(request);

if (response.success) {
    debugPrint("Tagging list fetched");
} else {
    debugPrint("Failed to fetch tagging list");
}
```

## Models

### TagRequestModel

List of parameters for the `TagRequestModel` class

| Variable      | Type    | Description   | Nullable           |
| ------------- | ------- | ------------- | ------------------ |
| `chatroomId`  | int?    | Chatroom ID   | :heavy_check_mark: |
| `page`        | int?    | Page number   | :heavy_check_mark: |
| `pageSize`    | int?    | Page size     | :heavy_check_mark: |
| `searchQuery` | String? | Search string | :heavy_check_mark: |

### TagResponseModel

List of parameters for the `TagResponseModel` class

| Variable       | Type                               | Description                      | Nullable           |
| -------------- | ---------------------------------- | -------------------------------- | ------------------ |
| `members`      | List&lt;[UserTag](#usertag)&gt;?   | List of member tags              | :heavy_check_mark: |
| `groupTags`    | List&lt;[GroupTag](#grouptag)&gt;? | List of group tags               | :heavy_check_mark: |

### UserTag

List of parameters used in `UserTag`

| Variable      | Type                                             | Description                    | Optional           |
| ------------- | ------------------------------------------------ | ------------------------------ | ------------------ |
| name          | String                                           | name of the user               | :heavy_check_mark: |
| imageUrl      | String                                           | url of the image               | :heavy_check_mark: |
| customTitle   | String                                           | custom title of the user       | :heavy_check_mark: |
| id            | int                                              | unique id of the user          | :heavy_check_mark: |
| isGuest       | bool                                             | is user guest                  | :heavy_check_mark: |
| userUniqueId  | String                                           | unique id of the user          | :heavy_check_mark: |
| uuid          | String                                           | unique identifier for the user | :heavy_check_mark: |
| sdkClientInfo | [SDKClientInfo](../Models/user.md#sdkclientinfo) | sdk client info                | :heavy_check_mark: |

### GroupTag

List of parameters used in `GroupTag`

| Variable    | Type   | Description                   | Optional           |
| ----------- | ------ | ----------------------------- | ------------------ |
| description | String | description of the group      | :heavy_check_mark: |
| imageUrl    | String | url of the image              | :heavy_check_mark: |
| name        | String | name of the group             | :heavy_check_mark: |
| route       | String | route of the group            | :heavy_check_mark: |
| tag         | String | tag associated with the group | :heavy_check_mark: |



================================================
File: chat/Flutter/Data/Member/_category_.json
================================================
{
  "label": "User",
  "position": 6,
  "link": {
    "type": "generated-index",
    "description": "Documentation for all user related functions"
  }
}



================================================
File: chat/Flutter/Data/Member/edit-profile.md
================================================
---
sidebar_position: 4
title: Edit Profile
slug: /flutter/data/edit-profile
---

# Edit Profile

The `editProfile` function allows users to update their profile details, such as their name, profile picture, widget ID, or additional metadata.

## Usage

1. Create an `EditProfileRequest` object with the required user ID (`uuid`) and any optional parameters you want to update.
2. Call the `editProfile()` method to submit the request.
3. If successful, the response will indicate success without returning additional data.

### Example

```dart
final EditProfileRequest request = EditProfileRequest(
  uuid: 'user123', // Required user ID
  name: 'John Doe', // Optional name
  imageUrl: 'https://example.com/profile.jpg', // Optional profile picture URL
);

final LMResponse<void> response = await lmChatClient.editProfile(request);

if (response.success) {
  print('Profile updated successfully!');
} else {
  print('Failed to update profile: ${response.errorMessage}');
}
```

---

## Models

### EditProfileRequest

| Parameter      | Type                     | Description                                    | Optional        |
| -------------- | ------------------------ | ---------------------------------------------- | --------------- |
| `uuid`         | String                   | The unique identifier for the user             |              |
| `imageUrl`     | String?                  | The URL of the user's profile picture          | :heavy_check_mark: |
| `name`         | String?                  | The name of the user                           | :heavy_check_mark: |
| `widgetId`     | String?                  | The ID of the widget associated with the user  | :heavy_check_mark: |
| `metadata`     | Map<String, dynamic>?    | Additional metadata for the user's profile     | :heavy_check_mark: |


**Note**: The response does not contain a body. It only provides success or failure information.


================================================
File: chat/Flutter/Data/Member/get-all-members.md
================================================
---
sidebar_position: 5
title: Get All Members
slug: /flutter/data/get-all-members
---

# Get All Members

The `getAllMembers` method is used to retrieve a list of members based on their state. This function supports pagination and provides detailed member data.

## Steps to Get All Members

1. Create a [`GetAllMembersRequest`](#getallmembersrequest) object with the required member state and optional pagination details.
2. Call the `getAllMembers()` function using the instance of the `LMChatClient` class.
3. Use the response LMResponse&lt;[`GetAllMembersResponse`](#getallmembersresponse)&gt; to handle the retrieved member list.

```dart
GetAllMembersRequest request = (GetAllMembersRequestBuilder()
                    ..memberState(1) // Provide the member state
                    ..page(1)) // Optional: Provide the page number for pagination
                    .build();

final LMResponse<GetAllMembersResponse> response = await lmChatClient.getAllMembers(request);

if (response.success) {
  // Use the retrieved member data
  handleMembers(response.data.members);
} else {
  // Handle error
  handleError(response);
}
```

:::tip
The `memberState` parameter determines the type of members to retrieve. For example, active, inactive, or specific states as defined in your application.
:::

## Models

### GetAllMembersRequest

List of parameters for the `GetAllMembersRequest` class:

| Variable      | Type | Description                  | Optional           |
| ------------- | ---- | ---------------------------- | ------------------ |
| `memberState` | int  | State of members to retrieve |                    |
| `page`        | int  | Page number for pagination   | :heavy_check_mark: |

### GetAllMembersResponse

List of parameters for the `GetAllMembersResponse` class:

| Variable  | Type                              | Description               | Optional           |
| --------- | --------------------------------- | ------------------------- | ------------------ |
| `members` | List<[DmAllMember](#dmallmember)> | List of members retrieved | :heavy_check_mark: |

### DmAllMember

List of parameters for the `DmAllMember` class:

| Variable          | Type                                             | Description                              | Optional           |
| ----------------- | ------------------------------------------------ | ---------------------------------------- | ------------------ |
| `customTitle`     | String                                           | Custom title assigned to the member      | :heavy_check_mark: |
| `id`              | int                                              | Unique identifier for the member         | :heavy_check_mark: |
| `imageUrl`        | String                                           | URL of the member's profile image        | :heavy_check_mark: |
| `isDeleted`       | bool                                             | Indicates if the member is deleted       | :heavy_check_mark: |
| `isGuest`         | bool                                             | Indicates if the member is a guest       | :heavy_check_mark: |
| `name`            | String                                           | Name of the member                       | :heavy_check_mark: |
| `questionAnswers` | String                                           | Answers to any custom questions          | :heavy_check_mark: |
| `sdkClientInfo`   | [SDKClientInfo](../Models/user.md#sdkclientinfo) | SDK client information                   | :heavy_check_mark: |
| `userUniqueId`    | String                                           | Unique user ID                           | :heavy_check_mark: |
| `uuid`            | String                                           | Universally unique identifier for member | :heavy_check_mark: |



================================================
File: chat/Flutter/Data/Member/get-current-logged-in-member.md
================================================
---
sidebar_position: 7
title: Get Current Logged In Members
slug: /flutter/data/get-current-logged-in-members
---

# Get Current Logged in Member

The `getLoggedInUser()` method retrieves the currently logged-in user's information. It returns a LMResponse&lt;[User](../Models/user.md)&gt; object, which contains the details of the user who is currently authenticated in the application.

## Example Usage

```dart
final LMResponse<User> response = await lmChatClient.getLoggedInUser();

if (response.success) {
  User loggedInUser = response.data!;
  // Handle the logged-in user data
} else {
  // Handle error
  handleError(response);
}
```



================================================
File: chat/Flutter/Data/Member/get-member-state.md
================================================
---
sidebar_position: 6
title: Get Member State
slug: /flutter/data/get-member-state
---

# Member State

When building out your chat experience, you might want to moderate some actions based on the state of a community member. That's where member state comes in. With a single `getMemberState()` function you can determine if a member is a CM, or not.

```dart
final bool isCM = await lmChatClient.getMemberState();
```

### MemberStateResponse

List of parameters for the `MemberStateResponse` class

| Variable       | Type    | Description                      | Optional           |
| -------------- | ------- | -------------------------------- | ------------------ |
| `isCM`         | bool    | Is the user a community manager  |                    |
| `memberStatus` | String  | Status of the member             | :heavy_check_mark: |
| `errorMessage` | String? | Error message in case of failure | :heavy_check_mark: |



================================================
File: chat/Flutter/Data/Member/initiate-user.md
================================================
---
sidebar_position: 1
title: Initiate User
slug: /flutter/data/initiate-user
---

# Initiate User

To start using the LikeMinds Chat and enable personalized experiences for your users, you need to initiate them within the system. This process associates a user in your application with a user in the LikeMinds Chat, allowing for seamless integration and real-time messaging in your application.

## Steps to initiate a User

1. Create an `InitiateUserRequest` object using user credentials.
2. Call the `initiateUser()` function using the instance of the `LMChatClient` class.
3. Use the response (`LMResponse<InitiateUserResponse>`) as per your requirement.

```dart
InitiateUserRequest request = (InitiateUserRequestBuilder()
                    ..userName("ENTER_USER_NAME")
                    ..userId("ENTER_USER_ID"))
                    .build();

final LMResponse<InitiateUserResponse> response = await lmChatClient.initiateUser(request);

if (response.success) {
  // your function to process the response data
  processResponse(response);
} else {
  // your function to process error message
  processError(response);
}
```

:::tip
We suggest that you use the unique ID from your database for the user so that you do not have to save the one we generate.
:::

## Models

### InitiateUserRequest

List of parameters for the `InitiateUserRequest` class

| Variable   | Type   | Description                     | Optional           |
| ---------- | ------ | ------------------------------- | ------------------ |
| `userId`   | String | Unique ID for the userId        |                    |
| `userName` | String | Name of the userName            |                    |
| `imageUrl` | String | URL of the user's profile image | :heavy_check_mark: |
| `isGuest`  | bool   | Is the user a guest?            | :heavy_check_mark: |

### InitiateUserResponse

List of parameters for the `InitiateUserResponse` class

| Variable       | Type                                | Description                      | Optional           |
| -------------- | ----------------------------------- | -------------------------------- | ------------------ |
| `appAccess`    | bool                                | Whether user has app access      | :heavy_check_mark: |
| `user`         | [User](../Models/user.md)           | user data                        |                    |
| `community`    | [Community](../Models/community.md) | community data                   |                    |
| `accessToken`  | String?                             | Token for accessing the API      | :heavy_check_mark: |
| `refreshToken` | String?                             | Token for refreshing the session | :heavy_check_mark: |



================================================
File: chat/Flutter/Data/Member/logout.md
================================================
---
sidebar_position: 3
title: Logout User
slug: /flutter/data/logout-user
---

# Logout User

To disconnect a user (say that you’re for instance logging out and logging in as someone new) you can call the `logout()` method present in `LMChatClient` class.

## Steps to Logout

1. Create an object of the `LogoutRequest` class.
2. Call the `logout()` function using the instance of the `LMChatClient` class.
3. Process the response (`LMResponse<void>`) as per your requirement.

```dart
LogoutRequest request = (LogoutRequestBuilder()
                    ..refreshToken("ENTER_REFRESH_TOKEN")
                    ..deviceId("ENTER_DEVICE_ID"))
                    .build();

LMResponse<void> response = await lmChatClient.logout(request);

if (response.success) {
  // your function to handle successful logout
  handleLogoutSuccess();
} else {
  // your function to handle logout error
  handleLogoutError(response.errorMessage);
}
```

## Models

### LogoutRequest

List of parameters for the `LogoutRequest` class

| Variable       | Type    | Description                                      | Optional           |
| -------------- | ------- | ------------------------------------------------ | ------------------ |
| `refreshToken` | String? | The refresh token for the user session           | :heavy_check_mark: |
| `deviceId`     | String? | The device ID from which the user is logging out | :heavy_check_mark: |



================================================
File: chat/Flutter/Data/Member/validate-user.md
================================================
---
sidebar_position: 2
title: Validate User
slug: /flutter/data/validate-user
---

# Validate User

The `validateUser` method is used to validate a user session. This function ensures that the user session is active and the provided access and refresh tokens are valid. This method helps maintain secure and authenticated access to the LikeMinds Chat SDK.

## Steps to Validate a User Session

1. Create a `ValidateUserRequest` object with the required tokens.
2. Call the `validateUser()` function using the instance of the `LMChatClient` class.
3. Use the response (`LMResponse<ValidateUserResponse>`) to check for validity or handle errors.

```dart
ValidateUserRequest request = (ValidateUserRequestBuilder()
                    ..accessToken("ENTER_ACCESS_TOKEN")
                    ..refreshToken("ENTER_REFRESH_TOKEN"))
                    .build();

final LMResponse<ValidateUserResponse> response = await lmChatClient.validateUser(request);

if (response.success) {
  // Handle the validated user session
  handleValidatedSession(response);
} else {
  // Handle error
  handleError(response);
}
```

:::tip
Ensure you securely manage and store the access and refresh tokens to prevent unauthorized access.
:::

## Models

### ValidateUserRequest

List of parameters for the `ValidateUserRequest` class:

| Variable         | Type   | Description                     | Optional |
| ---------------- | ------ | ------------------------------- | -------- |
| `accessToken`    | String | Token for accessing the API      |          |
| `refreshToken`   | String | Token for refreshing the session |          |

### ValidateUserResponse

List of parameters for the `ValidateUserResponse` class:

| Variable    | Type                                | Description                | Optional           |
| ----------- | ----------------------------------- | -------------------------- | ------------------ |
| `user`      | [User](../Models/user.md)           | User data                  | :heavy_check_mark: |
| `community` | [Community](../Models/community.md) | Community data             | :heavy_check_mark: |
| `appAccess` | bool                                | Whether user has app access | :heavy_check_mark: |



================================================
File: chat/Flutter/Data/Models/_category_.json
================================================
{
  "label": "Models",
  "position": 11,
  "link": {
    "type": "generated-index",
    "description": "All the models used in the Data Layer"
  }
}



================================================
File: chat/Flutter/Data/Models/chatroom.md
================================================
---
sidebar_position: 3
title: Chatroom
slug: /flutter/data/model/chatroom
---

# ChatRoom

List of parameters used in `ChatRoom`

| Variable              | Type                      | Description                       | Optional           |
| --------------------- | ------------------------- | --------------------------------- | ------------------ |
| `id`                  | int                       | unique id of the chatroom         |                    |
| `title`               | String                    | title of the chatroom             |                    |
| `header`              | String                    | header of the chatroom            |                    |
| `communityId`         | int                       | unique id of the community        |                    |
| `communityName`       | String                    | name of the community             |                    |
| `chatroomImageUrl`    | String                    | profile image url of the chatroom | :heavy_check_mark: |
| `autoFollowDone`      | bool                      | is auto follow done               | :heavy_check_mark: |
| `cardCreationTime`    | String                    | card creation time                | :heavy_check_mark: |
| `createdAt`           | int                       | timestamp of creation             | :heavy_check_mark: |
| `lastConversationId`  | int                       | unique id of last conversation    | :heavy_check_mark: |
| `date`                | String                    | date of the chatroom              | :heavy_check_mark: |
| `dateEpoch`           | int                       | epoch of the date                 | :heavy_check_mark: |
| `dateTime`            | int                       | timestamp of the date             | :heavy_check_mark: |
| `followStatus`        | bool                      | is user following the chatroom    | :heavy_check_mark: |
| `includeMembersLater` | bool                      | is members included later         | :heavy_check_mark: |
| `isPrivate`           | bool                      | is chatroom private               | :heavy_check_mark: |
| `isPrivateMember`     | bool                      | is user a private member          | :heavy_check_mark: |
| `isSecret`            | bool                      | is chatroom secret                | :heavy_check_mark: |
| `isTagged`            | bool                      | is chatroom tagged                | :heavy_check_mark: |
| `member`              | [User](../Models/user.md) | member of the chatroom            | :heavy_check_mark: |
| `muteStatus`          | bool                      | is chatroom muted                 | :heavy_check_mark: |
| `reactions`           | List<dynamic\>            | list of reactions                 | :heavy_check_mark: |
| `secretChatroomLeft`  | bool                      | is secret chatroom left           | :heavy_check_mark: |
| `state`               | int                       | state of the chatroom             | :heavy_check_mark: |
| `type`                | int                       | type of the chatroom              | :heavy_check_mark: |
| `participantCount`    | int                       | count of participants             | :heavy_check_mark: |

## ChatoomAction

List of parameters used in `ChatoomAction`

| Variable | Type   | Description                      | Optional |
| -------- | ------ | -------------------------------- | -------- |
| `id`     | int    | unique id of the chatroom action |          |
| `title`  | String | title of the chatroom action     |          |



================================================
File: chat/Flutter/Data/Models/community.md
================================================
---
sidebar_position: 2
title: Community
slug: /flutter/data/model/community
---

# Community

List of parameters used in `Community`

| Variable   | Type   | Description                        | Optional           |
| ---------- | ------ | ---------------------------------- | ------------------ |
| `id`       | int    | unique id of the community         |                    |
| `name`     | String | name of the community              |                    |
| `imageUrl` | String | profile image url of the community | :heavy_check_mark: |



================================================
File: chat/Flutter/Data/Models/conversation.md
================================================
---
sidebar_position: 4
title: Conversation
slug: /flutter/data/model/conversation
---

# Conversation

List of parameters used in `Conversation`

| Variable                  | Type                                  | Description                                   | Optional           |
| ------------------------- | ------------------------------------- | --------------------------------------------- | ------------------ |
| `allowAddOption`          | bool                                  | is add option allowed                         | :heavy_check_mark: |
| `answer`                  | String                                | answer of the conversation                    | :heavy_check_mark: |
| `attachmentCount`         | int                                   | count of attachments                          | :heavy_check_mark: |
| `attachments`             | List&lt;[Attachment](#attachment)&gt; | list of attachments                           | :heavy_check_mark: |
| `attachmentsUploaded`     | bool                                  | is attachments uploaded                       | :heavy_check_mark: |
| `chatroomId`              | int                                   | unique id of the chatroom                     | :heavy_check_mark: |
| `communityId`             | int                                   | unique id of the community                    | :heavy_check_mark: |
| `createdAt`               | String                                | timestamp of creation                         | :heavy_check_mark: |
| `createdEpoch`            | int                                   | epoch of creation                             | :heavy_check_mark: |
| `date`                    | String                                | date of the conversation                      | :heavy_check_mark: |
| `deletedByUserId`         | int                                   | unique id of deleted user                     | :heavy_check_mark: |
| `deviceId`                | String                                | unique id of the device                       | :heavy_check_mark: |
| `endTime`                 | int                                   | end time of the conversation                  | :heavy_check_mark: |
| `expiryTime`              | int                                   | expiry time of the conversation               | :heavy_check_mark: |
| `hasFiles`                | bool                                  | is conversation has files                     | :heavy_check_mark: |
| `hasReactions`            | bool                                  | is conversation has reactions                 | :heavy_check_mark: |
| `id`                      | int                                   | unique id of the conversation                 | :heavy_check_mark: |
| `internalLink`            | String                                | internal link of the conversation             | :heavy_check_mark: |
| `isAnonymous`             | bool                                  | is conversation anonymous                     | :heavy_check_mark: |
| `isEdited`                | bool                                  | is conversation edited                        | :heavy_check_mark: |
| `lastUpdated`             | int                                   | timestamp of last update                      | :heavy_check_mark: |
| `multipleSelectNo`        | int                                   | multiple select number                        | :heavy_check_mark: |
| `multipleSelectState`     | int                                   | multiple select state                         | :heavy_check_mark: |
| `ogTags`                  | [OgTags](#ogtags)                     | tags of the conversation                      | :heavy_check_mark: |
| `pollAnswerText`          | String                                | answer of the poll                            | :heavy_check_mark: |
| `pollType`                | int                                   | type of the poll                              | :heavy_check_mark: |
| `replyChatroomId`         | int                                   | unique id of the reply chatroom               | :heavy_check_mark: |
| `replyId`                 | int                                   | unique id of the reply                        | :heavy_check_mark: |
| `state`                   | int                                   | state of the conversation                     | :heavy_check_mark: |
| `temporaryId`             | String                                | unique id of the temporary conversation       | :heavy_check_mark: |
| `userId`                  | int                                   | unique id of the user                         | :heavy_check_mark: |
| `memberId`                | int                                   | unique id of the member                       | :heavy_check_mark: |
| `toShowResults`           | bool                                  | is show results                               | :heavy_check_mark: |
| `pollTypeText`            | String                                | type of the poll text                         | :heavy_check_mark: |
| `submitTypeText`          | String                                | type of the submit text                       | :heavy_check_mark: |
| `isTimeStamp`             | bool                                  | is time stamp                                 | :heavy_check_mark: |
| `location`                | String                                | location of the conversation                  | :heavy_check_mark: |
| `locationLat`             | String                                | latitude of the location                      | :heavy_check_mark: |
| `locationLong`            | String                                | longitude of the location                     | :heavy_check_mark: |
| `replyConversation`       | int                                   | unique id of the reply conversation           | :heavy_check_mark: |
| `replyConversationObject` | [Conversation?](#conversation)        | object of the reply conversation              | :heavy_check_mark: |
| `conversationReactions`   | List&lt;[Reaction](#reaction)&gt;     | list of reactions in conversation             | :heavy_check_mark: |
| `polls`                   | List&lt;[PollOption](#polloption)&gt; | list of poll options for poll conversation    | :heavy_check_mark: |
| `noPollExpiry`            | bool?                                 | Whether the poll has no expiry                | :heavy_check_mark: |
| `allowVoteChange`         | bool?                                 | Whether users can change their vote           | :heavy_check_mark: |
| `widgetId`                | String?                               | Id of widget associated with the Conversation | :heavy_check_mark: |

## Attachment

List of parameters used in `Attachment`

| Variable       | Type    | Description                     | Optional           |
| -------------- | ------- | ------------------------------- | ------------------ |
| `answerId`     | int     | unique id of the answer         | :heavy_check_mark: |
| `createdAt`    | int     | timestamp of creation           | :heavy_check_mark: |
| `dimensions`   | dynamic | dimensions of the attachment    | :heavy_check_mark: |
| `fileUrl`      | String  | url of the file                 | :heavy_check_mark: |
| `url`          | String  | url of the attachment           | :heavy_check_mark: |
| `height`       | dynamic | height of the attachment        | :heavy_check_mark: |
| `id`           | int     | unique id of the attachment     | :heavy_check_mark: |
| `index`        | int     | index of the attachment         | :heavy_check_mark: |
| `meta`         | dynamic | meta of the attachment          | :heavy_check_mark: |
| `name`         | String  | name of the attachment          | :heavy_check_mark: |
| `thumbnailUrl` | String  | thumbnail url of the attachment | :heavy_check_mark: |
| `type`         | String  | type of the attachment          | :heavy_check_mark: |
| `width`        | dynamic | width of the attachment         | :heavy_check_mark: |

## OgTags

List of parameters used in `OgTags`

| Variable      | Type   | Description                | Optional           |
| ------------- | ------ | -------------------------- | ------------------ |
| `description` | String | description of the og tags | :heavy_check_mark: |
| `image`       | String | image of the og tags       | :heavy_check_mark: |
| `title`       | String | title of the og tags       | :heavy_check_mark: |
| `url`         | String | url of the og tags         |                    |

## Reaction

| Variable         | Type   | Description                                               | Optional           |
| ---------------- | ------ | --------------------------------------------------------- | ------------------ |
| `chatroomId`     | int?   | The ID of the chatroom for this reaction.                 | :heavy_check_mark: |
| `conversationId` | int    | The ID of the conversation for which this reaction exists |                    |
| `reactionId`     | int?   | The ID of this reaction inside the conversation           | :heavy_check_mark: |
| `userId`         | int    | The ID of the user which created this reaction            |                    |
| `reaction`       | String | The reaction in String format, usually an emoji           |                    |

## PollOption

| Variable     | Type                       | Description                                              | Optional           |
| ------------ | -------------------------- | -------------------------------------------------------- | ------------------ |
| `id`         | int?                       | The ID of the poll option.                               | :heavy_check_mark: |
| `text`       | String                     | The text describing the poll option.                     |                    |
| `isSelected` | bool?                      | Whether the option is selected by the user.              | :heavy_check_mark: |
| `percentage` | int?                       | The percentage of total votes that selected this option. | :heavy_check_mark: |
| `noVotes`    | int?                       | The total number of votes for this option.               | :heavy_check_mark: |
| `member`     | [User](../Models/user.md)? | The user who created this poll option, if applicable.    | :heavy_check_mark: |
| `userId`     | int?                       | The ID of the user who created the poll option.          | :heavy_check_mark: |
| `count`      | int?                       | The number of users who voted for this option.           | :heavy_check_mark: |

## LMWidgetData

| Variable           | Type    | Description                    | Optional           |
| ------------------ | ------- | ------------------------------ | ------------------ |
| `id`               | String  | Unique ID of the widget        | :heavy_check_mark: |
| `parentEntityId`   | String  | ID of the parent entity        | :heavy_check_mark: |
| `parentEntityType` | String  | Type of the parent entity      | :heavy_check_mark: |
| `metadata`         | dynamic | Metadata of the widget         | :heavy_check_mark: |
| `lmMeta`           | dynamic | Additional meta information    | :heavy_check_mark: |
| `createdAt`        | int     | Timestamp of creation          | :heavy_check_mark: |
| `updatedAt`        | int     | Timestamp of last modification | :heavy_check_mark: |



================================================
File: chat/Flutter/Data/Models/lm-response.md
================================================
---
sidebar_position: 1
title: LMResponse
slug: /flutter/data/model/lm-response
---

# LMResponse

This is a wrapper class for all the responses returned by the SDK. It contains the following parameters:

| Variable       | Type    | Description                            | Optional           |
| -------------- | ------- | -------------------------------------- | ------------------ |
| `success`      | bool    | API success status                     |                    |
| `errorMessage` | String? | Error message in case of failure       | :heavy_check_mark: |
| `data`         | dynamic | Object of specific response data class | :heavy_check_mark: |



================================================
File: chat/Flutter/Data/Models/user.md
================================================
---
sidebar_position: 5
title: User
slug: /flutter/data/model/user
---

# User

List of parameters used in `User`

| Variable           | Type                              | Description                   | Optional           |
| ------------------ | --------------------------------- | ----------------------------- | ------------------ |
| `id`               | int                               | unique id of the user         |                    |
| `name`             | String                            | name of the user              |                    |
| `imageUrl`         | String                            | profile image url of the user | :heavy_check_mark: |
| `isGuest`          | bool                              | is user a guest               | :heavy_check_mark: |
| `userUniqueId`     | String                            | unique id of the user         |                    |
| `organisationName` | String                            | name of the organisation      | :heavy_check_mark: |
| `sdkClientInfo`    | [SDKClientInfo](#sdkclientinfo)   | sdk client info               | :heavy_check_mark: |
| `updatedAt`        | int                               | timestamp of last update      | :heavy_check_mark: |
| `isOwner`          | bool                              | is user an owner              | :heavy_check_mark: |
| `customTitle`      | String                            | custom title of the user      | :heavy_check_mark: |
| `memberSince`      | String                            | date of joining the community | :heavy_check_mark: |
| `route`            | String                            | route of the user             | :heavy_check_mark: |
| `state`            | int                               | state of the user             | :heavy_check_mark: |
| `communityId`      | int                               | unique id of the community    | :heavy_check_mark: |
| `createdAt`        | int                               | timestamp of user creation    | :heavy_check_mark: |
| `roles`            | List&lt;[UserRole](#userrole)&gt; | roles of the user             | :heavy_check_mark: |

## UserRole

`UserRole` is an enum with the possible values

| Value     | Description             |
| --------- | ----------------------- |
| `chatbot` | This is a chatbot user. |
| `member`  | This is a normal user.  |
| `admin`   | This is an admin user.  |

## SDKClientInfo

List of parameters used in `SDKClientInfo`

| Variable       | Type   | Description                          | Optional           |
| -------------- | ------ | ------------------------------------ | ------------------ |
| `community`    | int    | unique id of the community           |                    |
| `user`         | int    | unique id of the user                |                    |
| `userUniqueId` | String | unique id of the user                |                    |
| `uuid`         | String | unique identifier for the SDK client | :heavy_check_mark: |



================================================
File: chat/Flutter/Data/Moderation/_category_.json
================================================
{
  "label": "Moderation",
  "position": 9,
  "link": {
    "type": "generated-index",
    "description": "Documentation for Moderation Data Layer functions"
  }
}



================================================
File: chat/Flutter/Data/Moderation/fetch-report-tags.md
================================================
---
sidebar_position: 2
title: Fetch Report Tags
slug: /flutter/data/fetch-report-tags
---

# Fetch Report Tags

The `getReportTags()` method is used to retrieve a list of report tags. These tags can be utilized for reporting specific content or behavior, aiding in moderation and content management.

## Steps to Retrieve Report Tags

1. Create a [`GetReportTagRequest`](#getreporttagrequest) object with the required type.
2. Call the `getReportTags()` function using the instance of the `LMChatClient` class.
3. Use the response LMResponse&lt;[`GetReportTagResponse`](#getreporttagresponse)&gt; to fetch the list of report tags.

```dart
GetReportTagRequest request = (GetReportTagRequestBuilder()
                    ..type(1)) // Provide the type
                    .build();

final LMResponse<GetReportTagResponse> response = await lmChatClient.getReportTags(request);

if (response.success) {
  // Use the retrieved report tags
  handleReportTags(response.data.reportTags);
} else {
  // Handle error
  handleError(response);
}
```

:::tip
The `type` parameter helps categorize and fetch specific types of report tags. Ensure you provide a valid type as per your application's context.
:::

## Models

### GetReportTagRequest

List of parameters for the `GetReportTagRequest` class:

| Variable | Type | Description                  | Optional |
| -------- | ---- | ---------------------------- | -------- |
| `type`   | int  | Type of report tags to fetch |          |

### GetReportTagResponse

List of parameters for the `GetReportTagResponse` class:

| Variable     | Type                                | Description                   | Optional           |
| ------------ | ----------------------------------- | ----------------------------- | ------------------ |
| `reportTags` | List&lt;[ReportTag](#reporttag)&gt; | List of retrieved report tags | :heavy_check_mark: |

### ReportTag

| Variable | Type   | Description            | Optional |
| -------- | ------ | ---------------------- | -------- |
| `id`     | int    | ID of the report tag   |          |
| `name`   | String | Name of the report tag |          |



================================================
File: chat/Flutter/Data/Moderation/post-reports.md
================================================
---
sidebar_position: 1
title: Post Reports
slug: /flutter/data/post-reports
---

# Post Reports

The `postReport()` method is used to submit a report for moderation purposes. This method allows users to report specific entities, such as messages or profiles, providing details like tags and reasons for the report.

## Steps to Post a Report

1. Create a [`PostReportRequest`](#postreportrequest) object with the required details.
2. Call the `postReport()` function using the instance of the `LMChatClient` class.
3. Handle the response (`LMResponse<void>`) to confirm the report submission.

```dart
PostReportRequest request = (PostReportRequestBuilder()
                    ..tagId(1) // Provide the report tag ID
                    ..reason("Inappropriate content") // Optional
                    ..entityId("ENTITY_ID") // Provide the ID of the entity
                    ..entityCreatorId("CREATOR_ID") // Optional
                    ..entityType(1)) // Optional
                    .build();

final LMResponse<void> response = await lmChatClient.postReport(request);

if (response.success) {
  // Handle successful report submission
  handleSuccess();
} else {
  // Handle error
  handleError(response);
}
```

:::tip
The `tagId` and `entityId` parameters are mandatory. Use appropriate tags and entity details based on your application's moderation requirements.
:::

## Models

### PostReportRequest

List of parameters for the `PostReportRequest` class:

| Variable          | Type   | Description                                          | Optional           |
| ----------------- | ------ | ---------------------------------------------------- | ------------------ |
| `tagId`           | int    | ID of the report tag                                 |                    |
| `reason`          | String | Reason for the report                                | :heavy_check_mark: |
| `entityId`        | String | ID of the entity being reported                      |                    |
| `entityCreatorId` | String | ID of the creator of the reported entity             | :heavy_check_mark: |
| `entityType`      | int    | Type of the entity (e.g., message, user, post, etc.) | :heavy_check_mark: |



================================================
File: feed/analytics_events.md
================================================
---
sidebar_position: 9
title: Feed Analytics Events
slug: /analytics-events
---

The SDK has in built analytics events that are trigged for the below listed events. You can track those using tools like [Segment](https://segment.com/), [Mixpanel](https://mixpanel.com/), [Clevertap](https://clevertap.com/) etc.

:::note
The event name would be prefixed as LM_EventName
:::

## Social and QnA Theme

| **Event Name**            | **Event Category** | **Event Description**                                         | **Event Properties**                                                                                                                                                                                                                                                                       |
| ------------------------- | ------------------ | ------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| Notification Clicked      | Notification       | user taps on the bell icon and lands on the notification page | -                                                                                                                                                                                                                                                                                          |
| Notification Recieved     | Notification       | Notification recieved by user device                          | -                                                                                                                                                                                                                                                                                          |
| Post creation started     | Feed               | user clicks on "New Post" CTA                                 | post_id                                                                                                                                                                                                                                                                                    |
| Clicked on Attachment     | Feed               | User clicks on any option to attach attachments in post       | post_id <br/> type (photo, video, file)                                                                                                                                                                                                                                                    |
| User tagged in a post     | Feed               | User tags another user while creating the post                | tagged_user_id <br/> tagged_user_count <br/> post_id                                                                                                                                                                                                                                       |
| Link attached in the post | Feed               | User attaches a link to the post                              | link <br/> post_id                                                                                                                                                                                                                                                                         |
| Image attached to post    | Feed               | User attaches an image to the post                            | image_count (in case of multiple images attached) <br/> post_id                                                                                                                                                                                                                            |
| Video attached to post    | Feed               | User attaches a video to the post                             | video_count (in case of multiple videos attached) <br/> post_id                                                                                                                                                                                                                            |
| Document attached in post | Feed               | User attaches a file to the post                              | - document_count (in case of multiple documents attached) <br/> - post_id                                                                                                                                                                                                                  |
| Post creation completed   | Feed               | User clicks on "Post" after completing the post creation      | - user_tagged (yes, no) <br/> - tagged_users_count <br/> tagged_users_id <br/> - link_attached (yes, no) <br/> - link <br/> - image_attached (yes, no) <br/> - image_count <br/> - video_attached (yes, no) <br/> - video_count <br/> - document_attached (yes, no) <br/> - document_count |
| Post pinned               | Feed               | CM pins a post by choosing "Pin this post" from the menu      | - created_by_id (ID of the user who created the post) <br/> - post_id <br/> - post_type (text, image, video, document, link)                                                                                                                                                               |
| Post unpinned             | Feed               | CM unpins a post by choosing "Unpin this post" from the menu  | - created_by_id (ID of the user who created the post) <br/> - post_id <br/> - post_type (text, image, video, document, link)                                                                                                                                                               |
| Post edited               | Feed               | User selects "Edit" from the post menu                        | - created_by_id (ID of the user who created the post) <br/> - post_id <br/> - post_type (text, image, video, document, link)                                                                                                                                                               |
| Post reported             | Feed               | User selects a report from the post menu                      | - created_by_id (ID of the user who created the post) <br/> - post_id <br/> - report_reason (nudity, inappropriate_language, hate_speech, terrorism, spam, others) <br/> - post_type (text, image, video, document, link)                                                                  |
| Post deleted              | Feed               | User deletes a post created by them or CM deletes a post      | - user_state (member, CM) <br/> - user_id (ID of the user who created the post if CM deletes it) <br/> - post_id <br/> - post_type (text, image, video, document, link)                                                                                                                    |
| Feed opened               | Feed               | User lands on the feed screen                                 | feed_type (universal_feed, following_feed)                                                                                                                                                                                                                                                 |
| Like list open            | Feed               | User taps on the like count and views the list of users       | post_id                                                                                                                                                                                                                                                                                    |
| Comment list open         | Feed               | User taps on "Comments" and views the comments on the post    | post_id                                                                                                                                                                                                                                                                                    |
| Comment deleted           | Feed               | Post creator deletes a comment                                | - post_id <br/> - comment_id                                                                                                                                                                                                                                                               |
| Comment reported          | Feed               | Post creator reports a comment                                | - post_id <br/> - user_id (ID of the user whose comment is being reported) <br/> - comment_id <br/> - reason (nudity, inappropriate_language, hate_speech, terrorism, spam, others)                                                                                                        |
| Comment posted            | Feed               | User adds comments to a post                                  | post_id <br/> comment_id                                                                                                                                                                                                                                                                   |
| Reply posted              | Feed               | User adds a reply to a comment                                | - user_id (ID of the user whose comment is being replied) <br/> - post_id <br/> - comment_id <br/> - comment_reply_id                                                                                                                                                                      |
| Reply deleted             | Feed               | Post creator deletes a reply                                  | - post_id <br/> - comment_id <br/> - comment_reply_id                                                                                                                                                                                                                                      |
| Reply reported            | Feed               | Post creator reports a reply                                  | - post_id <br/> - comment_id <br/> - comment_reply_id <br/> - user_id (ID of the user whose comment reply is being reported) <br/> - reason (nudity, inappropriate_language, hate_speech, terrorism, spam, others)                                                                         |

## Video Feed Theme

:::info
Video feed is only available in Android. Please reach out to hi@likeminds.community if you are looking for a SDK in other tech stacks.
:::

| **Event Name**       | **Event Category** | **Event Description**                                   | **Event Properties**                                                                                                                                                                                                                  |
| -------------------- | ------------------ | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| Explore Reels Opened | Feed               | Triggered when a user opens the “Explore Reels” section | uuid (id of the logged-in user)                                                                                                                                                                                                       |
| Reel Viewed          | Feed               | Triggered when a user views a reel after x secs.        | uuid (id of the logged-in user) <br/> reel_id (id of the video watched) <br/> watch_duration (time for video is watched) <br/> total_duration (total duration of the video)                                                           |
| Reel Swiped          | Feed               | Triggered when a user swipes on a reel                  | uuid (id of the logged-in user) <br/> previous_reel_id (id of the previous video swiped) <br/> previous_reel_watch_duration (time for previous video is watched) <br/> previous_total_duration (total duration of the previous video) |
| Reel Liked           | Feed               | Triggered when a user likes a reel.                     | uuid (id of the logged-in user) <br/> reel_id (id of the video liked)                                                                                                                                                                 |
| Reel Unliked         | Feed               | Triggered when a user unlikes a reel.                   | uuid (id of the logged-in user) <br/> reel_id (id of the video unliked)                                                                                                                                                               |
| Reel Reported        | Feed               | Triggered when a user reports a reel.                   | uuid (id of the logged-in user) <br/> reel_id (id of the video reported) <br/> reel_created_by_uuid (id of the creator of the video) <br/> report_reason (reason for the report)                                                      |
| No More Reels Shown  | Feed               | Triggered when a user reaches the end of the reel feed. | uuid (id of the logged-in user)                                                                                                                                                                                                       |



================================================
File: feed/intro.md
================================================
---
slug: /
sidebar_position: 1
title: "Overview"
---

## Introduction

[![Simple HLD](../static/img/simple_hld.webp)](https://app.eraser.io/workspace/NB7otbW5v56uysKmHYQu)

Welcome to LikeMinds Feed SDK Getting Started Guide! In this guide, we will walk you through the initial steps to integrate and utilize the LikeMinds Feed SDK in your application. LikeMinds is a powerful platform that enables developers to seamlessly integrate Feed functionalities into their applications, enhancing user engagement and communication.
The feed feature enables you to create engaging feed-based experiences within your application. You can display dynamic content, such as posts, comments, likes, and shares, to facilitate user interactions and discussions.

This guide is designed to provide you with an overview of the LikeMinds Feed SDK and its components. We will cover the setup process, including obtaining an API key from the LikeMinds dashboard, and explain the key concepts and functionalities you need to know to get started quickly.

## Components of LikeMinds

LikeMinds Feed SDK comprises various components that provide a seamless Feed experience. These components include:

1. **Frontend SDKs:** SDKs that power Feed inside your application to provide your users a seamless in-community. We also have open-source UI kits to help you get up and running effortlessly.
2. **Dashboard:** The LM dashboard provides options to setup manage users, channels, and features and setup permissions. The dashboard also features moderation capabilities.
3. **Backend REST APIs:** The Backend REST APIs provide the infra to power the in-app community with scalable realtime communication.

![HLD](../static/img/LM_HLD@latest.png)

## Generate API Key

You'll need an API key to integrate the LikeMinds Feed SDK into your application. Follow these steps to obtain your API key from the LikeMinds dashboard:

1. Go to [LikeMinds Dashboard](https://dashboard.likeminds.community) and sign in to your account. You can create one using your work email address if you don't have an account.
   If you are a first time user you would see an option to **“Add your first app”.** You can do so by clicking on the given button

   ![LikeMinds Dashboard](../static/img/dashboard-create-new-app.webp)

2. Now you can navigate to the settings on the sidebar. Under general section you should be able to see an auto generated API key for your account.

   ![Get New API key](../static/img/get-api-key.webp)

3. Make sure to securely store your API key, as it will be required for authentication when making requests to the LikeMinds APIs.

You are now all set to integrate LikeMinds Feed to in your mobile/web application. Check the respective documentation guides for your application.

## SDK size

| Tech Stack                                      | Size    |
| ----------------------------------------------- | ------- |
| Android                                         | 4.8 MB  |
| iOS                                             | 9.3 MB  |
| Flutter (Android)                               | 10.3 MB |
| Flutter (iOS)                                   | 17.3 MB |
| ReactNative (Android, with all dependencies)    | 5.7 MB  |
| ReactNative (Android, without all dependencies) | 5.7 MB  |
| ReactNative (iOS, with all dependencies)        | 5.2 MB  |
| ReactNative (iOS, without all dependencies)     | 5.2 MB  |
| ReactJS                                         | 3.7 MB  |



================================================
File: feed/notification-list.md
================================================
---
sidebar_position: 3
title: Notification List
---

| Receiver        | Notification Category | Notification Sub-category | Trigger Conditions + frequency                                                                                  | Message + CTA                                                                                                                                                                                              | Link Outcome                                           |
| --------------- | --------------------- | ------------------------- | --------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------ |
| Post creator    | Feed                  | Post Liked                | Once a new like is received and the total like count is part of the fibonacci series. (1, 2, 3, 5, 8, 13, 21,…) | Title: New Like! <br/> Text(First like): `user` liked your post. <br/> Text(Second like): `user` and 1 other liked your post. <br/>Text(n like): `user` and n others liked your post.                      | Open the post detail page                              |
| Post creator    | Feed                  | Post Comment              | Once a new comment is posted                                                                                    | Title: New Comment! Text(First like): `user` commented on your post. <br/> Text(Second like): `user` and 1 other commented on your post. <br/> Text(n like): `user` and `n` others commented on your post. | Open the post detail page scrolled to the bottom       |
| Commenter       | Feed                  | Comment Reply             | Once a new reply to the comment is posted                                                                       | Title: New Reply! Text(First like): `user` comment. <br/> Text(Second like): `user` and 1 other replied to your comment. <br/> Text(n like): `user` and `n` others replied to your comment.                | Open the post detail page scrolled to the comment      |
| Tagged Member   | Feed                  | Post Tag                  | Once a user is tagged in a post                                                                                 | Title: You are tagged! Text: `creator` tagged you in a post.                                                                                                                                               | Open the post detail page                              |
| Tagged Member   | Feed                  | Comment Tag               | Once a user is tagged in a comment                                                                              | Title: You are tagged! Text: `creator` tagged you in a comment.                                                                                                                                            | Open the post detail page with the comment highlighted |
| Tagged Member   | Feed                  | Reply Tag                 | Once a user is tagged in a comment reply                                                                        | Title: You are tagged! <br/> Text: `creator` tagged you in a reply.                                                                                                                                        | Open the post detail page with the comment highlighted |
| Creator         | Feed                  | Moderation delete post    | Once the post has been deleted by an admin from the app (or the dashboard)                                      | Title: Post deleted Text: Your post has been deleted as it violates community guidelines. <br/>Reason: reason                                                                                              | Do nothing.                                            |
| Comment Creator | Feed                  | Moderation delete comment | Once the comment has been deleted by an admin from the app (or the dashboard)                                   | Title: Comment deleted Text: Your comment has been deleted as it violates community guidelines. <br/>Reason: reason                                                                                        | Post detail page                                       |
| Reply Creator   | Feed                  | Moderation delete reply   | Once the reply has been deleted by an admin from the app (or the dashboard)                                     | Title: Reply deleted Text: Your Reply has been deleted as it violates community guidelines. Reason: reason                                                                                                 | Post detail page                                       |

## Variable Description

| Variable  | Definition                                        |
| --------- | ------------------------------------------------- |
| `user`    | The user user who performed an actio              |
| `creator` | The creator of the content being interacted with. |



================================================
File: feed/notification-using-http-v1.md
================================================
---
sidebar_position: 2
title: Setup Notifications
---

# Setup Notifications using FCM HTTP v1

Firebase will be deprecating the legacy FCM APIs and replacing them with the new HTTP v1 API. This also introduces changes to the way the firebase project is authenticated on server-side. For more information please refer to the official announcement by Firebase [here](https://firebase.google.com/docs/cloud-messaging/migrate-v1)

From now, instead of a firebase server key, a JSON file that contains the authentication information related to the project will be required for the notification service to work.

## Firebase Integration

LikeMind SDK now requires service account credentials in the form of a json file that can be obtained from the gcp service account associated to your firebase project to send notifications for messages and other things.

### Step 1: Generate Service Account File for FCM

1.  Go to [Firebase Console](https://console.firebase.google.com/). If you don't have a Firebase project, please create a new project.

     <img src="/img/fcm_server_key_1.png" alt="FCM Server - Firebase Console"/>

2.  Select your project and move to **Project Overview**

3.  Click on the settings icon and select **Project Settings**

     <img src="/img/fcm_server_key_2.png" alt="FCM Server - Project Settings"/>

4.  Go to **Cloud Messaging > Manage service accounts**. clicking this link will take you to the service account section in your gcp console. Make sure you are logged in to gcp from the correct account.

     <img src="/img/fcm_http_v1_1.png" alt="FCM Server - Manage Service Accounts"/>

5.  Click on the name of the service account that is attached to your firebase project. This will take you to the page where service account details can be accessed.

     <img src="/img/fcm_http_v1_2.png" alt="FCM Server - Service Account Details"/>

6.  On clicking the keys tab, you will see the buton that allows you to generate new keys.

     <img src="/img/fcm_http_v1_3.png" alt="FCM Server - Service Account Keys"/>

7.  Click **ADD KEY** and choose **Create new key > JSON > CREATE**

     <img src="/img/fcm_http_v1_4.png" alt="FCM Server - Create Key"/>
     <img src="/img/fcm_http_v1_5.png" alt="FCM Server - Key Type"/>

8.  The JSON file that includes the credentials to your gcp service account should now be downloaded to your system. Keep this file safe.

    <img src="/img/fcm_http_v1_6.png" alt="FCM Server - Service Account JSON File"/>

9.  The final step is to upload the JSON file to the LikeMinds server. The file can be uploaded either from the dashboard itself or by manually calling the upload API. The manual upload consists of the following steps:

    a. Generate OTP using GET `/otp/generate` and params - `country_code` , `mobile_no` ***(dashboard user mobile no.)***

    ```bash
    curl --location 'https://auth.likeminds.community/otp/generate?country_code=91&mobile_no=1234567890'
    ```

    b. Generate `auth_token` using GET `/otp/verify` and params - `country_code` , `mobile_no` ***(dashboard user mobile no.)*** & `otp`.

    ```bash
    curl --location 'https://auth.likeminds.community/otp/verify?country_code=<your_country_code>&mobile_no=<your_mobile_number>&otp=<your_otp>'
    ```

    c. Update `gcp_service_account_file` using API - PUT `/sdk/project` with Headers: `Authorization:<auth_token generated above>` , `x-api-key: <api_key of community>` & Request Body: `gcp_service_account_file : <service account json file contents>`

    ```bash
    curl --location --request PUT 'https://auth.likeminds.community/sdk/project' \
    --header 'Authorization: <auth_token>' \
    --header 'x-api-key: <api_key>' \
    --header 'x-platform-type: dashboard' \
    --data-raw '{
        "gcp_service_account_file": {
            "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
            "auth_uri": "https://accounts.google.com/o/oauth2/auth",
            "client_email": "firebase-adminsdk@your-project-name.iam.gserviceaccount.com",
            "client_id": "1071026063271489",
            "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk%40your-project-name.iam.gserviceaccount.com",
            "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCnONrfmEW5eMAQ\nYBJh9jYzJ0WA7W6KU04k9O8KloDYuGshxgkGkbuovAycYqCWO5fz0dA4KjUWiMCz\nV1ACr+rL86SrXQaTx1KipHpQmZ+Lf8JpK1xRgNthdFH7Qzl9i7cq8Rxtl5h2ny/o\nI/qaznMfTcPy+hBxRaIj7RwZpk5MkCfDLJXrUmak23kH0IXgmQEm7v5NjTrQvJr+\nStU1DuR9uWEmoug8UWE2d//NwyJX2r7KJ00TKeVOMBGq/o0yQOjw/z20pgMRIzwg\neErKjmCJv+q7AiCLb61UzMYtVJBifETbt1jhVVYduwd+xKZEOpm29P8oEk\nQbwulHh7gkgb8bEfffFNtPw7jN7q21zEWC8ZxEU2KQHgHQwYe+fRIxrN9euNMY6D\neRYXSFoqm0qXZ4N5ofJapiH1eLBNA6u+s2jrnHfFsv+Ga3aKqLqvzLkqHqWKavd5\nHGw52Z7Fo2BKAetSw9NBh246Taf798pczg==\n-----END PRIVATE KEY-----\n",
            "private_key_id": "0310b75bf8c217d4983965200",
            "project_id": "your-project-name",
            "token_uri": "https://oauth2.googleapis.com/token",
            "type": "service_account",
            "universe_domain": "googleapis.com"
        }
    }'
    ```

    :::info

    Note: Make sure to replace api*key , auth_token & gcp_service_account_file contents.*

    :::



================================================
File: feed/notification.md
================================================
---
sidebar_position: 10
title: Setup Notifications (Deprecated)
---

# Setup Notifications

:::warning

This method will be deprecated after 20th June 2024. Please check this guide to enable [notification](./notification-using-http-v1)

:::

We allow system notification for the chat related real time notifications to notify users about new chat and changes in the permission they have.

## Firebase Integration

LikeMind SDK requires your server key to send notification of messages or other things.

### Step 1: Generate Server Key for FCM

:::info
If you already have your server key, skip this step and go directly to `Step 2`
:::

1. Go to [Firebase Console](https://console.firebase.google.com/). If you don't have a Firebase project, please create a new project.

![FCM Server - Firebase Console](../static/img/fcm_server_key_1.png)

2. Select your project and move to **Project Overview**

3. Click on the settings icon and select **Project Settings**

![FCM Server - Project Settings](../static/img/fcm_server_key_2.png)

4. Go to **Cloud Messaging > Project credentials** and copy your server key.
   ![FCM Server - Server Key](../static/img/fcm_server_key_3.png)

### Step 2: Register Server key to LikeMinds Dashboard

1. Sign in to [dashboard](http://dashboard.likeminds.community/) and go to **Settings > General**

2. Add your server key in **Firebase Server Key**
   ![FCM Server - Server Key](../static/img/fcm_server_key_4.png)



================================================
File: feed/Flutter/Theming.md
================================================
---
sidebar_position: 2
title: Theming
slug: /flutter/feed/theming
---

## Getting Started with Theming

The LikeMinds Feed SDK simplifies the process of customizing the appearance of all UI widgets. Much like Flutter framework, it offers a dedicated class for theming.

With `LMFeedTheme`, you can adjust various aspects of UI widgets by defining attributes through `LMFeedThemeData`.

Similar to Flutter’s `Theme` and `ThemeData`, LikeMinds Feed uses a top-level configuration to apply theming information throughout your application. You can customize the appearance of all UI widgets provided by the LikeMinds Feed SDK by adjusting properties such as background color, primary color, and widget styles through the `LMFeedTheme` class. To implement your custom theme, create an instance of `LMFeedThemeData` and pass it when initializing the SDK with `LMFeedCore.instance.initialize()`.


## Detailed Overview of LMFeedThemeData

The `LMFeedThemeData` class allows you to customize various aspects of the LikeMinds Feed SDK's UI. By defining properties in the `LMFeedThemeData` class, you can control the appearance of all UI widgets to ensure a consistent theme throughout your application.

**Constructor for `LMFeedThemeData`:**

```dart
factory LMFeedThemeData.light({
    // Color-related properties
    Color? primaryColor,
    Color? backgroundColor,
    Color? secondaryColor,
    Color? shadowColor,
    Color? disabledColor,
    Color? errorColor,
    Color? inActiveColor,
    Color? tagColor,
    Color? hashTagColor,
    Color? linkColor,
    Color? container,
    Color? onContainer,
    Color? onPrimary,
    Color? textSecondary,
    
    // Style-related properties
    LMFeedPostStyle? postStyle,
    LMFeedPostReviewBannerStyle? reviewBannerStyle,
    LMFeedPostHeaderStyle? headerStyle,
    LMFeedPostTopicStyle? topicStyle,
    LMFeedPostContentStyle? contentStyle,
    LMFeedPostMediaStyle? mediaStyle,
    LMFeedPostFooterStyle? footerStyle,
    LMFeedCommentStyle? commentStyle,
    LMFeedCommentStyle? replyStyle,
    LMFeedButtonStyle? feedButtonStyle,
    LMFeedIconStyle? feedIconStyle,
    LMFeedTextFieldStyle? textFieldStyle,
    LMFeedDialogStyle? dialogStyle,
    LMFeedPopUpMenuStyle? popUpMenuStyle,
    LMFeedComposeScreenStyle? composeScreenStyle,
    LMFeedLoaderStyle? loaderStyle,
    LMFeedBottomSheetStyle? bottomSheetStyle,
    LMFeedSnackBarStyle? snackBarTheme,
});
```

### Color-related Properties:

- `primaryColor`: Sets the primary color for the app.
- `backgroundColor`: Defines the background color of the app.
- `secondaryColor`: Customizes the secondary color used in the theme.
- `shadowColor`: Sets the color of shadows used in the UI.
- `disabledColor`: Specifies the color for disabled elements.
- `errorColor`: Defines the color used for error messages.
- `inActiveColor`: Sets the color for inactive elements.
- `tagColor`: Customizes the color of tags.
- `hashTagColor`: Defines the color for hashtags.
- `linkColor`: Sets the color for hyperlinks.
- `container`: Sets the background color for containers.
- `onContainer`: Defines the text color on containers.
- `onPrimary`: Sets the color for text on primary elements.
- `textSecondary`: Defines the color for secondary text.

### Style-related Properties:

- `postStyle`: Customizes the style of post widgets.
- `reviewBannerStyle`: Defines the style for review banners.
- `headerStyle`: Customizes the style of post headers.
- `topicStyle`: Sets the style for topics in posts.
- `contentStyle`: Customizes the style of post content.
- `mediaStyle`: Defines the style for media elements in posts.
- `footerStyle`: Sets the style for post footers.
- `commentStyle`: Customizes the style of comments.
- `replyStyle`: Defines the style for replies.
- `feedButtonStyle`: Sets the style for buttons in the feed.
- `feedIconStyle`: Customizes the style of icons in the feed.
- `textFieldStyle`: Defines the style for text fields.
- `dialogStyle`: Sets the style for dialogs.
- `popUpMenuStyle`: Customizes the style of pop-up menus.
- `composeScreenStyle`: Defines the style for the compose screen.
- `loaderStyle`: Customizes the style of loaders.
- `bottomSheetStyle`: Defines the style for bottom sheets.
- `snackBarTheme`: Sets the style for snack bars.


## Applying Custom Themes in Your Application

Here’s an example of how to apply custom colors and styles using `LMFeedThemeData`. In this example, we modify the primary color, background color, and post widget style:

```dart
// Create an instance of `LMFeedThemeData` using the `LMFeedThemeData.light()` factory constructor
LMFeedThemeData customThemeData = LMFeedThemeData.light(
  // Set primary color to green
  primaryColor: Colors.green,
  // Set background color to grey
  backgroundColor: Colors.grey,
  // Customize post style with padding, margin, and background color
  postStyle: LMFeedPostStyle.basic().copyWith(
    padding: const EdgeInsets.all(15.0),
    margin: const EdgeInsets.only(top: 5.0),
    backgroundColor: Colors.grey,
  ),
);

// Initialize LikeMindsFeed SDK with the custom theme
void main() {
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize LikeMindsFeed SDK
  LMFeedCore.instance.initialize(
    theme: customThemeData,
  );

  runApp(MyApp());
}
```

In this example, `LMFeedThemeData` is configured using the `theme` parameter in the `LMFeedCore.instance.initialize()` method, applying the custom theme globally.

## Changing Fonts
The LikeMinds Feed SDK uses the font specified in your MaterialApp for all text elements by default. If you want to customize the font across the entire SDK, you can do so by configuring the font family in the ThemeData of your MaterialApp. This approach ensures a consistent look and feel for text elements throughout the LikeMinds Feed UI.

For further guidance on customizing fonts in Flutter, refer to the official Flutter documentation on fonts [here](https://docs.flutter.dev/cookbook/design/fonts).



================================================
File: feed/Flutter/_category_.json
================================================
{
    "label": "Flutter",
    "position": 5,
    "link": {
      "type": "generated-index",
      "description": "Flutter Documentation for LikeMinds Feed SDK"
    }
}



================================================
File: feed/Flutter/getting-started.md
================================================
---
sidebar_position: 1
title: Getting Started
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Getting Started

The LikeMinds Flutter Feed SDK provides a robust solution to seamlessly integrate dynamic and engaging feed experiences into your Flutter application. This guide walks you through setting up the LikeMinds Flutter Feed SDK, empowering you to deliver personalized content efficiently. Obtain the necessary API key from the [LikeMinds dashboard](https://dashboard.likeminds.community).

## Prerequisites

Before getting started, ensure you have:

1. **Flutter Version**: Your Flutter version should be **3.19.0** or higher.

## Step-by-Step Integration Guide

Follow these steps to integrate the LikeMinds Feed SDK into your Flutter application:

### Step 1 - Installation

Open the terminal, and run the following command in your Flutter project's directory.

```shell
flutter pub add likeminds_feed_flutter_core
```

### Step 2 - Setup LikeMinds Feed

Setup the LMFeedCore package in the main function with the following code

<Tabs groupId="feed-theme" queryString>
<TabItem value="social-feed" label="Social Feed">

```dart
main(){
  // Call setup function before the runApp() function
  await LMFeedCore.instance.initialize(
    // configure social feed theme
    config: LMFeedConfig(
      feedThemeType: LMFeedThemeType.social,
    ),
  );
  ...
  runApp(YourApp());
}
```

</TabItem>
<TabItem value="qna-feed" label="QnA Feed">

```dart
main(){
  // Call setup function before the runApp() function
  await LMFeedCore.instance.initialize(
    // configure qna feed theme
    config: LMFeedConfig(
      feedThemeType: LMFeedThemeType.qna,
    ),
  );
  ...
  runApp(YourApp());
}
```

</TabItem>
<TabItem value="video-feed" label="Video Feed">

```dart
main(){
  // Call setup function before the runApp() function
  await LMFeedCore.instance.initialize(
    // configure video feed theme
    config: LMFeedConfig(
      feedThemeType: LMFeedThemeType.videoFeed,
    ),
  );
  ...
  runApp(YourApp());
}
```

</TabItem>
</Tabs>

### Step 3 - Initiate User Session

You have successfully initiated the LMFeedCore. Now, you have to initiate a user session. You can initiate the user session using one of the following two approaches:

#### 1. With API Key (Client Side Authentication)

This approach should be used when you want to manage LikeMinds authentication tokens on frontend. In this case you provide API Key directly to LikeMinds Feed SDK, which will be used to initiate a user session by calling LMFeedCore.showFeedWithApiKey().

```dart
// initiate user session, use the response to check for any errors
 LMResponse<void> response = await LMFeedCore.instance.showFeedWithApiKey(
  apiKey : "YOUR_API_KEY",
  uuid : "USER_ID",
  userName : "USER_NAME",
);

```

#### 2. Without API Key (Server Side Authentication)

This approach should be used when you want to manage LikeMinds authentication tokens on your backend server. In this case you eliminate the need to expose your API Key in your client app and your backend server is responsible for calling the Initiate API to obtain the accessToken and refreshToken which is passed to LMFeedCore.showFeed() to validate the user session.

1.  Create a function to get accessToken and refreshToken from your backend using [initiate API](https://docs.likeminds.community/rest-api/#/operations/sdkInitate)

```dart
Future<(String, String)> getTokens() async {
...
// implementation
...
return (accessToken, refreshToken);
}
```

2.  While setting up the LMFeedCore in the main function pass `LMFeedCoreCallback`, which will be invoked when the `accessToken` and `refreshToken` expire.

:::info
`LMFeedCoreCallback` has two callbacks:

1. **onAccessTokenExpiredAndRefreshed:** This callback is triggered when the provided `accessToken` expires and is refreshed internally using the `refreshToken`.

2. **onRefreshTokenExpired:** This callback is triggered when the provided `refreshToken` expires. In this case, you need to provide a new `accessToken` and `refreshToken` from your backend function using our [initiate API](https://docs.likeminds.community/rest-api/#/operations/sdkInitate).

:::

<Tabs groupId="feed-theme" queryString>
<TabItem value="social-feed" label="Social Feed">

```dart
main(){
// Call setup function before the runApp() function
await LMFeedCore.instance.initialize(
  // configure social feed theme
  config: LMFeedConfig(
    feedThemeType: LMFeedThemeType.social,
  ),
  lmFeedCallback: LMFeedCoreCallback(
    onAccessTokenExpiredAndRefreshed: (accessToken, refreshToken) {
      debugPrint("Access token expired and refreshed");
    },
    onRefreshTokenExpired: () async {
      // get accessToken, refreshToken from your backend
      final (accessToken, refreshToken) = await getTokens();
      // return `LMAuthToken` with `accessToken` and `refreshToken` received from your backend
      return (LMAuthTokenBuilder()
            ..accessToken(accessToken!)
            ..refreshToken(refreshToken!))
          .build();
    },
  ),
);
...
runApp(YourApp());
}
```

</TabItem>
<TabItem value="qna-feed" label="QnA Feed">

```dart
main(){
// Call setup function before the runApp() function
await LMFeedCore.instance.initialize(
  // configure qna feed theme
  config: LMFeedConfig(
    feedThemeType: LMFeedThemeType.qna,
  ),
  lmFeedCallback: LMFeedCoreCallback(
    onAccessTokenExpiredAndRefreshed: (accessToken, refreshToken) {
      debugPrint("Access token expired and refreshed");
    },
    onRefreshTokenExpired: () async {
      // get accessToken, refreshToken from your backend
      final (accessToken, refreshToken) = await getTokens();
      // return `LMAuthToken` with `accessToken` and `refreshToken` received from your backend
      return (LMAuthTokenBuilder()
            ..accessToken(accessToken!)
            ..refreshToken(refreshToken!))
          .build();
    },
  ),
);
...
runApp(YourApp());
}
```

</TabItem>
<TabItem value="video-feed" label="Video Feed">

```dart
main(){
// Call setup function before the runApp() function
await LMFeedCore.instance.initialize(
  // configure video feed theme
  config: LMFeedConfig(
    feedThemeType: LMFeedThemeType.videoFeed,
  ),
  lmFeedCallback: LMFeedCoreCallback(
    onAccessTokenExpiredAndRefreshed: (accessToken, refreshToken) {
      debugPrint("Access token expired and refreshed");
    },
    onRefreshTokenExpired: () async {
      // get accessToken, refreshToken from your backend
      final (accessToken, refreshToken) = await getTokens();
      // return `LMAuthToken` with `accessToken` and `refreshToken` received from your backend
      return (LMAuthTokenBuilder()
            ..accessToken(accessToken!)
            ..refreshToken(refreshToken!))
          .build();
    },
  ),
);
...
runApp(YourApp());
}
```

</TabItem>
</Tabs>

3.  Use the `getTokens()` function, to fetch the tokens to login without API Key. Upon receiving the `accessToken` and `refreshToken`, call `LMFeedCore.instance.showFeedWithoutApiKey()` function with these tokens.

```dart
// get accessToken, refreshToken from your backend
final (accessToken, refreshToken) = await getTokens();
LMResponse response =
    await LMFeedCore.instance.showFeedWithoutApiKey(
      accessToken : "YOUR_ACCESS_TOKEN",
      refreshToken : "YOUR_REFRESH_TOKEN",
    );

```

### Step 4 - Navigation to the feed

On successful response of the above snippet you can simply navigate to the Feed Screen, and start using Feed in your app

<Tabs groupId="feed-theme" queryString>
<TabItem value="social-feed" label = "Social Feed">

```dart

if (response.success) {
  // create route with LMFeedSocialScreen
  MaterialPageRoute route = MaterialPageRoute(
    builder: (context) => const LMFeedSocialScreen(),
  );
  // navigate to LMFeedSocialScreen
  Navigator.pushReplacement(context, route);
}

```

</TabItem>

<TabItem value="qna-feed" label = "QnA Feed">

```dart

if (response.success) {
  // create route with LMFeedQnAScreen
  MaterialPageRoute route = MaterialPageRoute(
    builder: (context) => const LMFeedQnAScreen(),
  );
  // navigate to LMFeedQnAScreen
  Navigator.pushReplacement(context, route);
}

```

</TabItem>
<TabItem value="video-feed" label = "Video Feed">

```dart

if (response.success) {
  // create route with LMFeedVideoFeedScreen
  MaterialPageRoute route = MaterialPageRoute(
    builder: (context) => const LMFeedVideoFeedScreen(),
  );
  // navigate to LMFeedVideoFeedScreen
  Navigator.pushReplacement(context, route);
}

```

</TabItem>
</Tabs>

:::tip
By choosing the appropriate method based on your backend infrastructure and security preferences, you can seamlessly integrate the Feed SDK into your application while ensuring secure and efficient session management.
:::

### Congratulations! Your integration is now complete.

#### Welcome to the future of digital communities and social networks.

<br></br>

<p align="center">
  <img src="https://media0.giphy.com/media/11sBLVxNs7v6WA/giphy.gif?cid=7941fdc63p4lr2sp2zpav78j0zt0jrfvfo7ys4kbrvci4ee4&ep=v1_gifs_search&rid=giphy.gif&ct=g" alt="LMFeedAppbar"></img>
</p>


================================================
File: feed/Flutter/Core/_category_.json
================================================
{
  "label": "Core",
  "position": 3,
  "link": {
    "type": "generated-index",
    "description": "Documentation for LikeMinds Feed Flutter Core SDK"
  }
}



================================================
File: feed/Flutter/Core/analytics.md
================================================
---
sidebar_position: 5
title: Analytics
slug: /flutter/core/analytics-in-feed
---

# Analytics

This guide explains how to integrate and handle analytics events in the LikeMinds Feed
using the LikeMinds SDK. By leveraging analytics callbacks, you can track events such
as likes, comments, or navigation to specific screens, and forward this data to your
preferred analytics platform (e.g., Firebase, Mixpanel).

Refer to [Analytics Events](../../analytics_events.md) to see the list of events that are being tracked.

## Steps

### Step 1: Create an Analytics Callback

The `LMFeedBlocListener` class listens to analytics events triggered within the feed. The events can be captured using the [`LMFeedAnalyticsEventFired`](#lmfeedanalyticseventfired) model.

To handle events, create the analyticsBlocListener function.

```dart
void analyticsBlocListener(BuildContext context, LMFeedAnalyticsState state) {
  if (state is LMFeedAnalyticsEventFired) {
    // state is of type LMFeedAnalyticsEventFired
    // handle the event here
    // state variable will have all the data related
    // to the event
  }
}
```

### Step 2: Wrap the Root Widget with `LMFeedBlocListener`

To enable the analytics callback, wrap your root widget with the `LMFeedBlocListener`. This setup ensures that the `analyticsBlocListener` function is invoked whenever an analytics event is fired.

Here’s how you can wrap the widget:

```dart
LMFeedBlocListener(
  analyticsListener: analyticsBlocListener,
  child: YourRootWidget(),
),
```

## Models

### LMFeedAnalyticsEventFired

| **Property**      | **Type**                                                                                                                                                              | **Description**                                                                  |
| ----------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------- |
| `eventName`       | `String`                                                                                                                                                              | The name of the event fired.                                                     |
| `eventProperties` | `Map<String, dynamic>`                                                                                                                                                | Additional properties of the event (e.g., post ID, likes count).                 |
| `widgetSource`    | [`LMFeedWidgetSource?`](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/blob/master/packages/integration/lib/src/core/configurations/widget_source.dart) | The source of the widget that triggered the event (e.g., feedroom, post detail). |

## Conclusion

By following the above steps, you can seamlessly integrate analytics tracking into your LikeMinds Feed implementation. This setup enables you to monitor user interactions effectively and gain insights into feature usage.



================================================
File: feed/Flutter/Core/migration_doc.md
================================================
---
sidebar_position: 6
title: Migration Guide Feed Flutter SDK (v1.12.1 to v1.13.0)
slug: /flutter/core/guide/migration-guide-feed-flutter-sdk-v1.12.1-to-v1.13.0
---

# Migration Guide: Feed Flutter SDK (v1.12.1 to v1.13.0)

This guide provides an overview of the key changes in **v1.13.0** of the LikeMinds Feed Flutter SDK and instructions for updating your project from **v1.12.1**.

---

## Key Updates in v1.13.0

1. `LMFeedWidgetUtility` replaced by `LMFeedWidgetBuilderDelegate`:

   - Common widget builders are now handled by `LMFeedWidgetBuilderDelegate`.

2. Screen-Level Builder Delegates Introduced:
   - Builders for screen-specific elements (e.g., `floatingActionButtonBuilder`) are now moved to screen-level delegates such as `LMFeedSocialScreenBuilderDelegate`.
3. Screen-level Config Introduced:

   - It consist the specific screen level builder delegate. e.g, `LMFeedSocialScreenConfig` for `LMFeedSocialScreenBuilderDelegate`

---

### Migration Steps

#### Step 1: Upgrade the LikeMinds Feed Flutter SDK to v1.13.0 in pubspec.yaml

```yaml
likeminds_feed_flutter_core: ^1.13.0
```

#### Step 2: Update Common Widget Builders

Replace `LMFeedWidgetUtility` with `LMFeedWidgetBuilderDelegate` for common widget customization.

**Before v1.13.0:**

```dart
class ExampleWidgetUtility extends LMFeedWidgetUtility {
  @override
  Widget postWidgetBuilder(
      BuildContext context, LMFeedPostWidget post, LMPostViewData postViewData,
      {LMFeedWidgetSource source = LMFeedWidgetSource.universalFeed}) {
    return post.copyWith(
      style: post.style?.copyWith(backgroundColor: Colors.red),
    );
  }
}
```

**After v1.13.0:**

```dart
class ExampleBuilderDelegate extends LMFeedWidgetBuilderDelegate {
  @override
  Widget postWidgetBuilder(
      BuildContext context, LMFeedPostWidget post, LMPostViewData postViewData,
      {LMFeedWidgetSource source = LMFeedWidgetSource.universalFeed}) {
    return post.copyWith(
      style: post.style?.copyWith(backgroundColor: Colors.red),
    );
  }
}
```

---

#### Step 3: Implement Screen-Level Builders

For screen-specific customizations, such as the floating action button, extend the relevant screen-level delegate (e.g., `LMFeedSocialScreenBuilderDelegate`).

**Example:**

```dart
class ExampleLMFeedScreenBuilderDelegate extends LMFeedSocialScreenBuilderDelegate {
  @override
  Widget floatingActionButtonBuilder(
      BuildContext context, LMFeedButton floatingActionButton) {
    return floatingActionButton.copyWith();
  }
}
```

---

#### Step 4: Update SDK Initialization

Pass the widget builder and screen-level builder in the `LMFeedConfig` during SDK initialization.

**Before v1.13.0:**

```dart
LMFeedCore.instance.initialize(
    widget: ExampleWidgetUtility(),
);
```

**After v1.13.0:**

```dart
LMFeedCore.instance.initialize(
    config: LMFeedConfig(
      widgetBuilderDelegate: ExampleBuilderDelegate(),
      socialFeedScreenConfig: LMFeedSocialScreenConfig(
        builder: ExampleLMFeedScreenBuilderDelegate(),
      ),
    ),
);
```

---

### Summary of Changes

| **v1.12.1**                                       | **v1.13.0**                                                                   |
| ------------------------------------------------- | ----------------------------------------------------------------------------- |
| `LMFeedWidgetUtility` for all customizations.     | `LMFeedWidgetBuilderDelegate` for common widgets.                             |
| `floatingActionButtonBuilder` in `WidgetUtility`. | Moved to `LMFeedSocialScreenBuilderDelegate`.                                 |
| Single initialization using `widget`.             | Modular initialization with `LMFeedWidgetBuilderDelegate` and `LMFeedConfig`. |

---

### Key Methods Comparison

| **LMFeedWidgetUtility (v1.12.1)**       | **LMFeedWidgetBuilderDelegate (v1.13.0)** | **Notes**                                                  |
| --------------------------------------- | ----------------------------------------- | ---------------------------------------------------------- |
| `scaffold`                              | `scaffold`                                | No change.                                                 |
| `postWidgetBuilder`                     | `postWidgetBuilder`                       | No change.                                                 |
| `commentBuilder`                        | `commentBuilder`                          | No change.                                                 |
| `headerBuilder`                         | `postHeaderBuilder`                       | Minor name change (`headerBuilder` → `postHeaderBuilder`). |
| `menuBuilder`                           | `postMenuBuilder`                         | Minor name change (`menuBuilder` → `postMenuBuilder`).     |
| `topicBuilder`                          | `topicBuilder`                            | No change.                                                 |
| `postContentBuilder`                    | `postContentBuilder`                      | No change.                                                 |
| `postMediaBuilder`                      | `postMediaBuilder`                        | No change.                                                 |
| `postFooterBuilder`                     | `postFooterBuilder`                       | No change.                                                 |
| `pollWidgetBuilder`                     | `pollWidgetBuilder`                       | No change.                                                 |
| `noItemsFoundIndicatorBuilderFeed`      | `noItemsFoundIndicatorBuilder`            | Name shortened; now allows passing `Widget? child`.        |
| `noPostUnderTopicFeed`                  | `noPostUnderTopicFeed`                    | No change.                                                 |
| `firstPageProgressIndicatorBuilderFeed` | `firstPageProgressIndicatorBuilder`       | Name shortened; now allows passing `Widget? child`.        |
| `newPageProgressIndicatorBuilderFeed`   | `newPageProgressIndicatorBuilder`         | Name shortened; now allows passing `Widget? child`.        |
| `firstPageErrorIndicatorBuilderFeed`    | `firstPageErrorIndicatorBuilder`          | Name shortened; now allows passing `Widget? child`.        |
| `newPageErrorIndicatorBuilderFeed`      | `newPageErrorIndicatorBuilder`            | Name shortened; now allows passing `Widget? child`.        |
| `noMoreItemsIndicatorBuilderFeed`       | `noMoreItemsIndicatorBuilder`             | Name shortened; now allows passing `Widget? child`.        |
| `snackBarBuilder`                       | `snackBarBuilder`                         | No change.                                                 |
| `imageBuilder`                          | `imageBuilder`                            | No change.                                                 |
| `videoBuilder`                          | `videoBuilder`                            | No change.                                                 |
| `topicBarBuilder`                       | `topicBarBuilder`                         | No change.                                                 |
| `topResponseBuilder`                    | `topResponseBuilder`                      | No change.                                                 |
| `addACommentBuilder`                    | `addACommentBuilder`                      | No change.                                                 |

### Benefits of v1.13.0

- **Modularity:** Screen-specific builders make customization more organized and targeted.
- **Flexibility:** Pass separate builders for widgets and screens, allowing granular control over UI components.

---

By following these steps, you can migrate seamlessly to **v1.13.0** and take advantage of the new modular and flexible customization options.



================================================
File: feed/Flutter/Core/notifications.md
================================================
---
sidebar_position: 4
title: Push Notifications
slug: /flutter/core/push-notification
---

# Push Notifications

Push notifications are essential for engaging users and keeping them informed about important updates and events within your Flutter application. This guide will walk you through the process of setting up push notifications for use with the LikeMinds Flutter Feed SDK.

Refer to [Notification List](../../notification-list.md) to see the list of notifications triggered.

## Prerequisites

Before proceeding with the integration, make sure you have the following prerequisites in place:

1. A Flutter project set up and running.
2. The LikeMinds Flutter Feed SDK installed and initialized in your project.
3. A Firebase project created for your application.
4. FCM Service Account Keys: Obtain the Firebase Cloud Messaging service account keys from the Firebase Console. [Here](../../notification-using-http-v1.md) is the guide to obtain them.

## Implementation

To set up notifications, you'll need to use some common Flutter libraries to get device information, set up notifications, access tokens, and manage permissions. The LikeMinds Flutter Feed SDK requires the `deviceId`, and `fcmToken` to register the device for notifications.

### Step 1: Set up Firebase in your Flutter project

1. Add the Firebase SDK to your Flutter project by following the official Firebase Flutter setup guide.
2. Obtain the Firebase configuration files (`google-services.json` for Android and `GoogleService-Info.plist` for iOS) and add them to your project.
3. Initialize Firebase in your Flutter app.

### Step 2: Set up notifications in your Flutter project

#### 1. Set up notifications

Initialize your Firebase app, and initialise the `LMNotificationHandler`. Here's a boilerplate code example for reference:

```dart
void setupNotifications() async {
  await Firebase.initializeApp();
  final devId = await deviceId();
  final fcmToken = await setupMessaging();
  if (fcmToken == null) {
    debugPrint("FCM token is null or permission declined");
    return;
  }
  // Initialise the LMNotificationHandler
  LMNotificationHandler.instance.init(
    deviceId: devId,
    fcmToken: fcmToken,
  );
}
```

#### 2. Get the device ID

You can use the `device_info_plus` plugin to get the device ID. Here's an example:

```dart
import 'package:device_info_plus/device_info_plus.dart';

Future<String> deviceId() async {
  final deviceInfo = await DeviceInfoPlugin().deviceInfo;
  final deviceId = deviceInfo.data["identifierForVendor"]
    ?? deviceInfo.data["id"];
  debugPrint("Device id - $deviceId");
  return deviceId.toString();
}
```

#### 3. Set up Firebase Messaging

Use the `firebase_messaging` plugin to get the FCM token and initialize the messaging instance:

```dart
import 'package:firebase_messaging/firebase_messaging.dart';

Future<String?> setupMessaging() async {
  final messaging = FirebaseMessaging.instance;
  final settings = await messaging.requestPermission(...);
  // Get the token only when permission is granted
  if (settings.authorizationStatus == AuthorizationStatus.authorized) {
    final token = await messaging.getToken();
    return token.toString();
  } else {
    return null;
  }
}
```

#### 4. Initialize in main()

Call the `setupNotifications()` function in your `main()` function before running your Flutter application:

```dart
void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  if(!kIsWeb){
    setupNotifications();
  }
  runApp(const MyApp());
}
```

### Handling Notifications

The LikeMinds Flutter Feed SDK provides methods to handle notifications in different app states:

1. Use `handleNotification` for notifications received in any state (foreground, background, or terminated):

```dart
await LMNotificationHandler.instance.handleNotification(
  RemoteMessage message,
  bool show,
  GlobalKey<NavigatorState> navigatorKey,
);
```

The `show` parameter determines whether to display a visible notification (true for foreground, false for background/terminated).

For more detailed information on implementation, refer to the code examples in `main.dart` and `notification_handler.dart` provided in the SDK code [here](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/blob/ea4a3c309864cb5fce3e727888518180cd7df2bc/example/lib/main.dart).



================================================
File: feed/Flutter/Core/.DS_Store
================================================
[Non-text file]


================================================
File: feed/Flutter/Core/Components/_category_.json
================================================
{
    "label": "Widgets",
    "position": 2,
    "link": {
      "type": "generated-index",
      "description": "Widgets related to Core library in LikeMinds Flutter SDK"
    }
  }
  
  


================================================
File: feed/Flutter/Core/Components/activity_widget.md
================================================
---
sidebar_position: 5
title: User Activity Widget
slug: /flutter/core/widgets/user_activity_feed
---

## Introduction

The `LMFeedActivityWidget` widget is designed to display a list of user activities. It fetches activity data from the APIs and renders different activities, such as post like, comment. The widget allows customization through builder functions for posts, comments, and the app bar, providing flexibility to modify the appearance and functionality as needed.

:::note
This widget only show 3 most recent activities with a button to navigate [`LMFeedActivityScreen`](../Screens/LMFeedActivityScreen.md). if you wish to display all the activities at once consider using [`LMFeedActivityScreen`](../Screens/LMFeedActivityScreen.md) directly.
:::

### Properties

- `uuid` (`String`) - Required

The UUID of the user whose activities are to be displayed. This property is **required** to load the relevant user’s activity feed.

- `postWidgetBuilder` ([LMFeedPostWidgetBuilder](../../UI/typedef.md/#8-lmfeedpostwidgetbuilder)?)

A builder function to customize how individual posts are displayed in the activity feed.

- `commentWidgetBuilder` ([LMFeedPostCommentBuilder](../../UI/typedef.md/#15-lmfeedpostcommentbuilder)?)

A builder function to render custom UI for comments associated with the activities.

### Usage

Below is an example demonstrating how to use the `LMFeedActivityWidget` to display a list of user activities with customized post and comment builders.

#### Example Code

```dart
LMFeedActivityWidget(
  uuid: "USER_ID", // replace it with actual user id
  postWidgetBuilder: (context, postWidget, post) {
    return Card(
      margin: const EdgeInsets.symmetric(vertical: 8.0),
      child: Padding(
        padding: const EdgeInsets.all(12.0),
        child: Text(post.text),
      ),
    );
  },
  commentWidgetBuilder: (context, commentWidget, comment) {
    return ListTile(
      title: Text(comment.text),
    );
  },
);
```



================================================
File: feed/Flutter/Core/Components/bottom_textfield.md
================================================
---
sidebar_position: 1
title: Bottom TextField
slug: /flutter/core/widgets/bottom_textfield
---

# LMFeedBottomTextField

`LMFeedBottomTextField` is a widget designed to handle user input for comments or replies within the feed in your Flutter application. It provides customizable components such as profile picture and create button allowing developers to integrate a highly functional text input field at the bottom of a feed or post.

<br></br>

<p align="center">
  <img src="/img/flutter/core/widgets/bottom-textfield.webp" alt="LMFeedBottomTextField" width="300"/>
</p>

The `LMFeedBottomTextField` widget supports various customization options through its parameters. It can be tailored to fit different themes and user interfaces, making it a flexible choice for applications involving user-generated content.

## Properties

- `postId` (`String`) - Required

The ID of the post for which the comment is to be added. This is a **required** parameter.

- `controller` (`TextEditingController?`)

An optional controller for the text field. If not provided, a new controller will be created and used internally.

- `focusNode` (`FocusNode?`)

An optional focus node for the text field. If not provided, a new focus node will be created and used internally.

- `style` ([`LMFeedBottomTextFieldStyle?`](#styling))

An optional instance of `LMFeedBottomTextFieldStyle` to customize the appearance of the text field.

- `inputDecoration` (`InputDecoration? Function(InputDecoration?)?`)

A function to customize the input decoration of the text field.

- `profilePictureBuilder` ([`LMFeedProfilePictureBuilder?`](#))

A builder function for the profile picture. If not provided, a default profile picture will be used.

- `createButtonBuilder` ([`LMFeedButtonBuilder?`](#))

A builder function for the create button. If not provided, a default create button will be used.

- `bannerBuilder` (`Widget Function(BuildContext, LMFeedBottomTextFieldBanner)?`)

A builder function for the banner shown above the text field, used when editing a comment or a reply. If not provided, a default banner will be used.

- `copyWith` (`LMFeedBottomTextField`)

Creates a new instance of `LMFeedBottomTextField` with the provided values, while keeping the current values if not overridden.

## Styling

The `LMFeedBottomTextFieldStyle` class allows you to customize the appearance of the `LMFeedBottomTextField`.

### Customization variables

| Property         | Type           | Description                                       | Required | Default |
| ---------------- | -------------- | ------------------------------------------------- | -------- | ------- |
| `constraints`    | BoxConstraints | The constraints for the text field container      |          |         |
| `boxDecoration`  | BoxDecoration  | The decoration for the text field container       |          |         |
| `padding`        | EdgeInsets     | The padding for the text field container          |          |         |
| `margin`         | EdgeInsets     | The margin for the text field container           |          |         |
| `showPrefixIcon` | bool           | Whether to show the prefix icon (profile picture) |          | true    |
| `showSuffixIcon` | bool           | Whether to show the suffix icon (create button)   |          | true    |

You can create an instance of `LMFeedBottomTextFieldStyle` and pass it to the `LMFeedBottomTextField` to customize its appearance.

## Usage Example

```dart
// create an object of TextEditingController and FocusNode
final TextEditingController _commentController = TextEditingController();
final FocusNode _commentFocusNode = FocusNode();

LMFeedBottomTextField(
  postId: "example-post-id",
  controller: _commentController,
  focusNode: _commentFocusNode,
  style: LMFeedBottomTextFieldStyle.basic(
    containerColor: Colors.white,
  ),
  profilePictureBuilder: (context, profilePicture) => LMFeedProfilePicture(
    // please make sure this link is accessible by the end user.
    imageUrl: "http://example.com/profile.jpg",
    fallbackText: "User",
  ),
  createButtonBuilder: (context, button) => LMFeedButton(
    style: const LMFeedButtonStyle(
      height: 18,
      padding: EdgeInsets.symmetric(horizontal: 12),
    ),
    text: LMFeedText(
      text: "Send",
      style: LMFeedTextStyle(
        textAlign: TextAlign.center,
        textStyle: TextStyle(
          fontWeight: FontWeight.w500,
          fontSize: 13,
          color: Colors.blue,
        ),
      ),
    ),
    onTap: () {
      // Handle create button tap
    },
  ),
  bannerBuilder: (context, banner) => Container(
    padding: const EdgeInsets.all(8),
    color: Colors.grey[200],
    child: banner,
  ),
);
```

This example creates an `LMFeedBottomTextField` with a custom style, profile picture, create button, and banner. It also demonstrates how to handle button taps and customize the text field's appearance and behavior.

## Customize Send Action

You can trigger the send action outside of the `LMFeedBottomTextField` widget by directly interacting with the `LMFeedCommentBloc`. This is particularly useful if you want to manage comment submission from outside the `LMFeedBottomTextField`, such as through a separate button or action.

To handle comment submission, simply add the `LMFeedSubmitCommentEvent` event to the `LMFeedCommentBloc`. The event will manage the comment submission process internally.

Here's an example of how to use the send action outside of the `TextField` widget:

```dart
// get instance of Comment Bloc
final LMFeedCommentBloc _commentBloc = LMFeedCommentBloc.instance;
// Trigger comment submission
_commentBloc.add(LMFeedSubmitCommentEvent(
  context: context,
  commentController: _commentController,
  focusNode: _commentFocusNode,
  widgetSource: LMFeedWidgetSource.postDetailScreen, //change this enum according to your screen
  postId: "post_id",
));
```

This approach will handle all the necessary actions for comment submission, including validating and dispatching the comment to the appropriate destination. It simplifies the process by managing the comment submission logic out of the `LMFeedBottomTextField` widget, providing a more streamlined experience.



================================================
File: feed/Flutter/Core/Components/comment_list.md
================================================
---
sidebar_position: 2
title: Comment List
slug: /flutter/core/widgets/comment_list
---

# LMFeedCommentList

`LMFeedCommentList` is a widget designed to display a **list of comments** for a specific post in your Flutter application. It supports **customization** through various builder functions, allowing developers to tailor the look and behavior of the comment list. It handles **pagination, error states, and empty views**, making it ideal for use in feeds where user-generated content plays a central role.

---

### Properties

- `postId (String)`  
  The ID of the post for which the comments are being displayed. This is a required parameter.

- `commentBuilder (LMFeedPostCommentBuilder?)`  
  A builder function to customize how individual comments are displayed.

- `commentSeparatorBuilder (Widget Function(BuildContext)?)`  
  A function to customize the separator between comments.

- `widgetSource (LMFeedWidgetSource)`  
  Specifies the source screen where the comment list is used (e.g., post detail).

- `noItemsFoundIndicatorBuilder (LMFeedContextWidgetBuilder?)`  
  A widget builder to display when no comments are available.

- `firstPageProgressIndicatorBuilder (LMFeedContextWidgetBuilder?)`  
  A builder for the first page loader when comments are being fetched.

- `newPageProgressIndicatorBuilder (LMFeedContextWidgetBuilder?)`  
  A builder for pagination loaders while fetching more comments.

- `noMoreItemsIndicatorBuilder (LMFeedContextWidgetBuilder?)`  
  A widget builder to display when there are no more comments to load.

- `newPageErrorIndicatorBuilder (LMFeedContextWidgetBuilder?)`  
  A builder for errors when loading new pages of comments.

- `firstPageErrorIndicatorBuilder (LMFeedContextWidgetBuilder?)`  
  A builder for errors when loading the first page of comments.

- `replyWidgetBuilder (LMFeedReplyWidgetBuilder?)`  
  A builder function to customize the reply widget below each comment.

---

### copyWith (LMFeedCommentList)

The `copyWith` method creates a new instance of `LMFeedCommentList` with updated values, while retaining the current values for fields not overridden.

#### Usage

```dart
LMFeedCommentList copyWith({
  String? postId,
  LMFeedPostCommentBuilder? commentBuilder,
  Widget Function(BuildContext)? commentSeparatorBuilder,
  LMFeedWidgetSource? widgetSource,
  LMFeedContextWidgetBuilder? noItemsFoundIndicatorBuilder,
  LMFeedContextWidgetBuilder? firstPageProgressIndicatorBuilder,
  LMFeedContextWidgetBuilder? newPageProgressIndicatorBuilder,
  LMFeedContextWidgetBuilder? noMoreItemsIndicatorBuilder,
  LMFeedContextWidgetBuilder? newPageErrorIndicatorBuilder,
  LMFeedContextWidgetBuilder? firstPageErrorIndicatorBuilder,
  LMFeedReplyWidgetBuilder? replyWidgetBuilder,
});
```

---

### Usage Example

Below is an example demonstrating how to use `LMFeedCommentList` with custom builders for the **comment separator**, **first page loader**, and **reply widget**.

#### Code Example

```dart
LMFeedCommentList(
  postId: "example-post-id",
  commentBuilder: (context, commentWidget, postViewData) {
    return Card(
      margin: const EdgeInsets.all(8.0),
      child: commentWidget, // Wraps each comment in a Card.
    );
  },
  commentSeparatorBuilder: (context) => Divider(
    thickness: 1,
    color: Colors.grey[300],
  ),
  firstPageProgressIndicatorBuilder: (context) => Center(
    child: CircularProgressIndicator(),
  ),
  noItemsFoundIndicatorBuilder: (context) => Center(
    child: Text("No comments available."),
  ),
  replyWidgetBuilder: (context, replyWidget) => Padding(
    padding: const EdgeInsets.all(8.0),
    child: replyWidget,
  ),
);
```



================================================
File: feed/Flutter/Core/Components/reply_list.md
================================================
---
sidebar_position: 3
title: Reply List
slug: /flutter/core/widgets/reply_list
---

# LMFeedCommentReplyWidget

`LMFeedCommentReplyWidget` is a widget designed to display **replies** for a specific comment in a post within your Flutter application. It integrates with the **bloc architecture** to manage state and provides seamless interaction capabilities like **replying**, **liking**, and **editing replies**. Developers can customize the appearance and behavior of the widget using various builder functions.

### Properties

- `postId (String)`  
  The ID of the post to which the comment and its replies belong. This is a required parameter.

- `comment (LMCommentViewData)`  
  The comment object for which replies are displayed. This is a required parameter.

- `user (LMUserViewData)`  
  The user who posted the comment. This is a required parameter.

- `style (LMFeedCommentStyle?)`  
  An optional style object to customize the appearance of the reply widget.

- `commentBuilder (LMFeedPostCommentBuilder?)`  
  A builder function to customize the appearance of individual comments and replies.

- `loaderBuilder (LMFeedLoaderBuilder?)`  
  A builder function to customize the loading indicator when fetching replies.

- `post (LMPostViewData)`  
  The post object to which the comment and replies belong. This is a required parameter.

---

### copyWith (LMFeedCommentReplyWidget)

The `copyWith` method allows you to create a new instance of `LMFeedCommentReplyWidget` by overriding specific properties, while retaining the current values for the rest.

#### Usage

```dart
LMFeedCommentReplyWidget copyWith({
  String? postId,
  LMCommentViewData? reply,
  LMUserViewData? user,
  LMFeedCommentStyle? style,
  LMFeedPostCommentBuilder? commentBuilder,
  LMPostViewData? post,
  LMFeedLoaderBuilder? loaderBuilder,
});
```

---

### Usage Example

Here is an example demonstrating how to use `LMFeedCommentReplyWidget` with custom **comment builders** and **loading indicators**.

#### Code Example

```dart
LMFeedCommentReplyWidget(
      commentBuilder:
          widget.commentBuilder ?? LMFeedCore.widgetUtility.commentBuilder,
      post: _postViewData!,
      postId: widget.postId,
      comment: commentViewData,
      user: userViewData,
    );
```



================================================
File: feed/Flutter/Core/Components/saved_post_list.md
================================================
---
sidebar_position: 4
title: Saved Post List
slug: /flutter/core/widgets/saved_post_list
---

## LMFeedSavedPostListView

`LMFeedSavedPostListView` is a widget designed to display **a list of saved posts**. It seamlessly integrates with **bloc architecture** to manage state, handle pagination, and display loading or error states. The widget offers several **builder functions** to customize how posts, loaders, and errors are displayed, providing flexibility to developers.

---

## LMFeedSavedPostListView

The widget utilizes a **PagingController** to fetch and display paginated data efficiently. Developers can configure the feed screen's behavior using **LMFeedScreenConfig**, which controls the appearance and functionality of the saved post list.

---

### Properties

- `config (LMFeedScreenConfig?)`  
  An optional configuration object that defines the behavior, styling, and features of the feed screen.

- `postBuilder (LMFeedPostWidgetBuilder?)`  
  A builder function to customize how individual saved posts are displayed.

- `noItemsFoundIndicatorBuilder (LMFeedContextWidgetBuilder?)`  
  A builder function to render a widget when no saved posts are available.

- `firstPageProgressIndicatorBuilder (LMFeedContextWidgetBuilder?)`  
  A builder function to display a loader when the first page of saved posts is being fetched.

- `newPageProgressIndicatorBuilder (LMFeedContextWidgetBuilder?)`  
  A builder function to display a loader while additional posts are being fetched during pagination.

- `noMoreItemsIndicatorBuilder (LMFeedContextWidgetBuilder?)`  
  A builder function to render a widget when no more saved posts are available to load.

- `newPageErrorIndicatorBuilder (LMFeedContextWidgetBuilder?)`  
  A builder function to display an error message when loading additional pages fails.

- `firstPageErrorIndicatorBuilder (LMFeedContextWidgetBuilder?)`  
  A builder function to display an error message when loading the first page fails.

---

### LMFeedScreenConfig

The `LMFeedScreenConfig` class allows developers to configure the behavior and appearance of the feed screen. It provides options to enable or disable **topic filtering**, control **overlay styles**, and show or hide specific UI elements like **pending post headers** or **notification icons**.

#### Properties

- `feedSystemOverlayStyle (SystemUiOverlayStyle)`  
  Configures the system’s overlay style to change between light and dark themes based on the screen background.  
  **Default:** `SystemUiOverlayStyle.light`

- `enableTopicFiltering (bool)`  
  Enables or disables the **topic filtering** feature on the feed screen.  
  **Default:** `true`

- `topicSelectionWidgetType (LMFeedTopicSelectionWidgetType)`  
  Controls the type of **topic selection widget** to be displayed:

  - **`showTopicSelectionBottomSheet`**: Displays a bottom sheet for topic selection.
  - **`showTopicSelectionScreen`**: Opens a separate screen for topic selection.  
    **Default:** `showTopicSelectionScreen`

- `showCustomWidget (bool)`  
  Determines whether to display a **custom widget** on the feed screen.  
  **Default:** `false`

- `showPendingPostHeader (bool)`  
  Enables or disables the **pending post header** on the feed screen.  
  **Default:** `true`

- `showNotificationFeedIcon (bool)`  
  Enables or disables the **notification feed icon** on the feed screen.  
  **Default:** `true`

#### Example Usage of LMFeedScreenConfig

```dart
final LMFeedScreenConfig config = LMFeedScreenConfig(
  feedSystemOverlayStyle: SystemUiOverlayStyle.dark,
  enableTopicFiltering: true,
  topicSelectionWidgetType: LMFeedTopicSelectionWidgetType.showTopicSelectionBottomSheet,
  showCustomWidget: true,
  showPendingPostHeader: false,
  showNotificationFeedIcon: true,
);
```

---

### copyWith (LMFeedSavedPostListView)

The `copyWith` method allows creating a new instance of `LMFeedSavedPostListView` with selected properties overridden, while keeping the original values for the rest.

#### Usage

```dart
LMFeedSavedPostListView copyWith({
  LMFeedScreenConfig? config,
  LMFeedPostWidgetBuilder? postBuilder,
  LMFeedContextWidgetBuilder? noItemsFoundIndicatorBuilder,
  LMFeedContextWidgetBuilder? firstPageProgressIndicatorBuilder,
  LMFeedContextWidgetBuilder? newPageProgressIndicatorBuilder,
  LMFeedContextWidgetBuilder? noMoreItemsIndicatorBuilder,
  LMFeedContextWidgetBuilder? newPageErrorIndicatorBuilder,
  LMFeedContextWidgetBuilder? firstPageErrorIndicatorBuilder,
});
```

---

### Example Usage

Below is an example demonstrating how to use `LMFeedSavedPostListView` with a **custom configuration** and **post builder**.

#### Code Example

```dart
LMFeedSavedPostListView(
  config: LMFeedScreenConfig(
    feedSystemOverlayStyle: SystemUiOverlayStyle.light,
    enableTopicFiltering: true,
    showPendingPostHeader: false,
  ),
  postBuilder: (context, postWidget, post) {
    return Padding(
      padding: const EdgeInsets.all(8.0),
      child: Card(
        elevation: 4,
        child: postWidget, // Custom styling inside a Card.
      ),
    );
  },
  noItemsFoundIndicatorBuilder: (context) => Center(
    child: Text("No saved posts available."),
  ),
  firstPageProgressIndicatorBuilder: (context) => Center(
    child: CircularProgressIndicator(),
  ),
  newPageErrorIndicatorBuilder: (context) => Center(
    child: Text("Failed to load more posts."),
  ),
);
```

---

In this example:

- A **custom post builder** wraps each post inside a `Card` with padding.
- The **configuration** disables the pending post header and uses a light system overlay style.
- **Error handling** and **progress indicators** are implemented using builder functions.

This setup demonstrates how to efficiently use `LMFeedSavedPostListView` and its configuration to enhance the functionality and appearance of saved posts in your Flutter application.



================================================
File: feed/Flutter/Core/Components/user_create_comment_list.md
================================================
---
sidebar_position: 6
title: User Created Comment List
slug: /flutter/core/widgets/user_created_comment_list
---

## Introduction

The `LMFeedUserCreatedCommentListView` widget is a Flutter UI component designed to display comments created by a specific user in the feed. It leverages BLoC architecture and paging controllers to efficiently manage state, pagination, and content loading. This widget provides several customization options through builder functions, giving developers flexibility in rendering post items, handling errors, and displaying loading indicators.

### Properties

- `uuid` (`String`) - Required

The UUID of the user whose comments are displayed. This is a required parameter.

- `postWidgetBuilder` ([LMFeedPostWidgetBuilder](../../UI/typedef.md/#8-lmfeedpostwidgetbuilder)?)

A builder function that customizes how individual posts are displayed.

- `emptyFeedViewBuilder` ([LMFeedContextWidgetBuilder](../../UI/typedef.md/#25-lmfeedcontextwidgetbuilder)?)

A builder function to render a widget when no comments are found.

- `firstPageLoaderBuilder` ([LMFeedContextWidgetBuilder](../../UI/typedef.md/#25-lmfeedcontextwidgetbuilder)?)

A builder function to display a loading indicator when the first page of comments is being fetched.

- `paginationLoaderBuilder` ([LMFeedContextWidgetBuilder](../../UI/typedef.md/#25-lmfeedcontextwidgetbuilder)?)

A builder function to display a loading indicator when more comments are being fetched during pagination.

- `feedErrorViewBuilder` ([LMFeedContextWidgetBuilder](../../UI/typedef.md/#25-lmfeedcontextwidgetbuilder)?)

A builder function to render a widget in case of an error.

- `noNewPageWidgetBuilder` ([LMFeedContextWidgetBuilder](../../UI/typedef.md/#25-lmfeedcontextwidgetbuilder)?)

A builder function to render a widget when no more pages are available for loading.

### Usage Example

```dart
LMFeedUserCreatedCommentListView(
  uuid: "USER_ID", // replace it with actual user id
  postBuilder: (context, postWidget, post) {
    // wrapped the actual post widget with padding and card
    return Card(
      margin: const EdgeInsets.all(8.0),
      child: Padding(
        padding: const EdgeInsets.all(8.0),
        child: postWidget,
      ),
    );
  },
  emptyFeedViewBuilder: (context) => Center(
    child: Text("No comments found."),
  ),
  firstPageLoaderBuilder: (context) => Center(
    child: CircularProgressIndicator(),
  ),
  feedErrorViewBuilder: (context) => Center(
    child: Text("An error occurred. Please try again."),
  ),
);
```



================================================
File: feed/Flutter/Core/Components/user_created_post_list.md
================================================
---
sidebar_position: 5
title: User Created Post List
slug: /flutter/core/widgets/user_created_post_list
---

## Introduction

The `LMFeedUserCreatedPostListView` widget is designed to display a list of posts created by a specific user. It provides customization options through builder functions to alter the appearance and behavior of post items, loading indicators, and error handling. The widget utilizes paging controllers and BLoC architecture to manage state efficiently, ensuring smooth pagination and data loading.

### Properties

- `uuid` (`String`) - required

The UUID of the user for which the post list is to be displayed. This property is required to fetch the appropriate posts.

- `postWidgetBuilder` ([LMFeedPostWidgetBuilder](../../UI/typedef.md/#8-lmfeedpostwidgetbuilder)?)

A builder function to customize how individual posts are displayed in the list.

- `noItemsFoundIndicatorBuilder` ([LMFeedContextWidgetBuilder](../../UI/typedef.md/#25-lmfeedcontextwidgetbuilder)?)

A builder function to render a widget when no posts are available for the user.

- `firstPageProgressIndicatorBuilder` ([LMFeedContextWidgetBuilder](../../UI/typedef.md/#25-lmfeedcontextwidgetbuilder)?)

A builder function to display a loading indicator while the first page of posts is being fetched.

- `newPageProgressIndicatorBuilder` ([LMFeedContextWidgetBuilder](../../UI/typedef.md/#25-lmfeedcontextwidgetbuilder)?)

A builder function to display a loading indicator when additional pages are being fetched during pagination.

- `noMoreItemsIndicatorBuilder` ([LMFeedContextWidgetBuilder](../../UI/typedef.md/#25-lmfeedcontextwidgetbuilder)?)

A builder function to render a widget when no more posts are available to load.

- `firstPageErrorIndicatorBuilder` ([LMFeedContextWidgetBuilder](../../UI/typedef.md/#25-lmfeedcontextwidgetbuilder)?)

A builder function to display an error message if fetching the first page fails.

- `newPageErrorIndicatorBuilder` ([LMFeedContextWidgetBuilder](../../UI/typedef.md/#25-lmfeedcontextwidgetbuilder)?)

A builder function to display an error message if fetching additional pages fails.

### Usage

Below is an example of how to use the `LMFeedUserCreatedPostListView` widget to display a list of posts created by a user with a custom post builder and error indicators.

#### Example Code

```dart
LMFeedUserCreatedPostListView(
  uuid: "USER_ID", // replace it with actual user id
  postBuilder: (context, postWidget, post) {
    // wrapped the actual post widget with padding and card
    return Padding(
      padding: const EdgeInsets.all(8.0),
      child: Card(
        child: postWidget,
      ),
    );
  },
  noItemsFoundIndicatorBuilder: (context) => Center(
    child: Text("No posts available."),
  ),
  firstPageProgressIndicatorBuilder: (context) => Center(
    child: CircularProgressIndicator(),
  ),
  newPageErrorIndicatorBuilder: (context) => Center(
    child: Text("Failed to load more posts."),
  ),
);
```



================================================
File: feed/Flutter/Core/Components/vertical_post.md
================================================
---
sidebar_position: 8
title: Vertical Video Post
slug: /flutter/core/widgets/vertical-video-post
---

# LMFeedVerticalVideoPost

`LMFeedVerticalVideoPost` is a widget designed to display **vertical video posts** in your Flutter application. It supports **customization** through various builder functions, allowing developers to tailor the appearance and functionality of video posts. This widget enables **engagement actions like likes, comments, and menu options** while offering full styling flexibility.

---

### Properties

- `postViewData (LMPostViewData)`  
    Contains details about the video post, including the video URL, title, description, and metadata. (**Required**)

- `widgetSource (LMFeedWidgetSource)` _(Default: `LMFeedWidgetSource.videoFeed`)_  
    Specifies the source screen where the post is being displayed (e.g., main feed, profile).

- `videoBuilder (LMFeedVideoBuilder?)`  
    A builder function to customize how the video widget is displayed.

- `postHeaderBuilder (LMFeedPostHeaderBuilder?)`  
    A builder function to customize the post header, which typically includes the username, timestamp, and profile picture.

- `postContentBuilder (LMFeedPostContentBuilder?)`  
    A builder function to customize the post content, including text, media, and other elements.

- `postTopicBuilder (LMFeedPostTopicBuilder?)`  
    A builder function to customize how topics or hashtags associated with the post are displayed.

- `postMenuBuilder (LMFeedPostMenuBuilder?)`  
    A builder function to customize the post menu, which usually includes options like report, delete, or share.

- `postLikeButtonBuilder (LMFeedButtonBuilder?)`  
    A builder function to customize the like button for the post.

- `postCommentButtonBuilder (LMFeedButtonBuilder?)`  
    A builder function to customize the comment button for the post.

- `preActionWidgets (List<Widget>)` _(Default: `[]`)_  
    A list of widgets to display before the action buttons.

- `postActionWidgets (List<Widget>)` _(Default: `[]`)_  
    A list of widgets to display after the action buttons.

- `style (LMFeedVerticalVideoPostStyle?)`  
    Allows customization of styles such as colors, fonts, and layouts for the vertical video post.*

---

### copyWith (LMFeedVerticalVideoPost)

The `copyWith` method creates a new instance of `LMFeedVerticalVideoPost` with updated values while retaining the current values for fields not overridden.

#### Usage

```dart
LMFeedVerticalVideoPost copyWith({
  LMPostViewData? postViewData,
  LMFeedWidgetSource? widgetSource,
  LMFeedVideoBuilder? videoBuilder,
  LMFeedPostHeaderBuilder? postHeaderBuilder,
  LMFeedPostContentBuilder? postContentBuilder,
  LMFeedPostTopicBuilder? postTopicBuilder,
  LMFeedPostMenuBuilder? postMenuBuilder,
  LMFeedButtonBuilder? postLikeButtonBuilder,
  LMFeedButtonBuilder? postCommentButtonBuilder,
  List<Widget>? preActionWidgets,
  List<Widget>? postActionWidgets,
  LMFeedVerticalVideoPostStyle? style,
});
```

---

### Usage Example

Below is an example demonstrating how to use `LMFeedVerticalVideoPost` with custom builders for the **video**, **post header**, and **comment button**.

#### Code Example

```dart
LMFeedVerticalVideoPost(
  postViewData: postViewData,
  widgetSource: LMFeedWidgetSource.feed,
  preActionWidgets: [
    Icon(Icons.favorite_border),
  ],
  postActionWidgets: [
    Icon(Icons.share),
  ],
);
```

---

## Summary

The `LMFeedVerticalVideoPost` widget provides a fully customizable interface for displaying **vertical video posts** in a social feed.  
By leveraging **builder functions** and **styling properties**, developers can modify the appearance and behavior of video posts to match specific application requirements.



================================================
File: feed/Flutter/Core/Components/video_feed_list.md
================================================
---
sidebar_position: 9
title: Video Feed List  
slug: /flutter/core/widgets/video-feed-list  
---

# Video Feed List  

## Introduction  

The `LMFeedVideoFeedListView` widget is a paginated list view that displays video posts in a feed format. It efficiently loads and manages video content through pagination, ensuring smooth scrolling and data retrieval.

### Properties  

- `pageSize` (`int`) - *(Optional, Default: 10)*  
  The number of video posts loaded per page during pagination.

- `feedType` (`LMFeedType`) - *(Optional, Default: `LMFeedType.universal`)*  
  Specifies the type of feed being displayed. It can be:
  - `LMFeedType.universal` - Shows all posts.
  - `LMFeedType.personalized` - Displays posts personalized to the user.

### Usage  

Below is an example of how to use `LMFeedVideoFeedListView` to display a paginated video feed.

#### Example Code  

```dart
LMFeedVideoFeedListView(
  pageSize: 10,
  feedType: LMFeedType.universal,
);
```



================================================
File: feed/Flutter/Core/Guides/_category_.json
================================================
{
  "label": "Guides",
  "position": 3,
  "link": {
    "type": "generated-index",
    "description": "How-Tos and guides related to Core library in LikeMinds Flutter SDK"
  }
}



================================================
File: feed/Flutter/Core/Guides/configure-topics.md
================================================
---
sidebar_position: 2
title: How to Configure Topics in Feed?
slug: /flutter/core/guide/how-to-configure-topics-in-feed
---

# How to configure Topics?

For getting started, please refer to this <a href="https://docs.likeminds.community/feed/Flutter/getting-started/">doc</a>.

Enabling topics in your community brings you one step closer to building a topic based feed experience using the LikeMinds Feed Flutter SDK.

The following configurations for topics are offered in Feed Flutter SDK:

#### 1. Adding Topics to Posts:

a. By default, you can include topics when creating a post.

b. You can optionally make selecting a topic mandatory for creating a post.

#### 2. Filtering Posts by Topics:

a. By default, you can filter the posts you see based on the topics they are associated with.

b. There's an option to control how users select topics for filtering.

#### Step 1

Create an instance of `LMFeedConfig` to configure topics.

```dart
config: LMFeedConfig(
  composeConfig: const LMFeedComposeScreenConfig(
    // this will make the topic compulsory to create a post
    topicRequiredToCreatePost: true,
    // [true by default] enables or disables topic in feed
    enableTopics: true,
  ),
  feedScreenConfig: const LMFeedScreenConfig(
    // Enables filtering post using topics
    enableTopicFiltering: true,
    // Topic Filter can be shown as a bottom sheet or a separate screen
    topicSelectionWidgetType: LMFeedTopicSelectionWidgetType.showTopicSelectionBottomSheet,
  )
)
```

Below is the description of keys you have used in the above snippet.

| Name                        | Type                             | Description                                                                                                                                                                                                                                                                                                               | Optional           |
| --------------------------- | -------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------ |
| `enableTopics`              | `bool`                           | Boolean to enable or disable topic in Feed, defaults to `true`                                                                                                                                                                                                                                                            | :heavy_check_mark: |
| `topicRequiredToCreatePost` | `bool`                           | Whether or not topic is compulsory for creating a post, defaults to `false`                                                                                                                                                                                                                                               | :heavy_check_mark: |
| `enableTopicFiltering`      | `bool`                           | Enables filtering post using topics, defaults to `true`                                                                                                                                                                                                                                                                   | :heavy_check_mark: |
| `topicSelectionWidgetType`  | `LMFeedTopicSelectionWidgetType` | Selects the type of Topic filtering widget to be shown, `LMFeedTopicSelectionWidgetType.showTopicSelectionBottomSheet` will present a bottom sheet whereas `LMFeedTopicSelectionWidgetType.showTopicSelectionScreen` will present a separate screen, default to `LMFeedTopicSelectionWidgetType.showTopicSelectionScreen` | :heavy_check_mark: |

##### enableTopics:

This is the difference when topic selection is enabled or disabled in the Compose screen.

<table>
 <tr>
    <td><p align="center">
  <img src="/img/flutter/core/how-to/configure-topics/enable-topic-true.jpg" alt="LMFeedComposeScreen" width="180"></img>
</p></td>
    <td><p align="center">
  <img src="/img/flutter/core/how-to/configure-topics/enable-topic-false.jpg" alt="LMFeedComposeScreen" width="180"></img>
</p></td>
 </tr>
 <tr>
    <td><p align="center">true</p></td>
    <td><p align="center">false</p></td>
 </tr>
</table>

##### enableTopicFiltering:

This is the difference in Feed's design when topic based filtering is enabled or disabled

<table>
 <tr>
    <td><p align="center">
  <img src="/img/flutter/core/how-to/configure-topics/enable-topic-filtering-true.jpg" alt="LMFeedComposeScreen" width="180"></img>
</p></td>
    <td><p align="center">
  <img src="/img/flutter/core/how-to/configure-topics/enable-topic-filtering-false.jpg" alt="LMFeedComposeScreen" width="180"></img>
</p></td>
 </tr>
 <tr>
    <td><p align="center">true</p></td>
    <td><p align="center">false</p></td>
 </tr>
</table>

##### topicSelectionWidgetType:

This is the difference between the two options we provide to select topics for filtering feed.

<table>
 <tr>
    <td><p align="center">
  <img src="/img/flutter/core/how-to/configure-topics/showTopicSelectionScreen.jpg" alt="LMFeedComposeScreen" width="180"></img>
</p></td>
    <td><p align="center">
  <img src="/img/flutter/core/how-to/configure-topics/showTopicSelectionBottomSheet.jpg" alt="LMFeedComposeScreen" width="180"></img>
</p></td>
 </tr>
 <tr>
    <td><p align="center">showTopicSelectionScreen</p></td>
    <td><p align="center">showTopicSelectionBottomSheet</p></td>
 </tr>
</table>

#### Step 2

While calling `initialize` method of `LMFeedCore`, pass the instance created in Step 1.

```dart
await LMFeedCore.instance.initialize(
  // Replace below string with api key of your community
  apiKey: "YOUR_API_KEY",
  config: config,
);
```

Below is the description of keys you have used in the above snippet.

| Name     | Type           | Description                                                      | Optional           |
| -------- | -------------- | ---------------------------------------------------------------- | ------------------ |
| `apiKey` | `String`       | API key of the community                                         |                    |
| `config` | `LMFeedConfig` | Configures features in Feed, i.e. topics, heading in post, etc., | :heavy_check_mark: |



================================================
File: feed/Flutter/Core/Guides/configure-web.md
================================================
---
sidebar_position: 3
title: How to Configure Feed on Web?
slug: /flutter/core/guide/how-to-configure-web
---

# How to configure Feed on Web?

For getting started, please refer to this <a href="https://docs.likeminds.community/feed/Flutter/getting-started/">doc</a>.

The `config` parameter is an instance of `LMFeedConfig` and it allows you to configure various settings for the LikeMinds Feed SDK. In this code snippet, it sets the `webConfiguration` property of `LMFeedConfig` to an instance of `LMFeedWebConfiguration` with a `maxWidth` of 800.

:::note
This restricts the post width on the web to be at max 800 pixels.
:::

Here's the code snippet:

```dart
LMResponse response = await LMFeedCore.instance.initialize(
  config: LMFeedConfig(
    webConfiguration: const LMFeedWebConfiguration(maxWidth: 800),
  ),
);
```

This code initializes the LikeMinds Feed SDK with the specified web configuration.

For changing the scrolling behavior on the web you can pass the following class in your Material App

```dart
/// A custom scroll behavior class for web applications in the LikeMindsFeedCore library.
///
/// This class extends the [MaterialScrollBehavior] class and overrides the [dragDevices] getter
/// to specify the supported pointer devices for scrolling.
///
/// By default, the [MaterialScrollBehavior] class supports mouse devices on web.
/// However, in this custom behavior, we only support touch and mouse devices for dragging.
///
 import 'package:likeminds_feed_flutter_core/likeminds_feed_core.dart';

 class MyApp extends StatelessWidget {
   @override
   Widget build(BuildContext context) {
     return MaterialApp(
       scrollBehavior: LMWebScrollBehavior(), // Apply the custom scroll behavior
       home: MyHomePage(),
     );
   }
 }

```



================================================
File: feed/Flutter/Core/Guides/custom-widget.md
================================================
---
sidebar_position: 5
title: How to render Custom Post UI with custom JSON?
slug: /flutter/core/guide/how-to-render-custom-post-ui
---

# How to render Custom Post UI with custom JSON?

## Introduction

The LikeMinds Feed SDK allows you to enhance your feed posts with custom widgets, enabling you to display unique content types or complex data structures within your feed. This guide will walk you through the process of implementing and using custom widgets in your feed posts.

## Prerequisites

Before you begin, ensure the following:

- **LikeMinds Feed Flutter SDK**: The SDK must be properly installed and initialized in your Flutter project. Refer to the [installation guide](https://docs.likeminds.community/feed/Flutter/getting-started/) if needed.
- **Feed Enabled**: Ensure that Feed is enabled on the dashboard for your project.
- **Basic Understanding of Flutter Widgets**: Familiarity with Flutter widgets and layout concepts.
- **Knowledge of Builder Pattern**: Understanding of the builder pattern in Dart, as it is used to customize and create widgets dynamically.

## Steps to Implement Custom Widgets

### Step 1: Understanding LM Custom Widget for a Post

A custom widget is a JSON map of custom data that you can send in a post while creation in its attachment list. It is sent as an object of `LMAttachmentViewData` under the meta key in the post data.

While rendering the feed, every `LMPostViewData` object has a `List<LMAttachmentViewData>` which you can use to parse your custom data and associate a custom view with it. Then you can use it to further render it in the feed using the steps mentioned further in this document.

### Step 2: Understanding `LMAttachmentViewData`

The `LMAttachmentViewData` class represents media attachments for a post. It has multiple factory constructors for different scenarios. Here's a brief overview:

```dart
class LMAttachmentViewData {
    final LMMediaType attachmentType;
    final LMAttachmentMetaViewData attachmentMeta;

    // Factory constructors
    factory LMAttachmentViewData.fromAttachmentMeta({...});
    factory LMAttachmentViewData.fromMediaUrl({...});
    factory LMAttachmentViewData.fromMediaBytes({...});
    factory LMAttachmentViewData.fromMediaPath({...});

    // Method to map media type to integer
    int mapMediaTypeToInt() {...}
}
```

The class uses different factory constructors based on how you want to create the attachment:

- `fromAttachmentMeta`: When you already have an LMAttachmentMetaViewData object.

- `fromMediaUrl`: When you have a URL for the media.

- `fromMediaBytes`: When you have the media as bytes (Uint8List).

- `fromMediaPath`: When you have a local file path for the media.

The `LMMediaType` enum provides various media types you can use:

```dart
enum LMMediaType {
    none,
    image, // int value 1
    video, // int value 2
    document, // int value 3
    link, // int value 4
    widget, // int value 5
    repost, // int value 8 or 9
    poll, // int value 6
}
```

When creating an attachment, make sure to specify the correct media type. To do this you can also use, but always prefer using the `LMMediaType` enum.

```dart
LMAttachmentViewData attachment; //image type attachment

/// Function to map the LMMediaType enum to its int value
int attachmentType = attachment.mapMediaTypeToInt(); // 1

/// Function to map the attachment int value to its LMMediaType enum
LMMediaType type = mapIntToMediaType(attachmentType); // LMMediaType.image
```

### Step 3: Defining Your Custom Data Class

This part is optional as you can send a generic `Map<String, dynamic>` to represent your custom JSON. Otherwise, create a custom data class that represents the structure of your widget data. For example, if you're creating a health vital tracking widget, you might define a `CustomHealthData`:

```dart
class CustomHealthData {
    final String id;
    final String name;
    final int measurement;
    final String description;

    CustomHealthData({
    required this.id,
    required this.name,
    required this.measurement,
    required this.description,
    });

    toMap() => _customHealthDataToMap();

    /// conversion function
    factory CustomHealthData.fromLMPostViewData(LMPostViewData post){...}
}
```

### Step 4: Writing `toMap()` to start sending as attachment

Next, create a function that will convert your custom data class to a `Map<String, dynamic>` as this ensures that you get back the data however you want it. Here’s how:

```dart
Map<String, dynamic> _customHealthDataToMap(){
    return {
    'id': this.id,
    'name': this.name,
    'measurement': this.measurement,
    'description': this.description,
    };
}
```

The conversion and parsing to JSON to send it to the API is handled internally.

### Step 5: Writing conversion function for attachment data to your custom data class

Next, create a function that converts the `LMPostViewData` to your custom data class. This function will extract the relevant data from the post's attachments and widgets:

```dart
factory CustomHealthData.fromLMPostViewData(LMPostViewData post){
    // Map of widgets in the current post
    Map<String, LMWidgetViewData> widgets = post.widgets ?? {};

    // Checking every attachment for its type and converting
    for (LMAttachmentViewData attachment in post.attachments ?? []) {
        // Convert only if the attachment is of type widget
        if (attachment.attachmentType == LMMediaType.widget) {

            // Use the entity id in attachmentMeta to pick the widget
            // object from the widgets map in the post data
            final entityId = attachment.attachmentMeta.meta?['entity_id'];
                if (widgets.containsKey(entityId)) {
                    return CustomHealthData(
                    id: widgets[entityId]!.id
                    name: widgets[entityId]!.metadata['name'],
                    measurement: widgets[entityId]!.metadata['measurement'],
                    description: widgets[entityId]!.metadata['description'],
                    );
                }
            }

        }
}
```

## Steps to Render a Custom Widget in Feed

### Step 1: Create Your Custom Widget

Now, create a Flutter widget that will display your custom data. For example:

```dart
class HealthMetricWidget extends StatelessWidget {
    final CustomHealthData metric;

    const HealthMetricWidget({Key? key, required this.metric}) : super(key: key);

    @override
    Widget build(BuildContext context) {
        return Card(
            child: Column(
                children: [
                    Text(metric.name, style: Theme.of(context).textTheme.headline6),
                    Text(metric.description),
                    Row(
                        children: [
                            _getMetricIcon(metric.id),
                            Text(metric.measurement)
                        ]
                    )
                ],
            ),
        );
    }
}
```

### Step 2: Implement the `LMFeedPostWidgetBuilder` Function

The `LMFeedPostWidgetBuilder` allows you to customize how each post is rendered in the feed. It is a typedef of the type `Widget Function(BuildContext, LMFeedPostWidget, LMPostViewData)`.

Here's how you can implement it to include your custom widget:

```dart
Widget postWithMetricWidgetBuilder(
BuildContext context,
LMFeedPostWidget postWidget,
LMPostViewData postData,
) {
    final healthData = CustomHealthData.fromLMPostViewData(post)

    return postWidget.copyWith(
        headerBuilder: (context, headerWidget, headerData) {
            return headerWidget.copyWith(
                subText: LMFeedText(text: "${healthData.name} metric post"),
            );
        },
        contentBuilder: (context, contentwidget, content) {
            return HealthMetricWidget(metric: healthData);
        },
    );
}
```

### Step 3: Use the Builder Function in Your Feed

Finally, use your created postWithMetricWidgetBuilder function when navigating to the feed screen after initialisation. Here is how:

```dart
MaterialPageRoute route = MaterialPageRoute(
    builder: (context) => LMFeedSocialScreen(
        ...
        postBuilder: postWithMetricWidgetBuilder,
        ...
    )
);

Navigator.of(context).push(route);
```



================================================
File: feed/Flutter/Core/Guides/heading-in-post.md
================================================
---
sidebar_position: 1
title: How to enable Heading in Post?
slug: /flutter/core/guide/how-to-enable-heading-in-post
---

# How to enable Heading in Post?

For getting started, please refer to this <a href="https://docs.likeminds.community/feed/Flutter/getting-started/">doc</a>.

Enabling heading in a post brings you one step closer to building a QnA feed type experience using the LikeMinds Feed Flutter SDK.

To enable heading in a post, follow the below steps.

#### Step 1

Create an instance of `LMFeedConfig` class to enable heading.

```dart
LMFeedConfig config = LMFeedConfig(
  composeConfig: LMFeedComposeScreenConfig(
    // This enables heading textfield in compose screen
    enableHeading: true,
    // Hint to be shown in the Heading text field
    headingHint: "Add a heading",
    // Whether or not to make heading a requirement for post creation
    headingRequiredToCreatePost: true,
  ),
);
```

Below is the description of keys you have used in the above snippet.

| Name                          | Type     | Description                                                                      | Optional           |
| ----------------------------- | -------- | -------------------------------------------------------------------------------- | ------------------ |
| `enableHeading`               | `bool`   | Enables/Disables support of heading in `LMFeedComposeScreen`, default to `false` | :heavy_check_mark: |
| `headingHint`                 | `String` | Hint text to be shown in heading textfield, default to "Add a heading"           | :heavy_check_mark: |
| `headingRequiredToCreatePost` | `bool`   | Whether or not to make heading compulsory for post creation                      | :heavy_check_mark: |

##### enableHeading:

This is the difference in default design when heading in `LMFeedComposeScreen` is enabled or disabled.

<table>
 <tr>
    <td><p align="center">
  <img src="/img/flutter/core/how-to/enable-heading/enable-heading-true.jpg" alt="LMFeedComposeScreen" width="180"></img>
</p></td>
    <td><p align="center">
  <img src="/img/flutter/core/how-to/enable-heading/enable-heading-false.jpg" alt="LMFeedComposeScreen" width="180"></img>
</p></td>
 </tr>
 <tr>
    <td><p align="center">true</p></td>
    <td><p align="center">false</p></td>
 </tr>
</table>

#### Step 2

While calling `initialize` method of `LMFeedCore`, pass the instance created in Step 1.

```dart
await LMFeedCore.instance.initialize(
  // Replace below string with api key of your community
  apiKey: "YOUR_API_KEY",
  config: config,
);
```

Below is the description of keys you have used in the above snippet.

| Name     | Type           | Description                                                      | Optional           |
| -------- | -------------- | ---------------------------------------------------------------- | ------------------ |
| `apiKey` | `String`       | API key of the community                                         |                    |
| `config` | `LMFeedConfig` | Configures features in Feed, i.e. topics, heading in post, etc., | :heavy_check_mark: |



================================================
File: feed/Flutter/Core/Guides/how-to-create-custom-widget.md
================================================
---
sidebar_position: 16
title: How to Send Metadata in a Post to Render Custom UI
slug: /flutter/core/guide/how-to-send-metadata-in-a-post-to-render-custom-ui
---

# How to Send Metadata in a Post to Render Custom UI

## Prerequisites

- **LikeMinds Feed Flutter SDK**: Ensure the SDK is properly installed and initialized in your Flutter project. Refer to the [Installation Guide](../../getting-started.md).
- Basic knowledge of Postman or equivalent API testing tools.
- **Flutter Version**: Your Flutter version should be **3.19.0** or higher.

## Steps to Send Metadata in a Post

### Step 1: Understanding LM Custom Widget for a Post

A custom widget is a JSON map of custom data that you can send in a post during its creation in the attachment list. It is sent as an object of `LMAttachmentViewData` under the meta key in the post data.

While rendering the feed, every `LMPostViewData` object has a `List<LMAttachmentViewData>` which you can use to parse your custom data and associate a custom view with it. You can then use it to render it in the feed using the steps mentioned further in this document.

### Step 2: Understanding `LMAttachmentViewData`

The `LMAttachmentViewData` class represents media attachments for a post. It has multiple factory constructors for different scenarios. Here's a brief overview:

```dart
class LMAttachmentViewData {
    final LMMediaType attachmentType;
    final LMAttachmentMetaViewData attachmentMeta;

    // Factory constructors
    factory LMAttachmentViewData.fromAttachmentMeta({...});
    factory LMAttachmentViewData.fromMediaUrl({...});
    factory LMAttachmentViewData.fromMediaBytes({...});
    factory LMAttachmentViewData.fromMediaPath({...});
}
```

The class uses different factory constructors based on how you want to create the attachment:

- `fromAttachmentMeta`: When you already have an `LMAttachmentMetaViewData` object.
- `fromMediaUrl`: When you have a URL for the media.
- `fromMediaBytes`: When you have the media as bytes (`Uint8List`).
- `fromMediaPath`: When you have a local file path for the media.

The `LMMediaType` enum provides various media types you can use:

```dart
enum LMMediaType {
    none,
    image, // int value 1
    video, // int value 2
    document, // int value 3
    link, // int value 4
    widget, // int value 5, this is used to represent custom widget
    repost, // int value 8 or 9
    poll, // int value 6
    reel, // int value 11
}
```

### Step 3: Create an Attachment with Metadata and Send to `LMFeedComposeBloc`

The `LMFeedComposeBloc` bloc is responsible for managing all the attachment data while creating a post. You need to create a custom attachment with your metadata and set it in `LMFeedComposeBloc` by customizing the `onTap` parameter of the `postButton` of [`LMFeedComposeScreen`](../Screens/LMFeedComposeScreen.md) or [`LMFeedCreateShortVideoScreen`](../Screens/LMFeedCreateShortVideoScreen.md).

```dart
// Create an attachment with custom metadata
final customAttachment = LMAttachmentViewData.fromAttachmentMeta(
    attachmentType: LMMediaType.widget,
    attachmentMeta: (LMAttachmentMetaViewDataBuilder()
        ..meta({
            "title": "Custom metadata",
            "description": "Custom metadata example",
        }))
        .build(),
);
// Send to `LMFeedComposeBloc`
LMFeedComposeBloc.instance.postMedia.add(
    customAttachment,
);
```

## Steps to Render Metadata in a Post

### Step 1: Get the Metadata

You can get the metadata from `LMPostViewData`.

```dart
// Get widget type attachment from `LMPostViewData`
final customWidget = postViewData.attachments?.firstWhere(
    (attachment) => attachment.attachmentType == LMMediaType.widget,
);
// Get metadata from attachment
final customMetaData = customWidget?.attachmentMeta.meta;
```

### Step 2: Render Metadata

Use the above `customMetaData` to render the post UI according to the customizations provided in [`LMFeedPostWidget`](../../UI/Post/post_widget.md).

## Conclusion

By following this guide, you can send and render metadata in a post. This approach provides flexibility to tailor the messaging experience to your application's specific requirements.



================================================
File: feed/Flutter/Core/Guides/how-to-enable-guest-flow.md
================================================
---
sidebar_position: 14
title: How to enable Guest Flow and Login as a Guest User?
slug: /flutter/core/guide/how-to-enable-guest-flow-and-login-as-guest-user
---

# How to enable Guest Flow and Login as a Guest User?

## Introduction

This guide walks you through enabling and using Guest Flow in your Flutter app with the LikeMinds SDK. Guest Flow lets users explore the app without registering, enhancing user engagement and reducing onboarding friction.

## Prerequisites

Before you begin, ensure the following:

- **Basic Understanding of Flutter:** Familiarity with Flutter widgets and navigation.
- Basic knowledge of Postman or equivalent API testing tools.

## Steps

### Step 1: Initiate a user session

Authenticated API calls to the LikeMinds backend require an authorization token. This token can be generated using this [Getting Started doc](https://docs.likeminds.community/rest-api/authentication#getting-started). Make sure to log in with the Community Manager's credentials.

### Step 2: Enable Guest Flow in Community Settings

To enable Guest Flow, update the community settings with the following request:

```bash
curl --location --request PUT 'https://auth.likeminds.community/community/settings' \
--header 'Authorization: {cm_access_token}' \
--header 'Content-Type: application/json' \
--data '{
    "community_settings": [
        {
            "enabled": true,
            "setting_title": "Enable guest flow",
            "setting_type": "enable_guest_flow"
        }
    ]
}'
```

### Step 3: Setup LMFeedCore in Your Flutter App

Initialize the LMFeedCore package in your main function to ensure the SDK is properly set up before running the app. Provide loginRequired callback while initializing which can be used to trigger an action when a guest user tries to restricted action.

```dart
void main() async {
  // Call setup function before the runApp() function
  await LMFeedCore.instance.initialize(
    lmFeedCallback: LMFeedCoreCallback(
      // callback function, triggered when user click
      // on an action which required login
      loginRequired: (context) {
        // implement your action i.e show snackbar, dialogue etc.
      },
    ),
  );

  runApp(YourApp());
}
```

### Step 4: Show Feed as a Guest User

To display the feed for guest users, use the following snippet according to your authentication method:

#### Using API key Security (Server Side Authentication)

```dart
// Initiate user session, use the response to check for any errors
LMResponse response =
    await LMFeedCore.instance.showFeedWithoutApiKey(
      accessToken : "YOUR_ACCESS_TOKEN",
      refreshToken : "YOUR_REFRESH_TOKEN",
  );
```

:::note
Make sure to send `is_guest`: true while initiating a user session on your server using [initiate API](https://docs.likeminds.community/rest-api/#/operations/sdkInitate).
:::

#### Without using API key Security (Client Side Authentication)

```dart
// Initiate user session, use the response to check for any errors
LMResponse<void> response = await LMFeedCore.instance.showFeedWithApiKey(
  apiKey: "YOUR_API_KEY",
  isGuest: true,
);
```

### Step 5: Navigate to the Feed Screen

Upon a successful response, navigate to the `LMFeedSocialScreen` to start using the Feed in your app:

```dart
if (response.success) {
  // Create route with LMFeedSocialScreen
  MaterialPageRoute route = MaterialPageRoute(
    builder: (context) => const LMFeedSocialScreen(),
  );
  // Navigate to LMFeedSocialScreen
  Navigator.pushReplacement(context, route);
}
```

:::note
Make sure to logout the guest user session with `logout()` method from `LMFeedCore` before login with other user credentials.
:::



================================================
File: feed/Flutter/Core/Guides/how-to-enable-personalised-feed.md
================================================
---
sidebar_position: 11
title: How to enable personalised feed?
slug: /flutter/core/guide/how-to-enable-personalised-feed
---

# How to enable personalised feed?

## Introduction

In this guide, you'll learn how to enable and configure a personalized feed for users in your Flutter app using the LikeMinds Feed Flutter SDK. A personalized feed helps enhance user engagement by tailoring the content they see based on their preferences, interactions, and other metrics.

## Prerequisites

Before you begin, ensure the following:

- **Basic Understanding of Flutter:** Familiarity with Flutter widgets and navigation.
- Basic knowledge of Postman or equivalent API testing tools.

## Steps

### Step 1: Initiate a user session

Authenticated API calls to the LikeMinds backend require an authorization token. This token can be generated using this [Getting Started doc](https://docs.likeminds.community/rest-api/authentication#getting-started). Make sure to log in with the Community Manager's credentials.

### Step 2: Enable personalised feed

To enable the personalized feed, you need to update the community settings with the following cURL request:

```bash
curl --location --request PUT 'https://auth.likeminds.community/community/settings' \
--header 'Authorization: {cm_access_token}' \
--header 'Content-Type: application/json' \
--data '{
    "community_settings": [
        {
            "enabled": true,
            "setting_sub_title": "Enable personalised feed in community",
            "setting_title": "Enable personalised feed",
            "setting_type": "enable_personalised_feed"
        }
    ]
}'

```

### Step 3: Set weigths for different metrics

The personalized feed relies on various metrics such as likes, comments, recency, and user interactions. Set the weights for these metrics using the following cURL request:

```bash
curl --location --request PATCH 'https://auth.likeminds.community/community/configurations' \
--header 'Content-Type: application/json' \
--header 'Authorization: {cm_access_token}' \
--data '{
    "description": "Personalised feed weights metadata for the community",
    "type": "personalised_feed_weights",
    "value": {
        "comments_metrics": {
            "max_threshold": 200,
            "weight": 10
        },
        "likes_metrics": {
            "max_threshold": 100,
            "weight": 5
        },
        "post_dampening_metrics": {
            "max_threshold": 100,
            "weight": 5
        },
        "recency_metrics": {
            "max_threshold": 100,
            "weight": 5
        },
        "user_groups_metrics": {
            "max_threshold": 50,
            "weight": 2
        },
        "user_topics_metrics": {
            "max_threshold": 100,
            "weight": 5
        },
        "user_connection_metrics": {
            "max_threshold": 100,
            "weight": 5
        }
    }
}'
```

:::note
The sample values in the cURL are subjective in nature, please change it as per your user group.
:::

### Step 4: Initiate Flutter Feed SDK and Navigate to Personalised Feed Screen

1. Follow the [Getting Started doc](../../getting-started.md) to initialize Flutter Feed SDK using `showFeedWithApiKey()` or `showFeedWithoutApiKey()` method accroding to your flow.
2. To navigate to the personalized feed screen, use the `LMFeedSocialScreen` widget with the feedType set to `LMFeedType.personalised`.

```dart
if (response.success) {
  MaterialPageRoute route = MaterialPageRoute(
    builder: (context) => const LMFeedSocialScreen(
        feedType: LMFeedType.personalised,
    ),
  );

  Navigator.pushReplacement(context, route);
}
```



================================================
File: feed/Flutter/Core/Guides/how-to-enable-post-sharing-and-parse-deep-links.md.md
================================================
---
sidebar_position: 9
title: How to Enable Post Sharing and Deep Links Parsing for Posts?
slug: /flutter/core/guide/how-to-enable-post-sharing-and-parse-deep-links
---

# How to Enable Post Sharing and Deep Links Parsing for Posts?

## Introduction

Enabling post sharing is a crucial feature that allows content to be shared outside the community, thereby increasing engagement and visibility. In this guide, you'll learn how to enable sharing for posts using the LikeMinds Feed Flutter SDK. This involves setting up the feed with the correct domain, triggering the share functionality, and implementing link parsing to handle shared links properly.

## Prerequisites

Before you begin, ensure the following:

- **LikeMinds Feed Flutter SDK:** The SDK must be properly installed and initialized in your Flutter project. Refer to the [installation guide](https://docs.likeminds.community/feed/Flutter/getting-started/) if needed.
- **Basic Understanding of Flutter:** Familiarity with Flutter widgets and navigation.
- **Link Handling Knowledge:** Basic understanding of handling deep links on both Android and iOS platforms.

## Steps

### Step 1: Initialize Feed with Domain Key

Pass the `domain` key While calling `initialize` method of `LMFeedCore` class inside your `main()` method.

```dart
void main() async {
  // initialize bindings
  WidgetsFlutterBinding.ensureInitialized();
...
  // initialize LikeMinds Feed SDK
  await LMFeedCore.instance.initialize(
    domain: "YOUR_DOMAIN_HERE",
  );
...
}
```

### Step 2: Trigger Share Post Flow

We directly open the default share options, based on the platform (iOS or Android), on the click of our default share button inside a post.

Our format of shared links for a post is - `https://YOUR-DOMAIN/post?post_id=POST-ID`

Alternatively, you can use the snippet below to call the function used in that button to trigger the share post flow on your end, if you are extending the existing Share button with customizations.

```dart
LMFeedDeepLinkHandler().sharePost("POST-ID"); // Pass the specific post ID here
```

### Step 3: Implement Link Parsing Function

Implement a link parsing function within your app to handle links clicked when posts are shared. This ensures that your app can capture and process these links correctly.

#### Official Documentation

-   Android - [Setup App links](https://docs.flutter.dev/cookbook/navigation/set-up-app-links)

-   iOS - [Setup universal links](https://docs.flutter.dev/cookbook/navigation/set-up-universal-links)

#### Common Steps

1. **Add Entries:** Add appropriate entries in `AndroidManifest.xml` for Android and `info.plist` for iOS.
2. **Server-Side Verification:** Build a server-side link verification system for iOS.
3. **Intercept Links:** Use a package to intercept and handle the link when the app opens.

Once you have verified that your app is opening with the link, proceed to the next step.

### Step 4: Check Link Source

Verify if the incoming link is from LikeMinds and contains the necessary post information.

#### Link Format

The format of shared links for a post is: `https://YOUR-DOMAIN/post?post_id=POST-ID`

Use the following Dart snippet to check and process the link:

```dart
// Get the initial link with which the app was opened
final initialLink = "YOUR-PARSED-LINK";

// Parse it using Uri.parse()
final uri = Uri.parse(initialLink);

// Check if URI is absolute
if (uri.isAbsolute) {
    // Check for LM post detail link schema
    // It will contain a /post segment
    // and a post id along with it
    if (uri.path == '/post') {
        List<String> secondPath = initialLink.split('post_id=');
        if (secondPath.length > 1 && secondPath[1] != null) {
        // post_id is the secondSegment here
        String postId = secondPath[1];

        // Call showFeedWithoutApiKey method
        // This will call the onboarding APIs, required for
        // the proper functioning of the Feed SDK
        LMResponse response =
            await LMFeedCore.instance.showFeedWithoutApiKey();

            if (response.success) {
                navigateToPostDetailScreen(postId); // Implemented below
            } else {
                // handle error state using
                // response.errorMessage
            }
        }
    }
}
```

### Step 5: Navigate to Post Detail Screen

After parsing the link and obtaining the postId, navigate to the LMPostDetailScreen using the following snippet:

```dart
void navigateToPostDetailScreen(String postId) {
    // Build a material route using your preferred navigation method
    MaterialPageRoute route = MaterialPageRoute(
            builder: (context) => LMFeedPostDetailScreen(
            postId: postId, // Required variable
        ),
    );
    // Navigate to post details screen
    Navigator.of(context).push(route);
}
```

This completes the setup for handling shared post links and navigating to the appropriate screens within your app.



================================================
File: feed/Flutter/Core/Guides/how-to-filter-feed-based-on-custom-widget.md
================================================
---
sidebar_position: 15
title: How to filter feed based on values in the custom widget?
slug: /flutter/core/guide/how-to-flitter-feed-based-on-values-in-the-custom-widget
---

# How to filter feed based on values in the custom widget?

## Introduction

In this guide, you'll learn how to filter feed based on values in the custom widget using the LikeMinds Feed Flutter SDK. `LMFeedList` widget can be used to render feed with a particular custom widget id.

## Prerequisites

Before you begin, ensure the following:

- **LikeMinds Feed Flutter SDK**: The SDK must be properly installed and initialized in your Flutter project. Refer to the [installation guide](https://docs.likeminds.community/feed/Flutter/getting-started/) if needed.
- **Basic Understanding of Flutter Widgets**: Familiarity with Flutter widgets and layout concepts.
- **Knowledge of Builder Pattern**: Understanding of the builder pattern in Dart, as it is used to customize and create widgets dynamically.
- **Familiarity with `copyWith` Method**: Knowledge of the `copyWith` method, which allows you to create modified copies of objects while retaining their original properties.

## Steps

### Step 1: Get widget id using getWidgets() method from LikeMinds-Feed-SDK

```dart
// variable to store widgetIds
List<String>? widgetIds;

// create GetWidgetRequest object
GetWidgetRequest request = (GetWidgetRequestBuilder()
      ..searchKey("metadata.YOUR_CUSTOM_KEY")
      ..searchValue("YOUR_CUSTOM_VALUE")
      ..page(1)
      ..pageSize(10))
    .build();

// fetch widgets data
GetWidgetResponse response =
    await LMFeedCore.instance.lmFeedClient.getWidgets(request);

// assign widgetIds in case of successful response
if (response.success) {
  widgetIds = response.widgets?.map((widget) => widget.id).toList();
}
```

### Step 2: Create a new screen using Scaffold widget to utilize LMFeedList widget.

```dart
class LMCustomFeed extends StatelessWidget {
  LMCustomFeed({
    super.key,
    required this.widgetIds,
  });
  // List to store custom widget ids
  final List<String> widgetIds;

  // create a pagingController to pass in LMFeedList
  final pagingController =
      PagingController<int, LMPostViewData>(firstPageKey: 1);
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Custom Widget Feed'),
      ),
      body: CustomScrollView(
        slivers: [
          LMFeedList(
            widgetIds: widgetIds,
            pagingController: pagingController,
          ),
        ],
      ),
    );
  }
}
```

### Step 3: Navigate to above create Custom Widget Feed Screen

```dart
// create a route to custom widget feed with widget ids
final customFeedRoute = MaterialPageRoute(
  builder: (context) => LMCustomFeed(
    // replace the ids with the specific widget IDs 
    // based on which you want to filter the feed
    widgetIds: [widgetIds.first],
  ),
);

// navigate to custom widget feed screen
Navigator.push(context, customFeedRoute);
```



================================================
File: feed/Flutter/Core/Guides/how-to-render-feed-for-a-particular-topic.md
================================================
---
sidebar_position: 12
title: How to render feed for a particular topic?
slug: /flutter/core/guide/how-to-render-feed-for-a-particular-topic
---

# How to render feed for a particular topic?

## Introduction

In this guide, you'll learn how to render feed for a particular topic using the LikeMinds Feed Flutter SDK. `LMFeedList` widget can be used to render feed with a particular topic.

## Prerequisites

Before you begin, ensure the following:

- **LikeMinds Feed Flutter SDK**: The SDK must be properly installed and initialized in your Flutter project. Refer to the [installation guide](https://docs.likeminds.community/feed/Flutter/getting-started/) if needed.
- **Feed Enabled**: Ensure that Feed is enabled on the dashboard for your project.
- **Basic Understanding of Flutter Widgets**: Familiarity with Flutter widgets and layout concepts.
- **Knowledge of Builder Pattern**: Understanding of the builder pattern in Dart, as it is used to customize and create widgets dynamically.
- **Familiarity with `copyWith` Method**: Knowledge of the `copyWith` method, which allows you to create modified copies of objects while retaining their original properties.

## Steps

### Step 1: Create a new screen using `Scaffold` widget to utilize `LMFeedList` widget.

```dart
class LMTopicFeed extends StatelessWidget {
  LMTopicFeed({
    super.key,
    required this.selectedIds,
  });
  // List to store selected topic ids
  final List<String> selectedIds;

  // create a pagingController to pass in LMFeedList
  final pagingController =
      PagingController<int, LMPostViewData>(firstPageKey: 1);
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Topic Feed'),
      ),
      body: CustomScrollView(
        slivers: [
          LMFeedList(
            selectedTopicIds: selectedIds,
            pagingController: pagingController,
          ),
        ],
      ),
    );
  }
}
```

### Step 2: Navigate to above create Topic Feed Screen

```dart
  // create a route to topic feed with selected topic ids
  final topicFeedRoute = MaterialPageRoute(
    builder: (context) => LMTopicFeed(
      selectedIds: ["TOPIC_ID"],
    ),
  );

  // navigate to topic feed screen
  Navigator.push(context, topicFeedRoute);
```


================================================
File: feed/Flutter/Core/Guides/how-to-show-comment-list-as-bottomsheet.md
================================================
---
sidebar_position: 6
title: How to show Comment List as bottom sheet?
slug: /flutter/core/guide/how-to-show-comment-list-as-bottom-sheet
---

# How to show Comment List as bottom sheet?

## Introduction

In this guide, you'll learn how to show comment list as bottom sheet using `LMFeedCommentList` Widget.

## Prerequisites

Before you begin, ensure the following:

- **LikeMinds Feed Flutter SDK**: The SDK must be properly installed and initialized in your Flutter project. Refer to the [installation guide](https://docs.likeminds.community/feed/Flutter/getting-started/) if needed.
- **Feed Enabled**: Ensure that Feed is enabled on the dashboard for your project.
- **Basic Understanding of Flutter Widgets**: Familiarity with Flutter widgets and layout concepts.
- **Knowledge of Builder Pattern**: Understanding of the builder pattern in Dart, as it is used to customize and create widgets dynamically.
- **Familiarity with `copyWith` Method**: Knowledge of the `copyWith` method, which allows you to create modified copies of objects while retaining their original properties.

## Steps

### Step 1 : Customize Post Widget

Create an instance of `LMFeedSocialScreen`, provide a `postBuilder` to customize the post widget `onPostTap` method to show bottom sheet. Here’s how you can achieve this:

```dart
// crate an instance of LMFeedSocialScreen
final LMFeedSocialScreen feedScreen = LMFeedSocialScreen(
  // postBuilder to override onPostTap callback
  postBuilder: (context, postWidget, postData) => postWidget.copyWith(
    // override onPostTap callback and show bottom sheet
    onPostTap: (context, postData) {
      // use flutter's `showBottomSheet()` method to show a bottom sheet
      showBottomSheet(
        context: context,
        builder: (context) {
          // return a custom scroll view to render a scrollable view with comment list
          return CustomScrollView(
            slivers: [
              // use LMFeedCommentList widget to render comment list view
              LMFeedCommentList(postId: postData.id),
              SliverToBoxAdapter(
                // use LMFeedBottomTextField widget to render textfield to enter new comments
                child: LMFeedBottomTextField(
                  postId: postData.id,
                  focusNode: FocusNode(),
                ),
              ),
            ],
          );
        },
      );
    },
  ),
);
```

### Step 2: Navigation to Feed Screen

Navigate to `LMFeedSocialScreen` using Flutter's `Navigator` class

```dart
// create the route to feed screen
MaterialPageRoute route = MaterialPageRoute(
      builder: (context) => feedScreen,
);

// navigate to the feed screen
Navigator.of(context).push(route);
```

In this example:

- `postBuilder` allows you to modify the **[PostWidget](../../UI/Post/post_widget.md)** before it's displayed.
- `onPostTap` allows you to modify the handling of tap above a **[PostWidget](../../UI/Post/post_widget.md)**.




================================================
File: feed/Flutter/Core/Guides/how-to-use-custom-media-upload-service.md
================================================
---
sidebar_position: 13
title: How to Add your own Media Upload Service?
slug: /flutter/core/guide/how-to-use-custom-media-upload-service
---

# How to Add your own Media Upload Service over LikeMinds Feed SDK?

## Introduction
This guide explains how to implement media uploads and post creation as separate operations using the LikeMinds Feed SDK. Breaking these operations into distinct steps provides better control over the upload process and enables features like progress tracking and error handling.

## Prerequisites
- LikeMinds Feed SDK initialized in your project, guide [here](https://docs.likeminds.community/feed/Flutter/getting-started/)
- Basic understanding of Dart/Flutter asynchronous programming
- Access to `LMFeedPostBloc` and related models

## Implementation Steps

### Step 1: Create your own Media Upload Service
Create your own function of uploading media to your preferred destination. This could be an AWS bucket, Firebase Storage, or more file storage options. Our goal is to upload the media straight to the destination, and then use the link of that media while creating the post. So, create a function that uploads your chosen media, and then parses the data into `LMAttachmentViewData` to be sent in post creation. 

```dart
Future<List<LMAttachmentViewData>> uploadMedia(){
    /// create a function that uploads your media to your preferred destination
    /// parse the returned data into the type of LMAttachmentViewData
}
```

Alternatively, you can handle the upload of media files to the LikeMinds server. The implementation includes progress tracking and proper error handling using a broadcast StreamController. The `uploadMedia` function returns a Future containing a list of uploaded media attachments.

```dart
Future<List<LMAttachmentViewData>> uploadMedia({
  required List<LMAttachmentViewData> mediaFiles,
  required LMUserViewData user,
  Function(double)? onProgressUpdate,
}) async {
  try {
    // Create progress controller
    StreamController<double> progressController = StreamController<double>.broadcast();
    
    // Subscribe to progress updates if needed
    if (onProgressUpdate != null) {
      progressController.stream.listen(onProgressUpdate);
    }

    // Create a completer to wait for the upload result
    Completer<List<LMAttachmentViewData>> uploadCompleter = Completer();

    // Subscribe to bloc states
    final subscription = LMFeedPostBloc.instance.stream.listen((state) {
      if (state is LMFeedMediaUploadedState) {
        // Media upload completed successfully
        uploadCompleter.complete(state.mediaViewData);
      } else if (state is LMFeedPostErrorState) {
        // Upload failed
        uploadCompleter.completeError(state.errorMessage ?? 'Upload failed');
      }
    });

    // Add upload media event to bloc
    LMFeedPostBloc.instance.add(
      LMFeedUploadMediaEvent(
        postMedia: mediaFiles,
        user: user,
        progressController: progressController,
      ),
    );

    // Wait for the result
    final result = await uploadCompleter.future;
    
    // Clean up subscription
    subscription.cancel();
    
    return result;
  } catch (e) {
    print('Error uploading media: $e');
    throw e;
  }
}
```

### Step 2: Create a Post using `LMFeedPostBloc`
After media upload completes, this step handles the actual post creation. The function accepts various parameters including the uploaded media attachments, post text, topics, and optional heading. It returns a Future containing the created post data.

:::note
The `mediaAttachments` parameter accepts a `List<LMAttachmentViewData>` based on which if there are files in those attachments, it uploads them to the media server.
:::

```dart
Future<LMPostViewData> createPost({
  required LMUserViewData user,
  required String postText,
  required List<LMTopicViewData> topics,
  List<LMAttachmentViewData>? mediaAttachments,
  String? heading,
  int? feedroomId,
}) async {
  try {
    // Create a completer to wait for the post creation result
    Completer<LMPostViewData> postCompleter = Completer();

    // Subscribe to bloc states
    final subscription = LMFeedPostBloc.instance.stream.listen((state) {
      if (state is LMFeedNewPostUploadedState) {
        // Post created successfully
        postCompleter.complete(state.postData);
      } else if (state is LMFeedNewPostErrorState) {
        // Post creation failed
        postCompleter.completeError(state.errorMessage ?? 'Post creation failed');
      }
    });

    // Add create post event to bloc
    LMFeedPostBloc.instance.add(
      LMFeedCreateNewPostEvent(
        user: user,
        postText: postText,
        heading: heading,
        postMedia: mediaAttachments,
        selectedTopics: topics,
        feedroomId: feedroomId,
      ),
    );

    // Wait for the result
    final result = await postCompleter.future;
    
    // Clean up subscription
    subscription.cancel();
    
    return result;
  } catch (e) {
    print('Error creating post: $e');
    throw e;
  }
}
```

### Step 3: Combining Media upload and Post Creation
This step demonstrates how to combine both functions in a practical scenario, showing the complete flow from media upload to post creation with proper error handling.

```dart
Future<void> createPostWithMedia() async {
  try {
    // Get your user data and topics
    LMUserViewData currentUser = getCurrentUser();
    List<LMTopicViewData> selectedTopics = getSelectedTopics();

    // Prepare media files
    List<LMAttachmentViewData> mediaFiles = [
      // Your media files here
    ];

    // Step 1: Upload media first
    final uploadedMedia = await uploadMedia(
      mediaFiles: mediaFiles,
      user: currentUser,
      onProgressUpdate: (progress) {
        print('Upload progress: ${progress * 100}%');
      },
    );

    // Step 2: Create post with uploaded media
    final createdPost = await createPost(
      user: currentUser,
      postText: "My post text",
      topics: selectedTopics,
      mediaAttachments: uploadedMedia,
      heading: "Optional heading",
    );

    print('Post created successfully with ID: ${createdPost.id}');

  } catch (e) {
    print('Error in post creation process: $e');
  }
}
```

### Step 4: Customize the Compose Screen (Optional)

To integrate your custom post creation function with the compose screen, you can modify the `LMFeedComposeScreen` widget. This is done by providing a custom `composeAppbarBuilder` parameter.

The `composeAppbarBuilder` is a function that returns an AppBar widget for the compose screen. By default, this AppBar contains a button that handles post creation. You can override this button's functionality to use your `createPostWithMedia()` function while still leveraging the built-in post validation using the `validateUser` paramter in the builder.


## Conclusion
This implementation provides a robust solution for handling media uploads and post creation separately in your application. The separation of concerns allows for better error handling and progress tracking during the upload process. The modular approach makes it easier to maintain and modify the code as needed.


================================================
File: feed/Flutter/Core/Guides/manage-user-connection.md
================================================
---
sidebar_position: 10
title: How to Manage User Connections?
slug: /flutter/core/guide/how-to-manage-user-connection
---

# How to Manage User Connections?

## Introduction

In this guide, you'll learn how to manage user connections using the [sendConnection](../../Data/Connection/send_connection.md) and [updateConnection](../../Data/Connection/update_connection.md) methods. These methods facilitate sending connection requests and updating connection statuses, similar to functionality found on platforms like LinkedIn and Instagram. We will cover various scenarios including two-way connections and one-way connections with or without approval.

## Prerequisites

Before you begin, ensure the following:

- **LikeMinds Feed Flutter SDK:** The SDK must be properly installed and initialized in your Flutter project. Refer to the [installation guide](../../getting-started.md) if needed.

## Steps

### Step 1: Get an instance of LMFeedClient

```dart
final LMFeedClient lmFeedClient = LMFeedCore.client;
```

### Step 2: Send a Connection Request

Sending a connection request allows a user to initiate a connection with another user. This process can be configured for different types of connections, including two-way or one-way connections with or without auto-acceptance. Below are the steps to create and send a connection request based on the type of connections you want to establish.

1. **Two-Way Connection**

   To initiate a two-way connection request, user X sends a request to user Y. User Y must accept or reject the request. Upon acceptance, both users become connected.

   ```dart
   // Create a SendConnectionRequest object using the builder
   final SendConnectionRequest sendConnectionRequest = SendConnectionRequestBuilder()
     ..receiverUUID('y_uuid') // Replace with the UUID of user Y
     ..connectionType(ConnectionType.twoWay) // Indicates a mutual connection is required
     .build();

   // Send the connection request
   final LMResponse<void> sendConnectionResponse = await lmFeedClient.sendConnection(sendConnectionRequest);

   // Process the response
   if (sendConnectionResponse.success) {
     // Handle successful connection request
     handleSendConnectionSuccess(sendConnectionResponse);
   } else {
     // Handle error message
     handleSendConnectionError(sendConnectionResponse.errorMessage);
   }
   ```

2. **One-Way Connection (Auto-Accepted)**

   In this scenario, user X follows user Y without requiring approval from Y. User X becomes a follower automatically.

   ```dart
   // Create a SendConnectionRequest object using the builder
   final SendConnectionRequest sendConnectionRequest = SendConnectionRequestBuilder()
     ..receiverUUID('y_uuid') // Replace with the UUID of user Y
     ..connectionType(ConnectionType.oneWay) // Indicates a one-way connection
     ..connectionRequestAutoAccepted(true) // Indicates auto-acceptance
     .build();

   // Send the connection request
   final LMResponse<void> sendConnectionResponse = await lmFeedClient.sendConnection(sendConnectionRequest);

   // Process the response
   if (sendConnectionResponse.success) {
     // Handle successful connection request
     handleSendConnectionSuccess(sendConnectionResponse);
   } else {
     // Handle error message
     handleSendConnectionError(sendConnectionResponse.errorMessage);
   }
   ```

3. **One-Way Connection (Approval Required)**

   User X follows user Y, but Y must approve the request for X to become a follower.

   ```dart
   // Create a SendConnectionRequest object using the builder
   final SendConnectionRequest sendConnectionRequest = SendConnectionRequestBuilder()
     ..receiverUUID('y_uuid') // Replace with the UUID of user Y
     ..connectionType(ConnectionType.oneWay) // Indicates a one-way connection
     ..connectionRequestAutoAccepted(false) // Indicates approval is required
     .build();

   // Send the connection request
   final LMResponse<void> sendConnectionResponse = await lmFeedClient.sendConnection(sendConnectionRequest);

   // Process the response
   if (sendConnectionResponse.success) {
     // Handle successful connection request
     handleSendConnectionSuccess(sendConnectionResponse);
   } else {
     // Handle error message
     handleSendConnectionError(sendConnectionResponse.errorMessage);
   }
   ```

### Step 3: Update a Connection

Once a connection request is sent, the status of the request can be updated based on user actions. This includes accepting or rejecting requests for two-way connections or one-way connections with approval. The steps below show how to build and send an update request to manage the connection status.

1. **Two-Way Connection**

   When user Y receives a two-way connection request from user X, Y can either accept or reject the request. If accepted, both users will be connected.

   ```dart
   // Create an UpdateConnectionRequest object using the builder
   final UpdateConnectionRequest updateConnectionRequest = UpdateConnectionRequestBuilder()
     ..receiverUUID('x_uuid') // Replace with the UUID of user X
     ..action(ConnectionAction.accept) // Action to be taken by Y
     ..connectionType(ConnectionType.twoWay) // Indicates a two-way connection
     .build();

   // Update the connection
   final LMResponse<void> updateConnectionResponse = await lmFeedClient.updateConnection(updateConnectionRequest);

   // Process the response
   if (updateConnectionResponse.success) {
     // Handle successful connection update
     handleUpdateConnectionSuccess(updateConnectionResponse);
   } else {
     // Handle error message
     handleUpdateConnectionError(updateConnectionResponse.errorMessage);
   }
   ```

2. **One-Way Connection (Approval Required)**

   For a one-way connection where approval is required, when user Y receives a follow request from user X, Y can accept or reject the request. If accepted, user X becomes a follower.

   ```dart
   // Create an UpdateConnectionRequest object using the builder
   final UpdateConnectionRequest updateConnectionRequest = UpdateConnectionRequestBuilder()
     ..receiverUUID('x_uuid') // Replace with the UUID of user X
     ..action(ConnectionAction.accept) // Action to be taken by Y
     ..connectionType(ConnectionType.oneWay) // Indicates a one-way connection
     .build();

   // Update the connection
   final LMResponse<void> updateConnectionResponse = await lmFeedClient.updateConnection(updateConnectionRequest);

   // Process the response
   if (updateConnectionResponse.success) {
     // Handle successful connection update
     handleUpdateConnectionSuccess(updateConnectionResponse);
   } else {
     // Handle error message
     handleUpdateConnectionError(updateConnectionResponse.errorMessage);
   }
   ```

3. **Reject One-Way Connection (Unfollow)**

   If user X decides to reject a one-way follow request from user Y, user X will become an unfollower.

   ```dart
   // Create an UpdateConnectionRequest object using the builder
   final UpdateConnectionRequest updateConnectionRequest = UpdateConnectionRequestBuilder()
     ..receiverUUID('y_uuid') // Replace with the UUID of user Y
     ..action(ConnectionAction.reject) // Indicates rejection of the request
     ..connectionType(ConnectionType.oneWay) // Indicates a one-way connection
     .build();

   // Update the connection
   final LMResponse<void> updateConnectionResponse = await lmFeedClient.updateConnection(updateConnectionRequest);

   // Process the response
   if (updateConnectionResponse.success) {
     // Handle successful connection update
     handleUpdateConnectionSuccess(updateConnectionResponse);
   } else {
     // Handle error message
     handleUpdateConnectionError(updateConnectionResponse.errorMessage);
   }
   ```



================================================
File: feed/Flutter/Core/Guides/post-creation.md
================================================
---
sidebar_position: 4
title: How to perform Post Creation without using LikeMinds UI?
slug: /flutter/core/guide/how-to-perform-post-creation
---

# How to perform Post Creation without using LikeMinds UI?

## Introduction

This guide will walk you through the process of implementing a custom post creation flow using the LikeMinds Feed Flutter SDK. You'll learn how to use the `LMFeedPostBloc` to create posts and handle attachments using the `LMAttachmentViewData` class.

## Prerequisites

Before you begin, ensure the following:

- **LikeMinds Feed Flutter SDK**: The SDK must be properly installed and initialized in your Flutter project. Refer to the [installation guide](https://docs.likeminds.community/feed/Flutter/getting-started/) if needed.
- **Feed Enabled**: Ensure that Feed is enabled on the dashboard for your project.
- **Basic Understanding of Flutter Widgets**: Familiarity with Flutter widgets and layout concepts.
- **Knowledge of Builder Pattern**: Understanding of the builder pattern in Dart, as it is used to customize and create widgets dynamically.

## Steps

### Step 1: Understanding the `LMFeedPostBloc`

The `LMFeedPostBloc` is responsible for managing the state of post-related operations in the Feed SDK. It gives access to a number of different events and states that can be used to build your entire Post handling UI without worrying about the business logic.

To create a post, you'll need to add an event to the BLoC called `LMFeedCreateNewPostEvent`, which we will discuss further.

### Step 2: Understanding `LMAttachmentViewData`

The `LMAttachmentViewData` class represents media attachments for a post. It's has multiple factory constructors for different scenarios.

Here's a brief overview:

```dart
enum LMMediaType { none, video, image, document, link, widget, repost, poll }

class LMAttachmentViewData {
  final LMMediaType attachmentType;
  final LMAttachmentMetaViewData attachmentMeta;

  // Factory constructors
  factory LMAttachmentViewData.fromAttachmentMeta({...});
  factory LMAttachmentViewData.fromMediaUrl({...});
  factory LMAttachmentViewData.fromMediaBytes({...});
  factory LMAttachmentViewData.fromMediaPath({...});

  // Method to map media type to integer
  int mapMediaTypeToInt() {...}
}
```

The class uses different factory constructors based on how you want to create the attachment:

- `fromAttachmentMeta`: When you already have an `LMAttachmentMetaViewData` object.
- `fromMediaUrl`: When you have a URL for the media.
- `fromMediaBytes`: When you have the media as bytes (`Uint8List`).
- `fromMediaPath`: When you have a local file path for the media.

The `LMMediaType` enum provides various media types you can use.

When creating an attachment, make sure to specify the correct media type. To do this you can also use, but always prefer using the `LMMediaType` enum.

```dart
LMAttachmentViewData attachment; //image type attachment

/// Function to map the LMMediaType enum to its int value
int attachmentType = attachment.mapMediaTypeToInt(); // 1

/// Function to map the attachment int value to its LMMediaType enum
LMMediaType type = mapIntToMediaType(attachmentType); // LMMediaType.image
```

### Step 3: Creating Attachments

To create an attachment for your post, use one of the factory constructors of `LMAttachmentViewData`. Here's an example using `fromMediaPath`:

```dart
LMAttachmentViewData attachment = LMAttachmentViewData.fromMediaPath(
  path: "path/to/your/file",
  attachmentType: LMMediaType.image,
  // Add other parameters as needed
);
```

### Step 4: Preparing Post Data

Before creating a post, you need to prepare the necessary data. Here's a breakdown of the required information:

1. `LMUserViewData user`: The current user object.
2. `String? postText`: The main content of the post (optional).
3. `String? heading`: The post heading (optional).
4. `int? feedroomId`: The ID of the feedroom where the post will be created (if applicable).
5. `List<LMUserTagViewData>? userTagged`: Any users tagged in the post (optional).
6. `List<LMTopicViewData> selectedTopics`: Any topics associated with the post.
7. `List<LMAttachmentViewData>? postMedia`: An array of `LMAttachmentViewData` objects representing attachments (optional).

:::note

- Either one of `postText`, `heading`, or `postMedia` should be not null.
- The parameter `selectedTopics` can be an empty list, but should not be null.
- You can get the instance of the current logged-in user anytime using the helper function of the local preference utility - `LMFeedLocalPreference.instance.fetchUserData();`.
:::

### Step 5: Creating a Post

To create a post, use the following code snippet:

```dart
LMFeedPostBloc.instance.add(
  LMFeedCreateNewPostEvent(
    user: user, // Current user object
    postText: postContent, // The main content of the post
    selectedTopics: selectedTopics, // List of selected topics
    postMedia: [attachment], // List of LMAttachmentViewData objects
    heading: postHeading, // Optional heading
    feedroomId: feedroomId, // ID of the feedroom (if applicable)
    userTagged: taggedUsers, // List of tagged users
  ),
);
```

### Step 6: Listening for Post Creation Result

The `LMFeedPostBloc` automatically handles all the state changes, and the built-in UI responds to it accordingly. Additionally, to listen to the result of the post creation:

Listen to the `LMFeedPostBloc` state changes:

```dart
LMFeedPostBloc.instance.stream.listen((state) {
  if (state is LMFeedNewPostUploadedState) {
    // Post created successfully
    // Handle success (e.g., show a success message, navigate to feed)
  } else if (state is LMFeedNewPostErrorState) {
    // Error occurred while creating post
    // Handle error (e.g., show error message)
  }
});
```

## Steps to Implement Post Creation with Custom Widget

### Step 1: Build an Attachment

Using the steps above as reference, now build an attachment object of type `LMAttachmentViewData` and add it into your list of attachments. Here's how:

```dart
List<LMAttachmentViewData> attachments = [];
final attachment = LMAttachmentViewData.fromAttachmentMeta(
  attachmentType: LMMediaType.widget,
  attachmentMeta: (LMAttachmentMetaViewDataBuilder()
    ..meta({
      // Map<String, dynamic>
    }))
    .build(),
);
attachments.add(attachment);
```

### Step 2: Create Post with Attachment

Use your list of attachments to send alongside your post data, in the `LMFeedCreateNewPostEvent` event, and then add the event to an instance of `LMFeedPostBloc`.

## Additional Information

- The `LMAttachmentViewData` class uses a builder pattern. If you need more control over the creation process, you can use `LMAttachmentViewDataBuilder`.
- Handle attachment uploads separately before creating the post, and use the returned URLs or file paths to create `LMAttachmentViewData` objects.
- Be mindful of the different media types and use the appropriate factory constructor for each type.
- Implement proper error handling and user feedback in your UI.
- For polls, widgets, or other complex media types, refer to the SDK documentation for specific parameters and usage.
- For more details on post creation features or specific media types, please reach out to us.



================================================
File: feed/Flutter/Core/Guides/render-custom-userview-in-comment-tile.md
================================================
---
sidebar_position: 8
title: How to Render Custom User View in Comment?
slug: /flutter/core/guide/how-to-render-custom-user-view-in-comment
---

# How to Render Custom UserView in Comment?

## Introduction

In this guide, you'll learn how to customize the user view in comment widgets using the LikeMinds Feed Flutter SDK. Specifically, we'll show you how to modify the User Profile Picture widget within the comment widget to match your application's design.

## Prerequisites

Before you begin, ensure the following:

- **LikeMinds Feed Flutter SDK**: The SDK must be properly installed and initialized in your Flutter project. Refer to the [installation guide](https://docs.likeminds.community/feed/Flutter/getting-started/) if needed.
- **Feed Enabled**: Ensure that Feed is enabled on the dashboard for your project.
- **Basic Understanding of Flutter Widgets**: Familiarity with Flutter widgets and layout concepts.
- **Knowledge of Builder Pattern**: Understanding of the builder pattern in Dart, as it is used to customize and create widgets dynamically.
- **Familiarity with `copyWith` Method**: Knowledge of the `copyWith` method, which allows you to create modified copies of objects while retaining their original properties.

## Steps

### Step 1: Customize Comment Widget

Create an instance of `LMFeedPostDetailScreen` and provide `commentBuilder` to customize the comment widget according to your UI requirements. Here’s how you can achieve this:

```dart
// post details screen widget to render comments
final Widget postDetailScreen = LMFeedPostDetailScreen(
  postId: "post_id", // replace with the postId
  // customize comment widget using commentBuilder
  commentBuilder: (context, commentWidget, commentData) {
    // return comment widget with your custom user profile Widget
    return commentWidget.copyWith(
      // change profile picture to Flutter's CircleAvatar Widget
        profilePicture: CircleAvatar(
            backgroundImage: NetworkImage(
              postData.user.imageUrl ?? "",
            ),
        )
    );
  },
);
```

### Step 2: Navigation to Feed Screen

Navigate to `LMFeedPostDetailScreen` using Flutter's `Navigator` class

```dart
// create the route to feed screen
MaterialPageRoute route = MaterialPageRoute(
      builder: (context) => postDetailScreen,
);

// navigate to the feed screen
Navigator.of(context).push(route);
```

To explore all available customizations for the comment widget refer to the [`LMFeedCommentWidget`](../../UI/comment/comment_widget) documentation.



================================================
File: feed/Flutter/Core/Guides/render-custom-userview-in-post-ui.md
================================================
---
sidebar_position: 7
title: How to Render Custom UserView in Post?
slug: /flutter/core/guide/how-to-render-custom-userview-in-post
---

# How to Render Custom UserView in Post?

## Introduction

In this guide, you'll learn how to customize the user view in **Post** widgets using the LikeMinds Feed Flutter SDK. Specifically, we'll show you how to modify the User Profile Picture widget within the post header to match your application's design. This customization involves using the [`LMFeedPostHeader`](../../UI/Post/header.md) and [`LMFeedPostWidget`](../../UI/Post/post_widget.md) components to replace the default profile picture with your own custom widget.

## Prerequisites

Before you begin, ensure the following:

- **LikeMinds Feed Flutter SDK**: The SDK must be properly installed and initialized in your Flutter project. Refer to the [installation guide](https://docs.likeminds.community/feed/Flutter/getting-started/) if needed.
- **Feed Enabled**: Ensure that Feed is enabled on the dashboard for your project.
- **Basic Understanding of Flutter Widgets**: Familiarity with Flutter widgets and layout concepts.
- **Knowledge of Builder Pattern**: Understanding of the builder pattern in Dart, as it is used to customize and create widgets dynamically.
- **Familiarity with `copyWith` Method**: Knowledge of the `copyWith` method, which allows you to create modified copies of objects while retaining their original properties.

## Steps

The `profilePicture` is a part of the [`LMFeedPostHeader`](../../UI/Post/header.md) widget. To customize it, you need to pass a `headerBuilder` when customizing the [`LMFeedPostWidget`](../../UI/Post/post_widget.md) using the `postBuilder` in `LMFeedSocialScreen`.

To create an instance of `LMFeedSocialScreen` and customize the post widget according to your UI requirements, follow these steps:

### Step 1: Customize the Post Header

Create an instance of `LMFeedSocialScreen`, provide a `postBuilder` to customize the post widget according to your UI requirements. Here’s how you can achieve this:

```dart
// creating instance of `LMFeedSocialScreen`
final LMFeedSocialScreen feedScreen = LMFeedSocialScreen(
  // postBuilder to customize post ui
  postBuilder: (context, postWidget, postData) {
    // copy with method return a copy of post widget with overriding the passed value
    return postWidget.copyWith(
      // header builder to customize post header ui
      headerBuilder: (context, headerWidget, postData) {
        // copy with method return a copy of post header widget with overriding the passed value
        return headerWidget.copyWith(
          // change profile picture to Flutter's CircleAvatar Widget
          profilePicture: CircleAvatar(
            backgroundImage: NetworkImage(
              postData.user.imageUrl ?? "",
            ),
          )
        );
      },
    );
  },
);
```

### Step 2: Navigation to Feed Screen

Navigate to `LMFeedSocialScreen` using Flutter's `Navigator` class

```dart
// create the route to feed screen
MaterialPageRoute route = MaterialPageRoute(
      builder: (context) => feedScreen,
);

// navigate to the feed screen
Navigator.of(context).push(route);
```

To explore all available customizations for the post widget refer to the [`LMFeedPostHeader`](../../UI/Post/header.md) and [`LMFeedPostWidget`](../../UI/Post/post_widget.md) documentation.



================================================
File: feed/Flutter/Core/Screens/LMFeedActivityScreen.md
================================================
---
sidebar_position: 1
title: Activity Screen
slug: /flutter/core/screens/activity-screen
---

# Activity Screen

## Introduction

The **Activity Screen** (`LMFeedActivityScreen`) serves as the main interface for displaying a user's activity feed. It supports customizations for the **post**, **comment**, and **app bar** components through builders, styles, and configurations.

---

## 1. LMFeedActivityScreen Widget

**File Location:**  
[activity_screen.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/activity/activity_screen.dart)

### Class Declaration

```dart
class LMFeedActivityScreen extends StatefulWidget {
  /// uuid of the user whose activity feed is to be displayed.
  final String uuid;

  /// Builder for the post widget.
  final LMFeedPostWidgetBuilder? postBuilder;

  /// Builder for the comment widget.
  final LMFeedPostCommentBuilder? commentBuilder;

  /// Builder for app bar.
  final LMFeedAppBarBuilder? appBarBuilder;

  /// A screen that displays the activity feed.
  const LMFeedActivityScreen({
    super.key,
    required this.uuid,
    this.postBuilder,
    this.commentBuilder,
    this.appBarBuilder,
  });

  @override
  State<LMFeedActivityScreen> createState() => _LMFeedActivityScreenState();
}
```

#### Key Parameters

1. **`uuid`** (`String`, required): UUID of the user whose activity feed is to be displayed.
2. **`postBuilder`** (`LMFeedPostWidgetBuilder?`, optional): Builder for the post widget.
3. **`commentBuilder`** (`LMFeedPostCommentBuilder?`, optional): Builder for the comment widget.
4. **`appBarBuilder`** (`LMFeedAppBarBuilder?`, optional): Builder for the app bar.

For the complete source code, refer to the [GitHub link](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/activity/activity_screen.dart).

---

## 2. LMFeedActivityBuilderDelegate

**File Location:**  
[configurations/builder.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/activity/configurations/builder.dart)

### Class Declaration

```dart
class LMFeedActivityBuilderDelegate extends LMFeedWidgetBuilderDelegate {
  const LMFeedActivityBuilderDelegate();
}
```

The `LMFeedActivityBuilderDelegate` allows developers to customize the **post**, **comment**, and **app bar** widgets specifically for the activity screen.

### Methods in LMFeedActivityBuilderDelegate

1. **`postWidgetBuilder`**  
    **Definition:** Builds the widget for posts in the activity feed.  
    **Purpose:** Customizes the style and layout of posts.

   **Usage Example:**

   ```dart
   @override
   Widget postWidgetBuilder(
      BuildContext context, LMFeedPostWidget post, LMPostViewData postViewData,
      {LMFeedWidgetSource source = LMFeedWidgetSource.universalFeed}) {
     // Return a post widget with background color changed to blue
     return postWidget.copyWith(
      style: postWidget.style?.copyWith(
        backgroundColor: Colors.blue,
      ),
    );
   }
   ```

2. **`commentBuilder`**  
    **Definition:** Builds the widget for comments in the activity feed.  
    **Purpose:** Customizes the appearance and behavior of comments.

   **Usage Example:**

   ```dart
   @override
   Widget commentBuilder(BuildContext context, LMFeedCommentWidget commentWidget,
      LMPostViewData postViewData) {
     // Return a comment widget with background color changed to blue
     return commentWidget.copyWith(
          style: commentWidget.style?.copyWith(
            backgroundColor: Colors.blue,
          ),
        );
   }
   ```

3. **`appBarBuilder`**  
    **Definition:** Builds the app bar for the activity feed.  
    **Purpose:** Provides a way to customize the app bar.

   **Usage Example:**

   ```dart
   @override
   PreferredSizeWidget appBarBuilder(BuildContext context, LMFeedAppBar appBar) {
    // return an app bar with background color blue
    return appBar.copyWith(
      style: appBar.style?.copyWith(
        backgroundColor: Colors.blue,
      ),
    );
   }
   ```

### Remaining Methods

Explore the complete list of methods [here](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/activity/configurations/builder.dart).

---

## 3. LMFeedActivitySetting

**File Location:**  
[configurations/settings.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/activity/configurations/settings.dart)

```dart
class LMFeedActivitySetting {
  const LMFeedActivitySetting();
}
```

- **Purpose:** Provides configuration settings for the Activity Screen. No additional fields or methods are currently defined.

---

## 4. LMFeedActivityStyle

**File Location:**  
[configurations/style.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/activity/configurations/style.dart)

```dart
class LMFeedActivityStyle {
  const LMFeedActivityStyle();
}
```

- **Purpose:** Defines styling options for the Activity Screen. No fields or methods are currently defined.

---

## 5. LMFeedActivityConfig

**File Location:**  
[configurations/config.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/activity/configurations/config.dart)

### Class Declaration

```dart
class LMFeedActivityConfig {
  final LMFeedActivityBuilderDelegate builder;
  final LMFeedActivitySetting setting;
  final LMFeedActivityStyle style;

  const LMFeedActivityConfig({
    this.builder = const LMFeedActivityBuilderDelegate(),
    this.setting = const LMFeedActivitySetting(),
    this.style = const LMFeedActivityStyle(),
  });
}
```

### Usage Example: Injecting Custom Configuration

1. **Create a Custom Builder:**

   ```dart
   class CustomActivityBuilder extends LMFeedActivityBuilderDelegate {
    @override
    Widget postWidgetBuilder(
      BuildContext context, LMFeedPostWidget post, LMPostViewData postViewData,
      {LMFeedWidgetSource source = LMFeedWidgetSource.universalFeed}) {
       return Text('Custom Post Widget');
     }
   }
   ```

2. **Pass Custom Style or Setting along with Builder:**

   ```dart
   final customStyle = LMFeedActivityStyle();
   final customSetting = LMFeedActivitySetting();
   ```

3. **Inject the Custom Builder, Style, or Setting into the Config:**

   ```dart
   final activityConfig = LMFeedActivityConfig(
     builder: CustomActivityBuilder(),
     setting: customSetting(),
     style: customStyle(),
   );
   ```

4. **Initialize with Custom Config:**

   ```dart
   LMFeedCore.instance.initialize(
     config: LMFeedConfig(
       activityConfig: activityConfig,
     ),
   );
   ```

---

## 6. Summary

The **Activity Screen** provides a user interface for displaying activity feeds. Developers can customize components like **posts**, **comments**, and **app bars** using the `LMFeedActivityBuilderDelegate`. Configuration options are encapsulated in `LMFeedActivityConfig`, which allows for seamless integration of customizations tailored to specific design and functional requirements.



================================================
File: feed/Flutter/Core/Screens/LMFeedComposeScreen.md
================================================
---
sidebar_position: 2
title: Compose Screen
slug: /flutter/core/screens/compose-screen
---

# Compose Screen

## Introduction

The **Compose Screen** (`LMFeedComposeScreen`) serves as the interface for creating new feed posts. It supports various content types like text, media, and topics, and offers customization points for adapting the UI and behavior to specific requirements.

---

## 1. LMFeedComposeScreen Widget

**File Location:**  
[compose_screen.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/compose/compose_screen.dart)

### Class Declaration

```dart
class LMFeedComposeScreen extends StatefulWidget {
  /// A screen widget that facilitates the creation of a new feed post.
  const LMFeedComposeScreen({
    super.key,
    // Widget builder functions for customizations
    this.composeDiscardDialogBuilder,
    this.composeAppBarBuilder,
    this.composeContentBuilder,
    this.composeTopicSelectorBuilder,
    this.composeMediaPreviewBuilder,
    this.composeUserHeaderBuilder,
    // Config for the screen
    this.config,
    this.style,
    this.attachments,
    this.displayName,
    this.displayUrl,
    this.feedroomId,
    this.widgetSource,
  });

  @override
  State<LMFeedComposeScreen> createState() => _LMFeedComposeScreenState();
}
```

#### Key Parameters

1. **`key`** (`Key?`, optional): A key to uniquely identify the widget.
2. **`composeDiscardDialogBuilder`** (`Function(BuildContext context)?`, optional): Custom builder for the discard dialog.
3. **`composeAppBarBuilder`** (`PreferredSizeWidget Function(LMFeedAppBar oldAppBar, LMResponse<void> Function() onPostCreate, LMResponse<void> Function() validatePost, LMFeedButton createPostButton, LMFeedButton cancelButton, void Function(String) onValidationFailed)?`, optional): Custom builder for the app bar.
4. **`composeContentBuilder`** (`Widget Function()?`, optional): Custom builder for the content.
5. **`composeTopicSelectorBuilder`** (`Widget Function(BuildContext context, Widget topicSelector, List<LMTopicViewData>)?`, optional): Custom builder for the topic selector.

For the complete source code, refer to the [GitHub link](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/compose/compose_screen.dart).

---

## 2. LMFeedComposeBuilderDelegate

**File Location:**  
[builder.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/compose/configurations/builder.dart)

### Class Declaration

```dart
class LMFeedComposeBuilderDelegate extends LMFeedWidgetBuilderDelegate {
  const LMFeedComposeBuilderDelegate();
}
```

The `LMFeedComposeBuilderDelegate` allows developers to customize various aspects of the compose screen, such as dialogs, input fields, and post content layout.

### Methods in LMFeedComposeBuilderDelegate

1. **`appBarBuilder`**  
   **Definition:** Builds the app bar for the activity feed.  
   **Purpose:** Provides a way to customize the app bar.

   **Usage Example:**

   ```dart
    @override
    PreferredSizeWidget appBarBuilder(
      BuildContext context,
      LMFeedAppBar oldAppBar,
      LMResponse<void> Function() onPostCreate,
      LMResponse<void> Function() validatePost,
      LMFeedButton createPostButton,
      LMFeedButton cancelButton,
      void Function(String) onValidationFailed,
    ) {
      return oldAppBar.copyWith(
          style: oldAppBar.style?.copyWith(
        backgroundColor: Colors.blue,
      ));
    }
   ```

2. **`composeScreenUserHeaderBuilder`**  
   **Definition:** Builds the user header for the compose screen.
   **Purpose:** Customizes the user header UI and functionality.

   **Usage Example:**

   ```dart
   @override
   Widget composeScreenUserHeaderBuilder(
      BuildContext context, LMUserViewData user, LMFeedUserTile userTile) {
    return userTile;
   }
   ```

3. **`composeScreenTopicSelectorBuilder`**  
   **Definition:** Builds the topic selector for the compose screen.
   **Purpose:** Customizes the appearance and functionality of the topic selection widget.

   **Usage Example:**

   ```dart
   @override
   Widget composeScreenTopicSelectorBuilder(BuildContext context,
      Widget topicSelector, List<LMTopicViewData> selectedTopics) {
    return topicSelector;
   }
   ```

### Remaining Methods

Explore the complete list of methods [here](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/compose/configurations/builder.dart).

---

## 3. LMFeedComposeSetting

**File Location:**  
[settings.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/compose/configurations/settings.dart)

```dart
class LMFeedComposeSetting {
  const LMFeedComposeSetting();
}
```

- **Purpose:** Provides configuration settings for the Compose Screen. No additional fields or methods are currently defined.

---

## 4. LMFeedComposeStyle

**File Location:**  
[style.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/compose/configurations/style.dart)

```dart
class LMFeedComposeStyle {
  const LMFeedComposeStyle();
}
```

- **Purpose:** Defines styling options for the Compose Screen. No fields or methods are currently defined.

---

## 5. LMFeedComposeConfig

**File Location:**  
[config.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/compose/configurations/config.dart)

### Class Declaration

```dart
class LMFeedComposeConfig {
  final LMFeedComposeBuilderDelegate builder;
  final LMFeedComposeSetting setting;
  final LMFeedComposeStyle style;

  const LMFeedComposeConfig({
    this.builder = const LMFeedComposeBuilderDelegate(),
    this.setting = const LMFeedComposeSetting(),
    this.style = const LMFeedComposeStyle(),
  });
}
```

### Usage Example: Injecting Custom Configuration

1. **Create a Custom Builder:**

   ```dart
   class CustomComposeBuilder extends LMFeedComposeBuilderDelegate {
      @override
      PreferredSizeWidget appBarBuilder(
        BuildContext context,
        LMFeedAppBar oldAppBar,
        LMResponse<void> Function() onPostCreate,
        LMResponse<void> Function() validatePost,
        LMFeedButton createPostButton,
        LMFeedButton cancelButton,
        void Function(String) onValidationFailed,
      ) {
        return oldAppBar.copyWith(
            style: oldAppBar.style?.copyWith(
          backgroundColor: Colors.blue,
        ));
      }
   }
   ```

2. **Pass Custom Style or Setting along with Builder:**

   ```dart
   final customStyle = LMFeedComposeStyle();
   final customSetting = LMFeedComposeSetting();
   ```

3. **Inject the Custom Builder, Style, or Setting into the Config:**

   ```dart
   final composeConfig = LMFeedComposeConfig(
     builder: CustomComposeBuilder(),
     setting: customSetting,
     style: customStyle,
   );
   ```

4. **Initialize with Custom Config:**

   ```dart
   LMFeedCore.instance.initialize(
     config: LMFeedConfig(
       composeConfig: composeConfig,
     ),
   );
   ```

---

## 6. Summary

The **Compose Screen** provides a user interface for creating new feed posts. Developers can customize components like dialogs, media pickers, and submit buttons using the `LMFeedComposeBuilderDelegate`. Configuration options are encapsulated in `LMFeedComposeConfig`, allowing seamless integration of customizations tailored to specific design and functional requirements.



================================================
File: feed/Flutter/Core/Screens/LMFeedCreatePollScreen.md
================================================
---
sidebar_position: 3
title: Create Poll Screen
slug: /flutter/core/screens/create-poll-screen
---

# Create Poll Screen

## Introduction

The **Create Poll Screen** (`LMFeedCreatePollScreen`) serves as the interface for creating polls. It provides customization options through builders, settings, and styles to meet specific design and functional requirements.

---

## 1. LMFeedCreatePollScreen Widget

**File Location:**  
[create_poll_screen.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/poll/create_poll_screen.dart)

### Class Declaration

```dart
class LMFeedCreatePollScreen extends StatefulWidget {
  /// A screen widget that facilitates the creation of a new poll.
  const LMFeedCreatePollScreen({
    super.key,
    this.attachmentMeta,
    this.appBarBuilder,
    this.pollQuestionStyle,
    this.optionStyle,
    this.advancedButtonBuilder,
    this.postButtonBuilder,
    this.addOptionButtonBuilder,
  });

  @override
  State<LMFeedCreatePollScreen> createState() => _LMFeedCreatePollScreenState();
}
```

#### Key Parameters

1. **`key`** (`Key?`, optional): A key to uniquely identify the widget.
2. **`attachmentMeta`** (`LMAttachmentMetaViewData?`, optional): Metadata to prefill the poll data.
3. **`appBarBuilder`** (`LMFeedAppBarBuilder?`, optional): Custom builder for the app bar.
4. **`pollQuestionStyle`** (`LMFeedTextFieldStyle?`, optional): Style for the poll question.
5. **`optionStyle`** (`LMFeedTextFieldStyle?`, optional): Style for the poll options.

For the complete source code, refer to the [GitHub link](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/poll/create_poll_screen.dart).

---

## 2. LMFeedPollBuilderDelegate

**File Location:**  
[builder.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/poll/configurations/builder.dart)

### Class Declaration

```dart
class LMFeedPollBuilderDelegate extends LMFeedWidgetBuilderDelegate {
  const LMFeedPollBuilderDelegate();
}
```

The `LMFeedPollBuilderDelegate` allows developers to customize various aspects of the poll screen, such as dialogs, input fields, and poll options.

### Methods in LMFeedPollBuilderDelegate

1. **`pollWidgetBuilder`**  
    **Definition:** Builds the widget for poll UI.  
    **Purpose:** Customizes the appearance and behavior of poll UI.

   **Usage Example:**

   ```dart
   @override
   Widget pollWidgetBuilder(BuildContext context, LMFeedPoll pollWidget) {
    return pollWidget.copyWith();
   }
   ```

### Remaining Methods

Explore the complete list of methods [here](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/poll/configurations/builder.dart).

---

## 3. LMFeedPollSetting

**File Location:**  
[settings.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/poll/configurations/settings.dart)

```dart
class LMFeedPollSetting {
  const LMFeedPollSetting();
}
```

- **Purpose:** Provides configuration settings for the Create Poll Screen. No additional fields or methods are currently defined.

---

## 4. LMFeedPollStyle

**File Location:**  
[style.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/poll/configurations/style.dart)

```dart
class LMFeedPollStyle {
  const LMFeedPollStyle();
}
```

- **Purpose:** Defines styling options for the Create Poll Screen. No fields or methods are currently defined.

---

## 5. LMFeedPollConfig

**File Location:**  
[config.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/poll/configurations/config.dart)

### Class Declaration

```dart
class LMFeedPollConfig {
  final LMFeedPollBuilderDelegate builder;
  final LMFeedPollSetting setting;
  final LMFeedPollStyle style;

  const LMFeedPollConfig({
    this.builder = const LMFeedPollBuilderDelegate(),
    this.setting = const LMFeedPollSetting(),
    this.style = const LMFeedPollStyle(),
  });
}
```

### Usage Example: Injecting Custom Configuration

1. **Create a Custom Builder:**

   ```dart
   class CustomPollBuilder extends LMFeedPollBuilderDelegate {
    @override
    Widget pollWidgetBuilder(BuildContext context, LMFeedPoll pollWidget) {
      return pollWidget.copyWith();
    }
   }
   ```

2. **Pass Custom Style or Setting along with Builder:**

   ```dart
   final customStyle = LMFeedPollStyle();
   final customSetting = LMFeedPollSetting();
   ```

3. **Inject the Custom Builder, Style, or Setting into the Config:**

   ```dart
   final pollConfig = LMFeedPollConfig(
     builder: CustomPollBuilder(),
     setting: customSetting,
     style: customStyle,
   );
   ```

4. **Initialize with Custom Config:**

   ```dart
   LMFeedCore.instance.initialize(
     config: LMFeedConfig(
       pollConfig: pollConfig,
     ),
   );
   ```

---

## 6. Summary

The **Create Poll Screen** provides a user interface for creating polls. Developers can customize components like poll options, dialogs, and submit buttons using the `LMFeedPollBuilderDelegate`. Configuration options are encapsulated in `LMFeedPollConfig`, allowing seamless integration of customizations tailored to specific design and functional requirements.



================================================
File: feed/Flutter/Core/Screens/LMFeedCreateShortVideoScreen.md
================================================
---
sidebar_position: 16
title: Create Short Video Screen
slug: /flutter/core/screens/create-short-video-screen
---

# Create Short Video Screen

## Introduction

The **Create Short Video Screen** (`LMFeedCreateShortVideoScreen`) provides an interface for users to create and customize short videos. It allows customization of the **app bar**, **video preview**, **topic selection**, and other components through builders and configurations.

---

## 1. LMFeedCreateShortVideoScreen Widget

**File Location:**  
[create_short_video_screen.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/blob/master/packages/integration/lib/src/views/create_short_video/create_short_video_screen.dart)

### Class Declaration

```dart
class LMFeedCreateShortVideoScreen extends StatefulWidget {
  const LMFeedCreateShortVideoScreen({super.key});

  @override
  State<LMFeedCreateShortVideoScreen> createState() =>
      _LMFeedCreateShortVideoScreenState();
}
```

#### Key Features

- A stateful widget responsible for creating short video content.
- Can be customized using **builders** and **configurations** for flexibility.

For the complete source code, refer to the [GitHub link](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/blob/master/packages/integration/lib/src/views/create_short_video/create_short_video_screen.dart).

---

## 2. LMFeedCreateShortVideoBuilderDelegate

**File Location:**  
[builder.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/blob/master/packages/integration/lib/src/views/create_short_video/configurations/builder.dart)

### Class Declaration

```dart
class LMFeedCreateShortVideoBuilderDelegate {
  const LMFeedCreateShortVideoBuilderDelegate();
}
```

The `LMFeedCreateShortVideoBuilderDelegate` allows developers to customize various UI components of the **Create Short Video Screen**.

### Methods in LMFeedCreateShortVideoBuilderDelegate

1. **`appBarBuilder`**

   - Builds the app bar and provides a callback for post creation.

   ```dart
   Widget appBarBuilder(
     BuildContext context,
     LMFeedAppBar appBar,
     VoidCallback onPostCreate,
   )
   ```

2. **`videoPreviewBuilder`**

   - Builds the video preview widget.

   ```dart
   Widget videoPreviewBuilder(
     BuildContext context,
     LMFeedVideo videoPreviewWidget,
     LMAttachmentViewData attachmentViewData
   )
   ```

3. **`videoPreviewContainerBuilder`**

   - Wraps the video preview widget in a container.

   ```dart
   Widget videoPreviewContainerBuilder(
     BuildContext context,
     Container videoPreviewContainer,
     Widget videoPreviewWidget
   )
   ```

4. **`selectTopicButtonBuilder`**

   - Builds the button for selecting a topic.

   ```dart
   Widget selectTopicButtonBuilder(
     BuildContext context,
     LMFeedButton selectTopicButton
   )
   ```

5. **`editTopicButtonBuilder`**
   - Builds the button for editing the selected topic.
   ```dart
   Widget editTopicButtonBuilder(
     BuildContext context,
     LMFeedButton editTopicButton
   )
   ```

Explore the complete list of methods [here](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/blob/master/packages/integration/lib/src/views/create_short_video/configurations/builder.dart).

---

## 3. LMFeedCreateShortVideoSettings

**File Location:**  
[settings.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/blob/master/packages/integration/lib/src/views/create_short_video/configurations/settings.dart)

### Class Declaration

```dart
class LMFeedCreateShortVideoSettings {
  const LMFeedCreateShortVideoSettings();
}
```

- **Purpose:** Provides configuration settings for the Create Short Video Screen. No additional fields or methods are currently defined.

---

## 4. LMFeedCreateShortVideoStyle

**File Location:**  
[style.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/blob/master/packages/integration/lib/src/views/create_short_video/configurations/style.dart)

### Class Declaration

```dart
class LMFeedCreateShortVideoStyle {
  const LMFeedCreateShortVideoStyle();
}
```

- **Purpose:** Defines styling options for the Create Short Video Screen. No fields or methods are currently defined.

---

## 5. LMFeedCreateShortVideoConfig

**File Location:**  
[config.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/blob/master/packages/integration/lib/src/views/create_short_video/configurations/config.dart)

### Class Declaration

```dart
class LMFeedCreateShortVideoConfig {
  final LMFeedCreateShortVideoBuilderDelegate builder;
  final LMFeedCreateShortVideoSettings settings;
  final LMFeedCreateShortVideoStyle style;

  const LMFeedCreateShortVideoConfig({
    this.builder = const LMFeedCreateShortVideoBuilderDelegate(),
    this.settings = const LMFeedCreateShortVideoSettings(),
    this.style = const LMFeedCreateShortVideoStyle(),
  });
}
```

### Usage Example

#### **1. Create a Custom Builder**

```dart
class CustomCreateShortVideoBuilder extends LMFeedCreateShortVideoBuilderDelegate {
  @override
  Widget videoPreviewBuilder(
    BuildContext context,
    LMFeedVideo videoPreviewWidget,
    LMAttachmentViewData attachmentViewData
  ) {
    return Container(
      child: videoPreviewWidget,
    );
  }
}
```

#### **2. Initialize with Custom Configuration**

```dart
final customCreateShortVideoConfig = LMFeedCreateShortVideoConfig(
  builder: CustomCreateShortVideoBuilder(),
);
```

#### **3. Apply the Updated Configuration**

```dart
LMFeedCore.instance.initialize(
  config: LMFeedConfig(
    createShortVideoConfig: customCreateShortVideoConfig,
  ),
);
```

---

## 6. Summary

The **Create Short Video Screen** provides a user interface for recording and customizing short video content. Developers can customize components like the app bar, video preview, and topic selection using the `LMFeedCreateShortVideoBuilderDelegate`. Configuration options are encapsulated in `LMFeedCreateShortVideoConfig`, enabling seamless integration and customization tailored to specific design and functional requirements.



================================================
File: feed/Flutter/Core/Screens/LMFeedEditPostScreen.md
================================================
---
sidebar_position: 4
title: Edit Post Screen
slug: /flutter/core/screens/edit-post-screen
---

# Edit Post Screen

## Introduction

The **Edit Post Screen** (`LMFeedEditPostScreen`) provides an interface for editing existing posts. It reuses the configurations from the **Compose Screen**, allowing developers to customize fields, styles, and behaviors using `LMFeedComposeScreenConfig`.

---

## 1. LMFeedEditPostScreen Widget

**File Location:**  
[edit_post_screen.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/post/edit_post_screen.dart)

### Class Declaration

```dart
class LMFeedEditPostScreen extends StatefulWidget {
  /// A screen widget that facilitates editing an existing post.
  const LMFeedEditPostScreen({
    super.key,
    // Widget builder functions for customizations
    this.composeDiscardDialogBuilder,
    this.composeAppBarBuilder,
    this.composeContentBuilder,
    this.composeTopicSelectorBuilder,
    this.composeMediaPreviewBuilder,
    this.composeUserHeaderBuilder,
    // Config for the screen
    this.config,
    // Style for the screen
    this.style,
    // Post data to be edited
    this.postId,
    this.pendingPostId,
    this.displayName,
    this.displayUrl,
  }) : assert(pendingPostId != null || postId != null);

  @override
  State<LMFeedEditPostScreen> createState() => _LMFeedEditPostScreenState();
}
```

#### Key Parameters

1. **`key`** (`Key?`, optional): A key to uniquely identify the widget.
2. **`composeDiscardDialogBuilder`** (`Function(BuildContext context)?`, optional): Custom builder for the discard dialog.
3. **`composeAppBarBuilder`** (`PreferredSizeWidget Function(LMFeedAppBar oldAppBar)?`, optional): Custom builder for the app bar.
4. **`composeContentBuilder`** (`Widget Function()?`, optional): Custom builder for the content.
5. **`composeTopicSelectorBuilder`** (`Widget Function(BuildContext context, Widget topicSelector, List<LMTopicViewData>)?`, optional): Custom builder for the topic selector.

For the complete source code, refer to the [GitHub link](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/post/edit_post_screen.dart).

---

## 2. Reusing LMFeedComposeScreenConfig

`LMFeedEditPostScreen` reuses [`LMFeedComposeScreenConfig`](../Screens/LMFeedComposeScreen.md#5-lmfeedcomposeconfig) for all the customization

The **Edit Post Screen** relies on the following components from `LMFeedComposeScreenConfig`:

1. **`LMFeedComposeBuilderDelegate`**  
   Allows developers to customize input fields, submit buttons, and discard dialogs.

   Example:

   ```dart
   class CustomComposeBuilder extends LMFeedComposeBuilderDelegate {
      @override
      PreferredSizeWidget appBarBuilder(
        BuildContext context,
        LMFeedAppBar oldAppBar,
        LMResponse<void> Function() onPostCreate,
        LMResponse<void> Function() validatePost,
        LMFeedButton createPostButton,
        LMFeedButton cancelButton,
        void Function(String) onValidationFailed,
      ) {
        return oldAppBar.copyWith(
            style: oldAppBar.style?.copyWith(
          backgroundColor: Colors.blue,
        ));
      }
   }
   ```

2. **`LMFeedComposeSetting`**  
   Provides configuration settings for input validation and other behaviors.

3. **`LMFeedComposeStyle`**  
   Defines styling options, such as input field colors and button appearances.

4. **`LMFeedComposeConfig`**  
   Aggregates the builder, setting, and style components into a single configuration object.

---

## 3. Summary

The **Edit Post Screen** provides a user interface for modifying existing posts. It reuses the configurations from `LMFeedComposeScreenConfig`, allowing developers to leverage existing customization options for input fields, dialogs, buttons, and styles.



================================================
File: feed/Flutter/Core/Screens/LMFeedEditShortVideoScreen.md
================================================
---
sidebar_position: 17
title: Edit Short Video Screen
slug: /flutter/core/screens/edit-short-video-screen
---

# Edit Short Video Screen

## Introduction

The **Edit Short Video Screen** (`LMFeedEditShortVideoScreen`) provides an interface for users to edit their short video content. It allows customization of the **app bar**, **video preview**, **topic selection**, and other components through builders and configurations.

---

## 1. LMFeedEditShortVideoScreen Widget

**File Location:**  
[edit_short_video_screen.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/blob/master/packages/integration/lib/src/views/edit_short_video/edit_short_video_screen.dart)

### Class Declaration

```dart
class LMFeedEditShortVideoScreen extends StatefulWidget {
  const LMFeedEditShortVideoScreen({super.key, required this.postId});

  final String postId;

  @override
  State<LMFeedEditShortVideoScreen> createState() =>
      _LMFeedEditShortVideoScreenState();
}
```

#### Key Features

- A stateful widget responsible for editing an existing short video.
- Accepts a required `postId` parameter to identify the video to be edited.
- Can be customized using **builders** and **configurations** for flexibility.

For the complete source code, refer to the [GitHub link](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/blob/master/packages/integration/lib/src/views/edit_short_video/edit_short_video_screen.dart).

---

## 2. LMFeedEditShortVideoBuilderDelegate

**File Location:**  
[builder.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/blob/master/packages/integration/lib/src/views/edit_short_video/configurations/builder.dart)

### Class Declaration

```dart
class LMFeedEditShortVideoBuilderDelegate {
  const LMFeedEditShortVideoBuilderDelegate();
}
```

The `LMFeedEditShortVideoBuilderDelegate` allows developers to customize various UI components of the **Edit Short Video Screen**.

### Methods in LMFeedEditShortVideoBuilderDelegate

1. **`appBarBuilder`**

   - Builds the app bar and provides a callback for post creation.

   ```dart
   Widget appBarBuilder(
     BuildContext context,
     LMFeedAppBar appBar,
     VoidCallback onPostCreate,
   )
   ```

2. **`videoPreviewBuilder`**

   - Builds the video preview widget.

   ```dart
   Widget videoPreviewBuilder(
     BuildContext context,
     LMFeedVideo videoPreviewWidget,
     LMAttachmentViewData attachmentViewData
   )
   ```

3. **`videoPreviewContainerBuilder`**

   - Wraps the video preview widget in a container.

   ```dart
   Widget videoPreviewContainerBuilder(
     BuildContext context,
     Container videoPreviewContainer,
     Widget videoPreviewWidget
   )
   ```

4. **`selectTopicButtonBuilder`**

   - Builds the button for selecting a topic.

   ```dart
   Widget selectTopicButtonBuilder(
     BuildContext context,
     LMFeedButton selectTopicButton
   )
   ```

5. **`editTopicButtonBuilder`**

   - Builds the button for editing the selected topic.

   ```dart
   Widget editTopicButtonBuilder(
     BuildContext context,
     LMFeedButton editTopicButton
   )
   ```

Explore the complete list of methods [here](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/blob/master/packages/integration/lib/src/views/edit_short_video/configurations/builder.dart).

---

## 3. LMFeedEditShortVideoSettings

**File Location:**  
[settings.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/blob/master/packages/integration/lib/src/views/edit_short_video/configurations/settings.dart)

### Class Declaration

```dart
class LMFeedEditShortVideoSettings {
  const LMFeedEditShortVideoSettings();
}
```

- **Purpose:** Provides configuration settings for the Edit Short Video Screen. No additional fields or methods are currently defined.

---

## 4. LMFeedEditShortVideoStyle

**File Location:**  
[style.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/blob/master/packages/integration/lib/src/views/edit_short_video/configurations/style.dart)

### Class Declaration

```dart
class LMFeedEditShortVideoStyle {
  const LMFeedEditShortVideoStyle();
}
```

- **Purpose:** Defines styling options for the Edit Short Video Screen. No fields or methods are currently defined.

---

## 5. LMFeedEditShortVideoConfig

**File Location:**  
[config.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/blob/master/packages/integration/lib/src/views/edit_short_video/configurations/config.dart)

### Class Declaration

```dart
class LMFeedEditShortVideoConfig {
  final LMFeedEditShortVideoBuilderDelegate builder;
  final LMFeedEditShortVideoSettings settings;
  final LMFeedEditShortVideoStyle style;

  const LMFeedEditShortVideoConfig({
    this.builder = const LMFeedEditShortVideoBuilderDelegate(),
    this.settings = const LMFeedEditShortVideoSettings(),
    this.style = const LMFeedEditShortVideoStyle(),
  });
}
```

### Usage Example

#### **1. Create a Custom Builder**

```dart
class CustomEditShortVideoBuilder extends LMFeedEditShortVideoBuilderDelegate {
  @override
  Widget videoPreviewBuilder(
    BuildContext context,
    LMFeedVideo videoPreviewWidget,
    LMAttachmentViewData attachmentViewData
  ) {
    return Container(
      child: videoPreviewWidget,
    );
  }
}
```

#### **2. Initialize with Custom Configuration**

```dart
final customEditShortVideoConfig = LMFeedEditShortVideoConfig(
  builder: CustomEditShortVideoBuilder(),
);
```

#### **3. Apply the Updated Configuration**

```dart
LMFeedCore.instance.initialize(
  config: LMFeedConfig(
    editShortVideoConfig: customEditShortVideoConfig,
  ),
);
```

---

## 6. Summary

The **Edit Short Video Screen** provides a user interface for modifying and refining short video content. Developers can customize components like the app bar, video preview, and topic selection using the `LMFeedEditShortVideoBuilderDelegate`. Configuration options are encapsulated in `LMFeedEditShortVideoConfig`, enabling seamless integration and customization tailored to specific design and functional requirements.



================================================
File: feed/Flutter/Core/Screens/LMFeedLikesScreen.md
================================================
---
sidebar_position: 5
title: Like Screen
slug: /flutter/core/screens/like-screen
---

# Like Screen

## Introduction

The **Like Screen** (`LMFeedLikeScreen`) provides an interface for displaying the users who have liked a specific post. It allows customization of the appearance and behavior using various builders and styles.

---

## 1. LMFeedLikeScreen Widget

**File Location:**  
[likes_screen.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/likes/likes_screen.dart)

### Class Declaration

```dart
class LMFeedLikesScreen extends StatefulWidget {
  static const String route = "/likes_screen";

  /// The ID of the post for which likes are to be displayed.
  final String postId;

  /// Indicates if the likes are for a comment.
  final bool isCommentLikes;

  /// The ID of the comment for which likes are to be displayed (if applicable).
  final String? commentId;

  /// The source of the widget.
  final LMFeedWidgetSource? widgetSource;

  /// A screen widget that displays the list of users who liked a post or comment.
  const LMFeedLikesScreen({
    super.key,
    this.isCommentLikes = false,
    required this.postId,
    this.commentId,
    this.widgetSource,
  });

  @override
  State<LMFeedLikesScreen> createState() => _LMFeedLikesScreenState();
}
```

#### Key Parameters

1. **`key`** (`Key?`, optional): A key to uniquely identify the widget.
2. **`postId`** (`String`, required): The ID of the post for which likes are to be displayed.
3. **`isCommentLikes`** (`bool`, optional): Indicates if the likes are for a comment. Defaults to `false`.
4. **`commentId`** (`String?`, optional): The ID of the comment for which likes are to be displayed (if applicable).
5. **`widgetSource`** (`LMFeedWidgetSource?`, optional): The source of the widget.

For the complete source code, refer to the [GitHub link](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/likes/likes_screen.dart).

---

## 2. LMFeedLikeBuilderDelegate

**File Location:**  
[builder.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/likes/configurations/builder.dart)

### Class Declaration

```dart
class LMFeedLikeBuilderDelegate extends LMFeedWidgetBuilderDelegate {
  const LMFeedLikeBuilderDelegate();
}
```

The `LMFeedLikeBuilderDelegate` allows developers to customize the **user list item** and **empty state** specifically for the like screen.

### Methods in LMFeedLikeBuilderDelegate

1. **`likeTileBuilder`**  
   **Definition:** Builds the widget for user list items in the like screen.  
   **Purpose:** Customizes the style and layout of user list items.

   **Usage Example:**

   ```dart
   @override
    Widget likeTileBuilder(BuildContext context, int index, LMUserViewData user,
        LMFeedLikeTile likeTile) {
      return likeTile;
    }
   ```

2. **`appBarBuilder`**  
    **Definition:** AppBar builder for the Like Screen  
    **Purpose:** Customizes the appearance and behavior App Bar.

   **Usage Example:**

   ```dart
   PreferredSizeWidget appBarBuilder(
    BuildContext context,
    LMFeedAppBar appBar,
   ) {
    return appBar.copyWith();
   }
   ```

### Remaining Methods

Explore the complete list of methods [here](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/likes/configurations/builder.dart).

---

## 3. LMFeedLikeSetting

**File Location:**  
[settings.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/likes/configurations/settings.dart)

```dart
class LMFeedLikeSetting {
  const LMFeedLikeSetting();
}
```

- **Purpose:** Provides configuration settings for the Like Screen. No additional fields or methods are currently defined.

---

## 4. LMFeedLikeStyle

**File Location:**  
[style.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/likes/configurations/style.dart)

```dart
class LMFeedLikeStyle {
  const LMFeedLikeStyle();
}
```

- **Purpose:** Defines styling options for the Like Screen. No fields or methods are currently defined.

---

## 5. LMFeedLikeConfig

**File Location:**  
[config.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/likes/configurations/config.dart)

### Class Declaration

```dart
class LMFeedLikeConfig {
  final LMFeedLikeBuilderDelegate builder;
  final LMFeedLikeSetting setting;
  final LMFeedLikeStyle style;

  const LMFeedLikeConfig({
    this.builder = const LMFeedLikeBuilderDelegate(),
    this.setting = const LMFeedLikeSetting(),
    this.style = const LMFeedLikeStyle(),
  });
}
```

### Usage Example: Injecting Custom Configuration

1. **Create a Custom Builder:**

   ```dart
   class CustomLikeBuilder extends LMFeedLikeBuilderDelegate {
     @override
     Widget likeTileBuilder(BuildContext context, int index, LMUserViewData user,
        LMFeedLikeTile likeTile) {
      return likeTile.copyWith();
    }
   }
   ```

2. **Pass Custom Style or Setting along with Builder:**

   ```dart
   final customStyle = LMFeedLikeStyle();
   final customSetting = LMFeedLikeSetting();
   ```

3. **Inject the Custom Builder, Style, or Setting into the Config:**

   ```dart
   final likeConfig = LMFeedLikeConfig(
     builder: CustomLikeBuilder(),
     setting: customSetting,
     style: customStyle,
   );
   ```

4. **Initialize with Custom Config:**

   ```dart
   LMFeedCore.instance.initialize(
     config: LMFeedConfig(
       likeConfig: likeConfig,
     ),
   );
   ```

---

## 6. Summary

The **Like Screen** provides a user interface for displaying users who liked a specific post. Developers can customize components like list items, headers, and empty states using the `LMFeedLikeBuilderDelegate`. Configuration options are encapsulated in `LMFeedLikeConfig`, enabling seamless integration and customization tailored to specific design and functional requirements.



================================================
File: feed/Flutter/Core/Screens/LMFeedMediaPreviewScreen.md
================================================
---
sidebar_position: 6
title: Media Preview Screen
slug: /flutter/core/screens/media-preview-screen
---

# Media Preview Screen

## Introduction

The **Media Preview Screen** (`LMFeedMediaPreviewScreen`) provides an interface for previewing media files such as images and videos. It allows customization of the appearance and functionality for a seamless media viewing experience.

---

## 1. LMFeedMediaPreviewScreen Widget

**File Location:**  
[media_preview_screen.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/media/media_preview_screen.dart)

### Class Declaration

```dart
class LMFeedMediaPreviewScreen extends StatefulWidget {
  /// The list of media items to preview.
  final List<LMAttachmentViewData> postAttachments;

  /// The post data associated with the media.
  final LMPostViewData post;

  /// The user data associated with the media.
  final LMUserViewData user;

  /// The index of the currently selected media item.
  final int? position;

  /// A screen widget that displays a preview of media files like images and videos.
  const LMFeedMediaPreviewScreen({
    Key? key,
    required this.postAttachments,
    required this.post,
    required this.user,
    this.position,
  }) : super(key: key);

  @override
  State<LMFeedMediaPreviewScreen> createState() => _LMFeedMediaPreviewScreenState();
}
```

#### Key Parameters

1. **`key`** (`Key?`, optional): A key to uniquely identify the widget.
2. **`postAttachments`** (`List<LMAttachmentViewData>`, required): The list of media items to preview.
3. **`post`** (`LMPostViewData`, required): The post data associated with the media.
4. **`user`** (`LMUserViewData`, required): The user data associated with the media.
5. **`position`** (`int?`, optional): The index of the currently selected media item.

For the complete source code, refer to the [GitHub link](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/media/media_preview_screen.dart).

---

## 2. LMFeedMediaPreviewBuilderDelegate

**File Location:**  
[builder.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/media/configurations/builder.dart)

### Class Declaration

```dart
class LMFeedMediaPreviewBuilderDelegate extends LMFeedWidgetBuilderDelegate {
  const LMFeedMediaPreviewBuilderDelegate();
}
```

The `LMFeedMediaPreviewBuilderDelegate` allows developers to customize the **media controls**, **captions**, and **fullscreen toggles** specifically for the media preview screen.

### Methods in LMFeedMediaPreviewBuilderDelegate

1. **`postMediaCarouselIndicatorBuilder`**  
    **Definition:** Builds a carousel indicator widget for post media.
   **Purpose:** Customizes the style and layout of media carousel indicator.

   **Usage Example:**

   ```dart
   @override
   Widget postMediaCarouselIndicatorBuilder(BuildContext context, int currIndex,
      int mediaLength, Widget carouselIndicator) {
    return carouselIndicator.copyWith();
   }
   ```

### Remaining Methods

Explore the complete list of methods [here](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/media/configurations/builder.dart).

---

## 3. LMFeedMediaPreviewSetting

**File Location:**  
[settings.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/media/configurations/settings.dart)

```dart
class LMFeedMediaPreviewSetting {
  const LMFeedMediaPreviewSetting();
}
```

- **Purpose:** Provides configuration settings for the Media Preview Screen. No additional fields or methods are currently defined.

---

## 4. LMFeedMediaPreviewStyle

**File Location:**  
[style.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/media/configurations/style.dart)

```dart
class LMFeedMediaPreviewStyle {
  const LMFeedMediaPreviewStyle();
}
```

- **Purpose:** Defines styling options for the Media Preview Screen. No fields or methods are currently defined.

---

## 5. LMFeedMediaPreviewConfig

**File Location:**  
[config.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/media/configurations/config.dart)

### Class Declaration

```dart
class LMFeedMediaPreviewConfig {
  final LMFeedMediaPreviewBuilderDelegate builder;
  final LMFeedMediaPreviewSetting setting;
  final LMFeedMediaPreviewStyle style;

  const LMFeedMediaPreviewConfig({
    this.builder = const LMFeedMediaPreviewBuilderDelegate(),
    this.setting = const LMFeedMediaPreviewSetting(),
    this.style = const LMFeedMediaPreviewStyle(),
  });
}
```

### Usage Example: Injecting Custom Configuration

1. **Create a Custom Builder:**

   ```dart
   class CustomMediaPreviewBuilder extends LMFeedMediaPreviewBuilderDelegate {
    @override
    Widget postMediaCarouselIndicatorBuilder(BuildContext context, int currIndex,
        int mediaLength, Widget carouselIndicator) {
      return carouselIndicator.copyWith();
    }
   }
   ```

2. **Pass Custom Style or Setting along with Builder:**

   ```dart
   final customStyle = LMFeedMediaPreviewStyle();
   final customSetting = LMFeedMediaPreviewSetting();
   ```

3. **Inject the Custom Builder, Style, or Setting into the Config:**

   ```dart
   final mediaPreviewConfig = LMFeedMediaPreviewConfig(
     builder: CustomMediaPreviewBuilder(),
     setting: customSetting,
     style: customStyle,
   );
   ```

4. **Initialize with Custom Config:**

   ```dart
   LMFeedCore.instance.initialize(
     config: LMFeedConfig(
       mediaPreviewConfig: mediaPreviewConfig,
     ),
   );
   ```

---

## 6. Summary

The **Media Preview Screen** provides a user interface for previewing media files. Developers can customize components like controls, captions, and fullscreen options using the `LMFeedMediaPreviewBuilderDelegate`. Configuration options are encapsulated in `LMFeedMediaPreviewConfig`, enabling seamless integration and customization tailored to specific design and functional requirements.



================================================
File: feed/Flutter/Core/Screens/LMFeedPendingPostsScreen.md
================================================
---
sidebar_position: 7
title: Pending Post Screen
slug: /flutter/core/screens/pending-post-screen
---

# Pending Post Screen

## Introduction

The **Pending Post Screen** (`LMFeedPendingPostsScreen`) serves as an interface for managing and displaying posts that are pending publication.

---

## 1. LMFeedPendingPostsScreen Widget

**File Location:**  
[pending_posts_screen.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/pending_post/pending_posts_screen.dart)

### Class Declaration

```dart
class LMFeedPendingPostsScreen extends StatefulWidget {
  /// Builder for app bar.
  final LMFeedAppBarBuilder? appBar;

  /// Builder for post item.
  final LMFeedPostWidgetBuilder? postBuilder;

  /// Builder for floating action button (e.g., new post button).
  final LMFeedContextButtonBuilder? floatingActionButtonBuilder;

  /// Builder for empty feed view.
  final LMFeedContextWidgetBuilder? noItemsFoundIndicatorBuilder;

  /// Builder for first page loader when no posts are available.
  final LMFeedContextWidgetBuilder? firstPageProgressIndicatorBuilder;

  /// Builder for pagination loader when more posts are being loaded.
  final LMFeedContextWidgetBuilder? moreItemsProgressIndicatorBuilder;

  const LMFeedPendingPostsScreen({
    super.key,
    this.appBar,
    this.postBuilder,
    this.floatingActionButtonBuilder,
    this.noItemsFoundIndicatorBuilder,
    this.firstPageProgressIndicatorBuilder,
    this.moreItemsProgressIndicatorBuilder,
  });

  @override
  State<LMFeedPendingPostsScreen> createState() => _LMFeedPendingPostsScreenState();
}
```

#### Key Parameters

1. **`appBar`** (`LMFeedAppBarBuilder?`, optional): Builder for app bar.
2. **`postBuilder`** (`LMFeedPostWidgetBuilder?`, optional): Builder for post item.
3. **`floatingActionButtonBuilder`** (`LMFeedContextButtonBuilder?`, optional): Builder for floating action button (e.g., new post button).
4. **`noItemsFoundIndicatorBuilder`** (`LMFeedContextWidgetBuilder?`, optional): Builder for empty feed view.
5. **`firstPageProgressIndicatorBuilder`** (`LMFeedContextWidgetBuilder?`, optional): Builder for first page loader when no posts are available.

For the complete source code, refer to the [GitHub link](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/pending_post/pending_posts_screen.dart).

---

## 2. LMFeedPendingPostBuilderDelegate

**File Location:**  
[builder.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/pending_post/configurations/builder.dart)

### Class Declaration

```dart
class LMFeedPendingPostBuilderDelegate extends LMFeedWidgetBuilderDelegate {
  const LMFeedPendingPostBuilderDelegate();
}
```

The `LMFeedPendingPostBuilderDelegate` allows developers to customize the **post items**, **empty states**, and **loaders** specifically for the pending post screen.

### Methods in LMFeedPendingPostBuilderDelegate

1. **`postWidgetBuilder`**  
   **Definition:** Builds the widget for posts in the pending post screen.  
   **Purpose:** Customizes the style and layout of posts.

   **Usage Example:**

   ```dart
   @override
   Widget postWidgetBuilder(
      BuildContext context, LMFeedPostWidget post, LMPostViewData postViewData,
      {LMFeedWidgetSource source = LMFeedWidgetSource.universalFeed}) {
    return post.copyWith();
   }
   ```

2. **`noItemsFoundIndicatorBuilder`**  
   **Definition:** Builds the widget for the empty state in the pending post screen.  
   **Purpose:** Customizes the appearance and behavior of the empty state.

   **Usage Example:**

   ```dart
   @override
  Widget noItemsFoundIndicatorBuilder(BuildContext context,
      {LMFeedButton? createPostButton, bool isSelfPost = true, Widget? child}) {
    return child;
  }
   ```

3. **`firstPageProgressIndicatorBuilder`**  
   **Definition:** Builds the loader widget for the pending post screen.  
   **Purpose:** Provides a way to customize the loader.

   **Usage Example:**

   ```dart
   @override
  Widget firstPageProgressIndicatorBuilder(BuildContext context,
      {Widget? child}) {
    return child;
  }
   ```

### Remaining Methods

Explore the complete list of methods [here](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/pending_post/configurations/builder.dart).

---

## 3. LMFeedPendingPostSetting

**File Location:**  
[settings.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/pending_post/configurations/settings.dart)

```dart
class LMFeedPendingPostSetting {
  const LMFeedPendingPostSetting();
}
```

- **Purpose:** Provides configuration settings for the Pending Post Screen. No additional fields or methods are currently defined.

---

## 4. LMFeedPendingPostStyle

**File Location:**  
[style.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/pending_post/configurations/style.dart)

```dart
class LMFeedPendingPostStyle {
  const LMFeedPendingPostStyle();
}
```

- **Purpose:** Defines styling options for the Pending Post Screen. No fields or methods are currently defined.

---

## 5. LMFeedPendingPostConfig

**File Location:**  
[config.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/pending_post/configurations/config.dart)

### Class Declaration

```dart
class LMFeedPendingPostConfig {
  final LMFeedPendingPostBuilderDelegate builder;
  final LMFeedPendingPostSetting setting;
  final LMFeedPendingPostStyle style;

  const LMFeedPendingPostConfig({
    this.builder = const LMFeedPendingPostBuilderDelegate(),
    this.setting = const LMFeedPendingPostSetting(),
    this.style = const LMFeedPendingPostStyle(),
  });
}
```

### Usage Example: Injecting Custom Configuration

1. **Create a Custom Builder:**

   ```dart
   class CustomPendingPostBuilder extends LMFeedPendingPostBuilderDelegate {
    @override
    Widget postWidgetBuilder(
        BuildContext context, LMFeedPostWidget post, LMPostViewData postViewData,
        {LMFeedWidgetSource source = LMFeedWidgetSource.universalFeed}) {
      return post.copyWith();
    }
   }
   ```

2. **Pass Custom Style or Setting along with Builder:**

   ```dart
   final customStyle = LMFeedPendingPostStyle();
   final customSetting = LMFeedPendingPostSetting();
   ```

3. **Inject the Custom Builder, Style, or Setting into the Config:**

   ```dart
   final pendingPostConfig = LMFeedPendingPostConfig(
     builder: CustomPendingPostBuilder(),
     setting: customSetting,
     style: customStyle,
   );
   ```

4. **Initialize with Custom Config:**

   ```dart
   LMFeedCore.instance.initialize(
     config: LMFeedConfig(
       pendingPostConfig: pendingPostConfig,
     ),
   );
   ```

---

## 6. Summary

The **Pending Post Screen** provides a user interface for managing pending posts. Developers can customize components like post items, empty states, and loaders using the `LMFeedPendingPostBuilderDelegate`. Configuration options are encapsulated in `LMFeedPendingPostConfig`, enabling seamless integration and customization tailored to specific design and functional requirements.



================================================
File: feed/Flutter/Core/Screens/LMFeedPollResultScreen.md
================================================
---
sidebar_position: 8
title: Poll Result Screen
slug: /flutter/core/screens/poll-result-screen
---

# Poll Result Screen

## Introduction

The **Poll Result Screen** (`LMFeedPollResultScreen`) displays the results of a poll, including the options, votes, and analysis. It provides customization points for the appearance and behavior of result visualization.

---

## 1. LMFeedPollResultScreen Widget

**File Location:**  
[poll_result_screen.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/poll/poll_result_screen.dart)

### Class Declaration

```dart
class LMFeedPollResultScreen extends StatefulWidget {
  /// A screen widget that displays poll results.
  const LMFeedPollResultScreen({
    super.key,
    required this.pollId,
    required this.pollOptions,
    this.pollTitle,
    this.selectedOptionId,
    this.noItemsFoundIndicatorBuilder,
    this.firstPageProgressIndicatorBuilder,
    this.newPageProgressIndicatorBuilder,
    this.noMoreItemsIndicatorBuilder,
    this.newPageErrorIndicatorBuilder,
    this.firstPageErrorIndicatorBuilder,
    this.tabWidth,
  });

  @override
  State<LMFeedPollResultScreen> createState() => _LMFeedPollResultScreenState();
}
```

#### Key Parameters

1. **`key`** (`Key?`, optional): A key to uniquely identify the widget.
2. **`pollId`** (`String`, required): The ID of the poll to be displayed.
3. **`pollTitle`** (`String?`, optional): The title of the poll.
4. **`pollOptions`** (`List<LMPollOptionViewData>`, required): The options available in the poll.
5. **`selectedOptionId`** (`String?`, optional): The ID of the selected option.

For the complete source code, refer to the [GitHub link](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/poll/poll_result_screen.dart).

---

## 2. LMFeedPollResultBuilderDelegate

**File Location:**  
[builder.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/poll/configurations/builder.dart)

### Class Declaration

```dart
class LMFeedPollResultBuilderDelegate extends LMFeedWidgetBuilderDelegate {
  const LMFeedPollResultBuilderDelegate();
}
```

The `LMFeedPollResultBuilderDelegate` allows developers to customize the appearance of poll results, including chart styles, vote counts, and other visual elements.


## 3. LMFeedPollResultSetting

**File Location:**  
[settings.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/poll/configurations/settings.dart)

```dart
class LMFeedPollResultSetting {
  const LMFeedPollResultSetting();
}
```

- **Purpose:** Provides configuration settings for the Poll Result Screen. No additional fields or methods are currently defined.

---

## 4. LMFeedPollResultStyle

**File Location:**  
[style.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/poll/configurations/style.dart)

```dart
class LMFeedPollResultStyle {
  const LMFeedPollResultStyle();
}
```

- **Purpose:** Defines styling options for the Poll Result Screen. No fields or methods are currently defined.

---

## 5. LMFeedPollResultConfig

**File Location:**  
[config.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/poll/configurations/config.dart)

### Class Declaration

```dart
class LMFeedPollResultConfig {
  final LMFeedPollResultBuilderDelegate builder;
  final LMFeedPollResultSetting setting;
  final LMFeedPollResultStyle style;

  const LMFeedPollResultConfig({
    this.builder = const LMFeedPollResultBuilderDelegate(),
    this.setting = const LMFeedPollResultSetting(),
    this.style = const LMFeedPollResultStyle(),
  });
}
```

### Usage Example: Injecting Custom Configuration

1. **Create a Custom Builder:**

   ```dart
   class CustomPollResultBuilder extends LMFeedPollResultBuilderDelegate {
    @override
    Widget pollWidgetBuilder(BuildContext context, LMFeedPoll pollWidget) {
      return pollWidget.copyWith();
    }
   }
   ```

2. **Pass Custom Style or Setting along with Builder:**

   ```dart
   final customStyle = LMFeedPollResultStyle();
   final customSetting = LMFeedPollResultSetting();
   ```

3. **Inject the Custom Builder, Style, or Setting into the Config:**

   ```dart
   final pollResultConfig = LMFeedPollResultConfig(
     builder: CustomPollResultBuilder(),
     setting: customSetting,
     style: customStyle,
   );
   ```

4. **Initialize with Custom Config:**

   ```dart
   LMFeedCore.instance.initialize(
     config: LMFeedConfig(
       pollResultConfig: pollResultConfig,
     ),
   );
   ```

---

## 6. Summary

The **Poll Result Screen** provides a user interface for displaying poll results. Developers can customize components like charts, vote counts, and summaries using the `LMFeedPollResultBuilderDelegate`. Configuration options are encapsulated in `LMFeedPollResultConfig`, allowing seamless integration of customizations tailored to specific design and functional requirements.



================================================
File: feed/Flutter/Core/Screens/LMFeedPostDetailScreen.md
================================================
---
sidebar_position: 6
title: Post Detail Screen
slug: /flutter/core/screens/post-detail-screen
---

# Post Detail Screen

## Introduction

The **Post Detail Screen** (`LMFeedPostDetailScreen`) provides an interface for displaying the details of a specific post. It allows customization of the appearance and behavior using various builders and styles.

---

## 1. LMFeedPostDetailScreen Widget

**File Location:**  
[post_detail_screen.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/post/post_detail_screen.dart)

### Class Declaration

```dart
class LMFeedPostDetailScreen extends StatefulWidget {
  /// A screen widget that displays the details of a specific post.
  const LMFeedPostDetailScreen({
    super.key,
    required this.postId,
    this.postBuilder,
    this.appBarBuilder,
    this.commentBuilder,
    this.bottomTextFieldBuilder,
    this.commentSeparatorBuilder,
    this.onPostTap,
    this.onLikeClick,
    this.onCommentClick,
    this.openKeyboard = false,
    this.settings,
    this.commentListBuilder,
  });

  @override
  State<LMFeedPostDetailScreen> createState() => _LMFeedPostDetailScreenState();
}
```

#### Key Parameters

1. **`key`** (`Key?`, optional): A key to uniquely identify the widget.
2. **`postId`** (`String`, required): The ID of the post to be displayed.
3. **`postBuilder`** (`LMFeedPostWidgetBuilder?`, optional): Custom builder for the post widget.
4. **`appBarBuilder`** (`LMFeedAppBarBuilder?`, optional): Custom builder for the app bar.
5. **`commentBuilder`** (`LMFeedPostCommentBuilder?`, optional): Custom builder for the comments.

For the complete source code, refer to the [GitHub link](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/post/post_detail_screen.dart).

---

## 2. LMFeedPostDetailBuilderDelegate

**File Location:**  
[builder.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/post/configurations/builder.dart)

### Class Declaration

```dart
class LMFeedPostDetailBuilderDelegate extends LMFeedWidgetBuilderDelegate {
  const LMFeedPostDetailBuilderDelegate();
}
```

The `LMFeedPostDetailBuilderDelegate` allows developers to customize the **post content**, **comments**, and **actions** specifically for the post detail screen.

### Methods in LMFeedPostDetailBuilderDelegate

1. **`postWidgetBuilder`**  
    **Definition:** Builds the widget for displaying post UI.  
    **Purpose:** Customizes the style and layout of post UI.

   **Usage Example:**

   ```dart
   @override
   Widget postWidgetBuilder(
      BuildContext context, LMFeedPostWidget post, LMPostViewData postViewData,
      {LMFeedWidgetSource source = LMFeedWidgetSource.universalFeed}) {
    return post.copyWith();
   }
   ```

2. **`commentBuilder`**  
    **Definition:** Builds the widget for displaying comments on the post.  
    **Purpose:** Customizes the appearance and behavior of comments.

   **Usage Example:**

   ```dart
   @override
   Widget commentBuilder(BuildContext context, LMFeedCommentWidget commentWidget,
      LMPostViewData postViewData) {
    return commentWidget.copyWith();
   }
   ```

### Remaining Methods

Explore the complete list of methods [here](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/post/configurations/builder.dart).

---

## 3. LMFeedPostDetailSetting

**File Location:**  
[settings.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/post/configurations/settings.dart)

```dart
class LMFeedPostDetailSetting {
  const LMFeedPostDetailSetting();
}
```

- **Purpose:** Provides configuration settings for the Post Detail Screen. No additional fields or methods are currently defined.

---

## 4. LMFeedPostDetailStyle

**File Location:**  
[style.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/post/configurations/style.dart)

```dart
class LMFeedPostDetailStyle {
  const LMFeedPostDetailStyle();
}
```

- **Purpose:** Defines styling options for the Post Detail Screen. No fields or methods are currently defined.

---

## 5. LMFeedPostDetailConfig

**File Location:**  
[config.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/post/configurations/config.dart)

### Class Declaration

```dart
class LMFeedPostDetailConfig {
  final LMFeedPostDetailBuilderDelegate builder;
  final LMFeedPostDetailSetting setting;
  final LMFeedPostDetailStyle style;

  const LMFeedPostDetailConfig({
    this.builder = const LMFeedPostDetailBuilderDelegate(),
    this.setting = const LMFeedPostDetailSetting(),
    this.style = const LMFeedPostDetailStyle(),
  });
}
```

### Usage Example: Injecting Custom Configuration

1. **Create a Custom Builder:**

   ```dart
   class CustomPostDetailBuilder extends LMFeedPostDetailBuilderDelegate {
     @override
     Widget postWidgetBuilder(
        BuildContext context, LMFeedPostWidget post, LMPostViewData postViewData,
        {LMFeedWidgetSource source = LMFeedWidgetSource.universalFeed}) {
     return post.copyWith();
     }
   }
   ```

2. **Pass Custom Style or Setting along with Builder:**

   ```dart
   final customStyle = LMFeedPostDetailStyle();
   final customSetting = LMFeedPostDetailSetting();
   ```

3. **Inject the Custom Builder, Style, or Setting into the Config:**

   ```dart
   final postDetailConfig = LMFeedPostDetailConfig(
     builder: CustomPostDetailBuilder(),
     setting: customSetting,
     style: customStyle,
   );
   ```

4. **Initialize with Custom Config:**

   ```dart
   LMFeedCore.instance.initialize(
     config: LMFeedConfig(
       postDetailConfig: postDetailConfig,
     ),
   );
   ```

---

## 6. Summary

The **Post Detail Screen** provides a user interface for displaying the details of a specific post. Developers can customize components like post content, comments, and action buttons using the `LMFeedPostDetailBuilderDelegate`. Configuration options are encapsulated in `LMFeedPostDetailConfig`, enabling seamless integration and customization tailored to specific design and functional requirements.



================================================
File: feed/Flutter/Core/Screens/LMFeedQnAScreen.md
================================================
---
sidebar_position: 15 
title: QnA Feed Screen  
slug: /flutter/core/screens/qna-feed-screen  
---

# QnA Feed Screen  

## Introduction  
The **QnA Feed Screen** (`LMFeedQnAScreen`) provides an interface for interacting with QnA-style feeds. It supports multiple feed types (e.g., personalised, universal) and allows customization of the **app bar**, **posts**, and other components through builders and configurations.

---

## 1. LMFeedQnAScreen Widget  
**File Location:**  
[qna_feed_screen.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/feed/qna/qna_feed_screen.dart)

### Class Declaration

```dart
class LMFeedQnAScreen extends StatefulWidget {
  /// [LMFeedType] for the feed.
  /// It can be [LMFeedType.personalised] or [LMFeedType.universal].
  /// Default is [LMFeedType.universal].
  final LMFeedType feedType;

  /// Builder for customizing the app bar.
  final LMFeedAppBarBuilder? appBar;

  /// Builder for customizing the post widget.
  final LMFeedPostWidgetBuilder? postBuilder;

  /// Builder for the floating action button.
  final LMFeedContextButtonBuilder? floatingActionButtonBuilder;

  /// Settings for feed behavior and appearance.
  final LMFeedQnASettings? settings;

  /// A screen widget for interacting with QnA-style feeds.
  const LMFeedQnAScreen({
    super.key,
    this.feedType = LMFeedType.universal,
    this.appBar,
    this.postBuilder,
    this.floatingActionButtonBuilder,
    this.settings,
  });

  @override
  State<LMFeedQnAScreen> createState() => _LMFeedQnAScreenState();
}
```

#### Key Parameters  

1. **`feedType`** (`LMFeedType`): Specifies the type of feed (`personalised` or `universal`). Defaults to `universal`.  
2. **`appBar`** (`LMFeedAppBarBuilder?`): Builder for customizing the app bar.  
3. **`postBuilder`** (`LMFeedPostWidgetBuilder?`): Builder for customizing post widgets.  
4. **`floatingActionButtonBuilder`** (`LMFeedContextButtonBuilder?`): Builder for the floating action button.  
5. **`settings`** (`LMFeedQnASettings?`): Settings for feed behavior and appearance.  

For the complete source code, refer to the [GitHub link](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/feed/qna/qna_feed_screen.dart).

---

## 2. LMFeedQnABuilderDelegate  
**File Location:**  
[builder.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/feed/qna/configurations/builder.dart)

### Class Declaration

```dart
class LMFeedQnABuilderDelegate extends LMFeedWidgetBuilderDelegate {
  const LMFeedQnABuilderDelegate();
}
```

The `LMFeedQnABuilderDelegate` allows developers to customize the **posts**, **floating action buttons**, and **loaders** specifically for the QnA feed screen.  

### Methods in LMFeedQnABuilderDelegate

1. **`postWidgetBuilder`**  
   **Definition:** Builds the widget for posts in the QnA feed screen.  
   **Purpose:** Customizes the style and layout of posts.  

   **Usage Example:**
   ```dart
   @override
   Widget postWidgetBuilder(
      BuildContext context, LMFeedPostWidget post, LMPostViewData postViewData,
      {LMFeedWidgetSource source = LMFeedWidgetSource.universalFeed}) {
    return post.copyWith();
   }
   ```

2. **`floatingActionButtonBuilder`**  
   **Definition:** Builds the floating action button in the QnA feed screen.  
   **Purpose:** Customizes the appearance and behavior of the floating action button.  

   **Usage Example:**
   ```dart
   @override
   Widget floatingActionButtonBuilder(BuildContext context, LMFeedButton floatingActionButton) {
     return floatingActionButton.copyWith();
   }
   ```

3. **`firstPageProgressIndicatorBuilder`**  
   **Definition:** Builds the first page loader widget for the QnA feed screen.  
   **Purpose:** Provides a way to customize the loader.  

   **Usage Example:**
   ```dart
   @override
   Widget firstPageProgressIndicatorBuilder(BuildContext context, {Widget? child}) {
     return child;
   }
   ```

### Remaining Methods
Explore the complete list of methods [here](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/feed/qna/configurations/builder.dart).

---

## 3. LMFeedQnASettings  
**File Location:**  
[settings.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/feed/qna/configurations/settings.dart)

```dart
class LMFeedQnASettings {
  const LMFeedQnASettings();
}
```

- **Purpose:** Provides configuration settings for the QnA Feed Screen. No additional fields or methods are currently defined.

---

## 4. LMFeedQnAStyle  
**File Location:**  
[styles.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/feed/qna/configurations/styles.dart)

```dart
class LMFeedQnAStyle {
  const LMFeedQnAStyle();
}
```

- **Purpose:** Defines styling options for the QnA Feed Screen. No fields or methods are currently defined.

---

## 5. LMFeedQnAConfig  
**File Location:**  
[config.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/feed/qna/configurations/config.dart)

### Class Declaration

```dart
class LMFeedQnAConfig {
  final LMFeedQnABuilderDelegate builder;
  final LMFeedQnASettings settings;
  final LMFeedQnAStyle style;

  const LMFeedQnAConfig({
    this.builder = const LMFeedQnABuilderDelegate(),
    this.settings = const LMFeedQnASettings(),
    this.style = const LMFeedQnAStyle(),
  });
}
```

### Usage Example: Injecting Custom Configuration

1. **Create a Custom Builder:**

   ```dart
   class CustomQnABuilder extends LMFeedQnABuilderDelegate {
    @override
    Widget postWidgetBuilder(
        BuildContext context, LMFeedPostWidget post, LMPostViewData postViewData,
        {LMFeedWidgetSource source = LMFeedWidgetSource.universalFeed}) {
      return post.copyWith();
    }
   }
   ```

2. **Pass Custom Style or Setting along with Builder:**

   ```dart
   final customStyle = LMFeedQnAStyle();
   final customSetting = LMFeedQnASettings();
   ```

3. **Inject the Custom Builder, Style, or Setting into the Config:**

   ```dart
   final qnaConfig = LMFeedQnAConfig(
     builder: CustomQnABuilder(),
     settings: customSetting,
     style: customStyle,
   );
   ```

4. **Initialize with Custom Config:**

   ```dart
   LMFeedCore.instance.initialize(
     config: LMFeedConfig(
       qnaConfig: qnaConfig,
     ),
   );
   ```

---

## 6. Summary  

The **QnA Feed Screen** provides a user interface for interacting with QnA-style feeds. Developers can customize components like app bars, posts, and floating action buttons using the `LMFeedQnABuilderDelegate`. Configuration options are encapsulated in `LMFeedQnAConfig`, enabling seamless integration and customization tailored to specific design and functional requirements.



================================================
File: feed/Flutter/Core/Screens/LMFeedReportScreen.md
================================================
---
sidebar_position: 10  
title: Report Screen  
slug: /flutter/core/screens/report-screen  
---

# Report Screen  

## Introduction  
The **Report Screen** (`LMFeedReportScreen`) provides an interface for users to report inappropriate content, such as posts, comments, or replies.

---

## 1. LMFeedReportScreen Widget  
**File Location:**  
[report_screen.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/report/report_screen.dart)

### Class Declaration

```dart
class LMFeedReportScreen extends StatefulWidget {
  /// The ID of the entity (post, comment, or reply) being reported.
  final String entityId;

  /// The ID of the user who created the entity being reported.
  final String entityCreatorId;

  /// The type of the entity being reported (e.g., post, comment, reply).
  final int entityType;

  /// Builder for report chips.
  final Widget Function(BuildContext, LMDeleteReasonViewData)? reportChipBuilder;

  /// Builder for report content.
  final Widget Function(BuildContext, LMReportContentWidget)? reportContentBuilder;

  /// A screen widget for reporting inappropriate content.
  const LMFeedReportScreen({
    Key? key,
    required this.entityId,
    required this.entityCreatorId,
    required this.entityType,
    this.reportChipBuilder,
    this.reportContentBuilder,
  }) : super(key: key);

  @override
  State<LMFeedReportScreen> createState() => _LMFeedReportScreenState();
}
```

#### Key Parameters  

1. **`entityId`** (`String`, required): The ID of the entity (post, comment, or reply) being reported.  
2. **`entityCreatorId`** (`String`, required): The ID of the user who created the entity being reported.  
3. **`entityType`** (`int`, required): The type of entity being reported (e.g., post, comment).  
4. **`reportChipBuilder`** (`Widget Function(BuildContext, LMDeleteReasonViewData)?`): Builder for report chips.  
5. **`reportContentBuilder`** (`Widget Function(BuildContext, LMReportContentWidget)?`): Builder for report content.  

For the complete source code, refer to the [GitHub link](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/report/report_screen.dart).

---

## 2. LMFeedReportBuilderDelegate  
**File Location:**  
[builder.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/report/configurations/builder.dart)

### Class Declaration

```dart
class LMFeedReportBuilderDelegate extends LMFeedWidgetBuilderDelegate {
  const LMFeedReportBuilderDelegate();
}
```

The `LMFeedReportBuilderDelegate` allows developers to customize the **report chips** and **report content** specifically for the report screen.  

### Methods in LMFeedReportBuilderDelegate

1. **`reportChipBuilder`**  
   **Definition:** Builds the widget for report chips in the report screen.  
   **Purpose:** Customizes the style and layout of report chips.  

   **Usage Example:**
   ```dart
   @override
   Widget reportChipBuilder(BuildContext context, LMDeleteReasonViewData data) {
     // Return a custom widget for displaying report chips
     return Chip(
       label: Text(data.reason),
     );
   }
   ```

2. **`reportContentBuilder`**  
   **Definition:** Builds the widget for report content in the report screen.  
   **Purpose:** Customizes the appearance and behavior of report content.  

   **Usage Example:**
   ```dart
   @override
   Widget reportContentBuilder(BuildContext context, LMReportContentWidget content) {
     // Return a custom widget for displaying report content
     return ListTile(
       title: Text(content.title),
       subtitle: Text(content.description),
     );
   }
   ```

3. **`loaderWidget`**  
   **Definition:** Builds the loader widget for the report screen.  
   **Purpose:** Provides a way to customize the loader.  

   **Usage Example:**
   ```dart
   @override
   Widget loaderWidget(BuildContext context) {
     // Return a custom loader widget
     return CustomLoader();
   }
   ```

### Remaining Methods
Explore the complete list of methods [here](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/report/configurations/builder.dart).

---

## 3. LMFeedReportSetting  
**File Location:**  
[settings.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/report/configurations/settings.dart)

```dart
class LMFeedReportSetting {
  const LMFeedReportSetting();
}
```

- **Purpose:** Provides configuration settings for the Report Screen. No additional fields or methods are currently defined.

---

## 4. LMFeedReportStyle  
**File Location:**  
[style.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/report/configurations/style.dart)

```dart
class LMFeedReportStyle {
  const LMFeedReportStyle();
}
```

- **Purpose:** Defines styling options for the Report Screen. No fields or methods are currently defined.

---

## 5. LMFeedReportConfig  
**File Location:**  
[config.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/report/configurations/config.dart)

### Class Declaration

```dart
class LMFeedReportConfig {
  final LMFeedReportBuilderDelegate builder;
  final LMFeedReportSetting setting;
  final LMFeedReportStyle style;

  const LMFeedReportConfig({
    this.builder = const LMFeedReportBuilderDelegate(),
    this.setting = const LMFeedReportSetting(),
    this.style = const LMFeedReportStyle(),
  });
}
```

### Usage Example: Injecting Custom Configuration

1. **Create a Custom Builder:**

   ```dart
   class CustomReportBuilder extends LMFeedReportBuilderDelegate {
     @override
     Widget reportChipBuilder(BuildContext context, LMDeleteReasonViewData data) {
       return Chip(
         label: Text(data.reason),
       );
     }
   }
   ```

2. **Pass Custom Style or Setting along with Builder:**

   ```dart
   final customStyle = LMFeedReportStyle();
   final customSetting = LMFeedReportSetting();
   ```

3. **Inject the Custom Builder, Style, or Setting into the Config:**

   ```dart
   final reportConfig = LMFeedReportConfig(
     builder: CustomReportBuilder(),
     setting: customSetting,
     style: customStyle,
   );
   ```

4. **Initialize with Custom Config:**

   ```dart
   LMFeedCore.instance.initialize(
     config: LMFeedConfig(
       reportConfig: reportConfig,
     ),
   );
   ```

---

## 6. Summary  

The **Report Screen** provides a user interface for reporting inappropriate content. Developers can customize components like report chips and report content using the `LMFeedReportBuilderDelegate`. Configuration options are encapsulated in `LMFeedReportConfig`, enabling seamless integration and customization tailored to specific design and functional requirements.



================================================
File: feed/Flutter/Core/Screens/LMFeedRoomListScreen.md
================================================
---
sidebar_position: 11
title: Feedroom List Screen  
slug: /flutter/core/screens/feedroom-list-screen  
---

# Feedroom List Screen  

## Introduction  
The **Feedroom List Screen** (`LMFeedRoomListScreen`) serves as an interface for displaying a list of feedrooms. It supports customization for the **app bar**, **feedroom tiles**, and various states like empty views or loading indicators through builders.

---

## 1. LMFeedRoomListScreen Widget  
**File Location:**  
[feedroom_list_screen.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/feedroom/feedroom_list_screen.dart)

### Class Declaration

```dart
class LMFeedRoomListScreen extends StatefulWidget {
  /// Builder for individual feedroom tiles.
  final Widget Function()? feedroomTileBuilder;

  /// Builder for customizing the app bar.
  final LMFeedAppBarBuilder? appBarBuilder;

  /// Builder for the empty state view.
  final LMFeedContextWidgetBuilder? noItemsFoundIndicatorBuilder;

  /// Builder for the first-page loader when no items are present.
  final LMFeedContextWidgetBuilder? firstPageProgressIndicatorBuilder;

  /// Builder for the pagination loader when more items are being loaded.
  final LMFeedContextWidgetBuilder? newPageProgressIndicatorBuilder;

  /// Builder for the view when no more items are available.
  final LMFeedContextWidgetBuilder? noMoreItemsIndicatorBuilder;

  /// Builder for the error view displayed while loading a new page.
  final LMFeedContextWidgetBuilder? newPageErrorIndicatorBuilder;

  /// A screen widget for displaying a list of feedrooms.
  const LMFeedRoomListScreen({
    Key? key,
    this.feedroomTileBuilder,
    this.appBarBuilder,
    this.noItemsFoundIndicatorBuilder,
    this.firstPageProgressIndicatorBuilder,
    this.newPageProgressIndicatorBuilder,
    this.noMoreItemsIndicatorBuilder,
    this.newPageErrorIndicatorBuilder,
  }) : super(key: key);

  @override
  State<LMFeedRoomListScreen> createState() => _LMFeedRoomListScreenState();
}
```

#### Key Parameters  

1. **`feedroomTileBuilder`** (`Widget Function()?`): Builder for individual feedroom tiles.  
2. **`appBarBuilder`** (`LMFeedAppBarBuilder?`): Builder for customizing the app bar.  
3. **`noItemsFoundIndicatorBuilder`** (`LMFeedContextWidgetBuilder?`): Builder for the empty state view.  
4. **`firstPageProgressIndicatorBuilder`** (`LMFeedContextWidgetBuilder?`): Builder for the first-page loader when no items are present.  
5. **`newPageProgressIndicatorBuilder`** (`LMFeedContextWidgetBuilder?`): Builder for the pagination loader when more items are being loaded.   

For the complete source code, refer to the [GitHub link](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/feedroom/feedroom_list_screen.dart).

---

## 2. LMFeedRoomListBuilderDelegate  
**File Location:**  
[builder.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/feedroom/configurations/builder.dart)

### Class Declaration

```dart
class LMFeedRoomListBuilderDelegate extends LMFeedWidgetBuilderDelegate {
  const LMFeedRoomListBuilderDelegate();
}
```

The `LMFeedRoomListBuilderDelegate` allows developers to customize the **feedroom tiles**, **empty states**, and **loaders** specifically for the feedroom list screen.  

### Remaining Methods
Explore the complete list of methods [here](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/feedroom/configurations/builder.dart).

---

## 3. LMFeedRoomListSetting  
**File Location:**  
[settings.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/feedroom/configurations/settings.dart)

```dart
class LMFeedRoomListSetting {
  const LMFeedRoomListSetting();
}
```

- **Purpose:** Provides configuration settings for the Feedroom List Screen. No additional fields or methods are currently defined.

---

## 4. LMFeedRoomListStyle  
**File Location:**  
[style.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/feedroom/configurations/style.dart)

```dart
class LMFeedRoomListStyle {
  const LMFeedRoomListStyle();
}
```

- **Purpose:** Defines styling options for the Feedroom List Screen. No fields or methods are currently defined.

---

## 5. LMFeedRoomListConfig  
**File Location:**  
[config.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/feedroom/configurations/config.dart)

### Class Declaration

```dart
class LMFeedRoomListConfig {
  final LMFeedRoomListBuilderDelegate builder;
  final LMFeedRoomListSetting setting;
  final LMFeedRoomListStyle style;

  const LMFeedRoomListConfig({
    this.builder = const LMFeedRoomListBuilderDelegate(),
    this.setting = const LMFeedRoomListSetting(),
    this.style = const LMFeedRoomListStyle(),
  });
}
```

### Usage Example: Injecting Custom Configuration

1. **Create a Custom Builder:**

   ```dart
   class CustomFeedroomListBuilder extends LMFeedRoomListBuilderDelegate {
      @override
      PreferredSizeWidget appBarBuilder(
      BuildContext context,
      LMFeedAppBar appBar,
      ) {
      return appBar.copyWith();
      }
   }
   ```

2. **Pass Custom Style or Setting along with Builder:**

   ```dart
   final customStyle = LMFeedRoomListStyle();
   final customSetting = LMFeedRoomListSetting();
   ```

3. **Inject the Custom Builder, Style, or Setting into the Config:**

   ```dart
   final feedroomListConfig = LMFeedRoomListConfig(
     builder: CustomFeedroomListBuilder(),
     setting: customSetting,
     style: customStyle,
   );
   ```

4. **Initialize with Custom Config:**

   ```dart
   LMFeedCore.instance.initialize(
     config: LMFeedConfig(
       feedroomListConfig: feedroomListConfig,
     ),
   );
   ```

---

## 6. Summary  

The **Feedroom List Screen** provides a user interface for displaying a list of feedrooms. Developers can customize components like tiles, app bars, and empty states using the `LMFeedRoomListBuilderDelegate`. Configuration options are encapsulated in `LMFeedRoomListConfig`, enabling seamless integration and customization tailored to specific design and functional requirements.



================================================
File: feed/Flutter/Core/Screens/LMFeedRoomScreen.md
================================================
---
sidebar_position: 12  
title: Feedroom Screen  
slug: /flutter/core/screens/feedroom-screen  
---

# Feedroom Screen  

## Introduction  
The **Feedroom Screen** (`LMFeedRoomScreen`) provides an interface for viewing and interacting with a specific feedroom. It supports customization of the **app bar**, **posts**, **topic chips**, and other components through builders and configurations.

---

## 1. LMFeedRoomScreen Widget  
**File Location:**  
[feedroom_screen.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/feedroom/feedroom_screen.dart)

### Class Declaration

```dart
class LMFeedRoomScreen extends StatefulWidget {
  /// ID of the feedroom to display.
  final String feedroomId;

  /// Builder for customizing the app bar.
  final LMFeedAppBarBuilder? appBarBuilder;

  /// Builder for customizing the posts.
  final LMFeedPostWidgetBuilder? postBuilder;

  /// Builder for customizing the topic chips.
  final LMFeedContextChipBuilder? topicChipBuilder;

  /// Builder for floating action button (e.g., create post).
  final LMFeedContextButtonBuilder? floatingActionButtonBuilder;

  /// Settings for feedroom behavior and appearance.
  final LMFeedRoomSettings? settings;

  /// Builder for the topic bar.
  final Widget Function(BuildContext)? topicBarBuilder;

  /// A screen widget for displaying a specific feedroom.
  const LMFeedRoomScreen({
    Key? key,
    required this.feedroomId,
    this.appBarBuilder,
    this.postBuilder,
    this.topicChipBuilder,
    this.floatingActionButtonBuilder,
    this.settings,
    this.topicBarBuilder,
  }) : super(key: key);

  @override
  State<LMFeedRoomScreen> createState() => _LMFeedRoomScreenState();
}
```

#### Key Parameters  

1. **`feedroomId`** (`String`, required): ID of the feedroom to display.  
2. **`appBarBuilder`** (`LMFeedAppBarBuilder?`): Builder for customizing the app bar.  
3. **`postBuilder`** (`LMFeedPostWidgetBuilder?`): Builder for customizing the post widgets.  
4. **`topicChipBuilder`** (`LMFeedContextChipBuilder?`): Builder for customizing the topic chips.  
5. **`floatingActionButtonBuilder`** (`LMFeedContextButtonBuilder?`): Builder for the floating action button (e.g., create post).  


For the complete source code, refer to the [GitHub link](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/feedroom/feedroom_screen.dart).

---

## 2. LMFeedRoomBuilderDelegate  
**File Location:**  
[builder.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/feedroom/configurations/builder.dart)

### Class Declaration

```dart
class LMFeedRoomBuilderDelegate extends LMFeedWidgetBuilderDelegate {
  const LMFeedRoomBuilderDelegate();
}
```

The `LMFeedRoomBuilderDelegate` allows developers to customize the **posts**, **topic chips**, and **loaders** specifically for the feedroom screen.  

### Methods in LMFeedRoomBuilderDelegate

1. **`postWidgetBuilder`**  
   **Definition:** Builds the widget for posts in the feedroom screen.  
   **Purpose:** Customizes the style and layout of posts.  

   **Usage Example:**
   ```dart
    @override
    Widget postWidgetBuilder(
        BuildContext context, LMFeedPostWidget post, LMPostViewData postViewData,
        {LMFeedWidgetSource source = LMFeedWidgetSource.universalFeed}) {
      return post.copyWith();
    }
   ```

2. **`topicBuilder`**  
   **Definition:** Builds the widget for topic chips in the feedroom screen.  
   **Purpose:** Customizes the appearance and behavior of topic chips.  

   **Usage Example:**
   ```dart
    @override
    Widget topicBuilder(BuildContext context, LMFeedPostTopic postTopic,
        LMPostViewData postViewData) {
      return postTopic.copyWith();
    }
   ```

3. **`firstPageProgressIndicatorBuilder`**  
   **Definition:** Builds the loader widget for the feedroom screen.  
   **Purpose:** Provides a way to customize the loader.  

   **Usage Example:**
   ```dart
    @override
    Widget firstPageProgressIndicatorBuilder(BuildContext context,
        {Widget? child}) {
      return child;
    }
   ```

### Remaining Methods
Explore the complete list of methods [here](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/feedroom/configurations/builder.dart).

---

## 3. LMFeedRoomSettings  
**File Location:**  
[settings.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/feedroom/configurations/settings.dart)

```dart
class LMFeedRoomSettings {
  const LMFeedRoomSettings();
}
```

- **Purpose:** Provides configuration settings for the Feedroom Screen. No additional fields or methods are currently defined.

---

## 4. LMFeedRoomStyle  
**File Location:**  
[style.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/feedroom/configurations/style.dart)

```dart
class LMFeedRoomStyle {
  const LMFeedRoomStyle();
}
```

- **Purpose:** Defines styling options for the Feedroom Screen. No fields or methods are currently defined.

---

## 5. LMFeedRoomConfig  
**File Location:**  
[config.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/feedroom/configurations/config.dart)

### Class Declaration

```dart
class LMFeedRoomConfig {
  final LMFeedRoomBuilderDelegate builder;
  final LMFeedRoomSettings settings;
  final LMFeedRoomStyle style;

  const LMFeedRoomConfig({
    this.builder = const LMFeedRoomBuilderDelegate(),
    this.settings = const LMFeedRoomSettings(),
    this.style = const LMFeedRoomStyle(),
  });
}
```

### Usage Example: Injecting Custom Configuration

1. **Create a Custom Builder:**

   ```dart
   class CustomFeedRoomBuilder extends LMFeedRoomBuilderDelegate {
    @override
    Widget postWidgetBuilder(
        BuildContext context, LMFeedPostWidget post, LMPostViewData postViewData,
        {LMFeedWidgetSource source = LMFeedWidgetSource.universalFeed}) {
      return post.copyWith();
    }
   }
   ```

2. **Pass Custom Style or Setting along with Builder:**

   ```dart
   final customStyle = LMFeedRoomStyle();
   final customSetting = LMFeedRoomSettings();
   ```

3. **Inject the Custom Builder, Style, or Setting into the Config:**

   ```dart
   final feedRoomConfig = LMFeedRoomConfig(
     builder: CustomFeedRoomBuilder(),
     settings: customSetting,
     style: customStyle,
   );
   ```

4. **Initialize with Custom Config:**

   ```dart
   LMFeedCore.instance.initialize(
     config: LMFeedConfig(
       feedRoomConfig: feedRoomConfig,
     ),
   );
   ```

---

## 6. Summary  

The **Feedroom Screen** provides a user interface for interacting with a specific feedroom. Developers can customize components like app bars, posts, and topic chips using the `LMFeedRoomBuilderDelegate`. Configuration options are encapsulated in `LMFeedRoomConfig`, enabling seamless integration and customization tailored to specific design and functional requirements.



================================================
File: feed/Flutter/Core/Screens/LMFeedSearchScreen.md
================================================
---
sidebar_position: 13
title: Search Screen
slug: /flutter/core/screens/search-screen
---

# Search Screen

## Introduction

The **Search Screen** (`LMFeedSearchScreen`) serves as an interface for users to search for posts, topics, or other content. It supports customization of **post widgets**, **empty feed view**, and **loading states** through builders and configurations.

---

## 1. LMFeedSearchScreen Widget

**File Location:**  
[search_screen.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/search/search_screen.dart)

### Class Declaration

```dart
class LMFeedSearchScreen extends StatefulWidget {
  /// Builder for customizing the post widget.
  final LMFeedPostWidgetBuilder? postBuilder;

  /// Builder for the empty feed view.
  final LMFeedContextWidgetBuilder? emptyFeedViewBuilder;

  /// Builder for the first-page loader when no posts are available.
  final LMFeedContextWidgetBuilder? firstPageLoaderBuilder;

  /// Builder for the pagination loader when loading more posts.
  final LMFeedContextWidgetBuilder? paginationLoaderBuilder;

  /// Builder for the error view displayed when there is an issue with the feed.
  final LMFeedContextWidgetBuilder? feedErrorViewBuilder;

  /// Builder for the view displayed when there are no new pages available.
  final LMFeedContextWidgetBuilder? noNewPageWidgetBuilder;

  /// A screen widget for performing searches and displaying results.
  const LMFeedSearchScreen({
    Key? key,
    this.postBuilder,
    this.emptyFeedViewBuilder,
    this.firstPageLoaderBuilder,
    this.paginationLoaderBuilder,
    this.feedErrorViewBuilder,
    this.noNewPageWidgetBuilder,
  }) : super(key: key);

  @override
  State<LMFeedSearchScreen> createState() => _LMFeedSearchScreenState();
}
```

#### Key Parameters

1. **`postBuilder`** (`LMFeedPostWidgetBuilder?`): Builder for customizing the post widget.
2. **`emptyFeedViewBuilder`** (`LMFeedContextWidgetBuilder?`): Builder for the empty feed view.
3. **`firstPageLoaderBuilder`** (`LMFeedContextWidgetBuilder?`): Builder for the first-page loader.
4. **`paginationLoaderBuilder`** (`LMFeedContextWidgetBuilder?`): Builder for the pagination loader when loading more posts.
5. **`feedErrorViewBuilder`** (`LMFeedContextWidgetBuilder?`): Builder for the error view displayed when there is an issue with the feed.
6. **`noNewPageWidgetBuilder`** (`LMFeedContextWidgetBuilder?`): Builder for the view displayed when there are no new pages available.

For the complete source code, refer to the [GitHub link](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/search/search_screen.dart).

---

## 2. LMFeedSearchBuilderDelegate

**File Location:**  
[builder.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/search/configurations/builder.dart)

### Class Declaration

```dart
class LMFeedSearchBuilderDelegate extends LMFeedWidgetBuilderDelegate {
  const LMFeedSearchBuilderDelegate();
}
```

The `LMFeedSearchBuilderDelegate` allows developers to customize the **post items**, **empty states**, and **loaders** specifically for the search screen.

### Methods in LMFeedSearchBuilderDelegate

1. **`postWidgetBuilder`**  
   **Definition:** Builds the widget for posts in the search screen.  
   **Purpose:** Customizes the style and layout of posts.

   **Usage Example:**

   ```dart
   @override
   Widget postWidgetBuilder(
      BuildContext context, LMFeedPostWidget post, LMPostViewData postViewData,
      {LMFeedWidgetSource source = LMFeedWidgetSource.universalFeed}) {
    return post.copyWith();
   }
   ```

2. **`noItemsFoundIndicatorBuilder`**  
   **Definition:** Builds the widget for the empty state in the search screen.  
   **Purpose:** Customizes the appearance and behavior of the empty state.

   **Usage Example:**

   ```dart
    @override
    Widget noItemsFoundIndicatorBuilder(BuildContext context,
        {LMFeedButton? createPostButton, bool isSelfPost = true, Widget? child}) {
      return child;
    }
   ```

3. **`firstPageProgressIndicatorBuilder`**  
    **Definition:** Builds the loader widget for the search screen.  
    **Purpose:** Provides a way to customize the loader.

   **Usage Example:**

   ```dart
   @override
   Widget firstPageProgressIndicatorBuilder(BuildContext context,
      {Widget? child}) {
    return _widgetBuilderDelegate.firstPageProgressIndicatorBuilder(
      context,
      child: child,
    );
   }
   ```

### Remaining Methods

Explore the complete list of methods [here](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/search/configurations/builder.dart).

---

## 3. LMFeedSearchSetting

**File Location:**  
[settings.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/search/configurations/settings.dart)

```dart
class LMFeedSearchSetting {
  const LMFeedSearchSetting();
}
```

- **Purpose:** Provides configuration settings for the Search Screen. No additional fields or methods are currently defined.

---

## 4. LMFeedSearchStyle

**File Location:**  
[style.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/search/configurations/style.dart)

```dart
class LMFeedSearchStyle {
  const LMFeedSearchStyle();
}
```

- **Purpose:** Defines styling options for the Search Screen. No fields or methods are currently defined.

---

## 5. LMFeedSearchConfig

**File Location:**  
[config.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/search/configurations/config.dart)

### Class Declaration

```dart
class LMFeedSearchConfig {
  final LMFeedSearchBuilderDelegate builder;
  final LMFeedSearchSetting setting;
  final LMFeedSearchStyle style;

  const LMFeedSearchConfig({
    this.builder = const LMFeedSearchBuilderDelegate(),
    this.setting = const LMFeedSearchSetting(),
    this.style = const LMFeedSearchStyle(),
  });
}
```

### Usage Example: Injecting Custom Configuration

1. **Create a Custom Builder:**

   ```dart
   class CustomSearchBuilder extends LMFeedSearchBuilderDelegate {
    @override
    Widget postWidgetBuilder(
        BuildContext context, LMFeedPostWidget post, LMPostViewData postViewData,
        {LMFeedWidgetSource source = LMFeedWidgetSource.universalFeed}) {
      return post.copyWith();
    }
   }
   ```

2. **Pass Custom Style or Setting along with Builder:**

   ```dart
   final customStyle = LMFeedSearchStyle();
   final customSetting = LMFeedSearchSetting();
   ```

3. **Inject the Custom Builder, Style, or Setting into the Config:**

   ```dart
   final searchConfig = LMFeedSearchConfig(
     builder: CustomSearchBuilder(),
     setting: customSetting,
     style: customStyle,
   );
   ```

4. **Initialize with Custom Config:**

   ```dart
   LMFeedCore.instance.initialize(
     config: LMFeedConfig(
       searchConfig: searchConfig,
     ),
   );
   ```

---

## 6. Summary

The **Search Screen** provides a user interface for searching posts and other content. Developers can customize components like posts, empty views, and loaders using the `LMFeedSearchBuilderDelegate`. Configuration options are encapsulated in `LMFeedSearchConfig`, enabling seamless integration and customization tailored to specific design and functional requirements.



================================================
File: feed/Flutter/Core/Screens/LMFeedSocialScreen.md
================================================
---
sidebar_position: 14
title: Social Feed Screen
slug: /flutter/core/screens/feed-social-screen
---

# Social Feed Screen

## Introduction

The **Social Feed Screen** (`LMFeedSocialScreen`) provides an interface for browsing and interacting with social feeds. It supports multiple feed types (e.g., personalised, universal) and allows customization of the **app bar**, **posts**, and other components through builders and configurations.

---

## 1. LMFeedSocialScreen Widget

**File Location:**  
[social_feed_screen.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/feed/social/social_feed_screen.dart)

### Class Declaration

```dart
class LMFeedSocialScreen extends StatefulWidget {
  /// [LMFeedType] for the feed.
  /// It can be [LMFeedType.personalised] or [LMFeedType.universal].
  /// Default is [LMFeedType.universal].
  final LMFeedType feedType;

  /// Builder for customizing the app bar.
  final LMFeedAppBarBuilder? appBar;

  /// Builder for customizing the post widget.
  final LMFeedPostWidgetBuilder? postBuilder;

  /// Builder for the floating action button.
  final LMFeedContextButtonBuilder? floatingActionButtonBuilder;

  /// Settings for feed behavior and appearance.
  final LMFeedSocialSettings? settings;

  /// A screen widget for browsing and interacting with social feeds.
  const LMFeedSocialScreen({
    super.key,
    this.feedType = LMFeedType.universal,
    this.appBar,
    this.postBuilder,
    this.floatingActionButtonBuilder,
    this.settings,
  });

  @override
  State<LMFeedSocialScreen> createState() => _LMFeedSocialScreenState();
}
```

#### Key Parameters

1. **`feedType`** (`LMFeedType`): Specifies the type of feed (`personalised` or `universal`). Defaults to `universal`.
2. **`appBar`** (`LMFeedAppBarBuilder?`): Builder for customizing the app bar.
3. **`postBuilder`** (`LMFeedPostWidgetBuilder?`): Builder for customizing post widgets.
4. **`floatingActionButtonBuilder`** (`LMFeedContextButtonBuilder?`): Builder for the floating action button.
5. **`settings`** (`LMFeedSocialSettings?`): Settings for feed behavior and appearance.

For the complete source code, refer to the [GitHub link](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/feed/social/social_feed_screen.dart).

---

## 2. LMFeedSocialBuilderDelegate

**File Location:**  
[builder.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/feed/social/configurations/builder.dart)

### Class Declaration

```dart
class LMFeedSocialBuilderDelegate extends LMFeedWidgetBuilderDelegate {
  const LMFeedSocialBuilderDelegate();
}
```

The `LMFeedSocialBuilderDelegate` allows developers to customize the **posts**, **floating action buttons**, and **loaders** specifically for the social feed screen.

### Methods in LMFeedSocialBuilderDelegate

1. **`postWidgetBuilder`**  
   **Definition:** Builds the widget for posts in the social feed screen.  
   **Purpose:** Customizes the style and layout of posts.

   **Usage Example:**

   ```dart
   @override
   Widget postWidgetBuilder(
      BuildContext context, LMFeedPostWidget post, LMPostViewData postViewData,
      {LMFeedWidgetSource source = LMFeedWidgetSource.universalFeed}) {
    return post.copyWith();
   }
   ```

2. **`floatingActionButtonBuilder`**  
   **Definition:** Builds the floating action button in the social feed screen.  
   **Purpose:** Customizes the appearance and behavior of the floating action button.

   **Usage Example:**

   ```dart
   @override
   Widget floatingActionButtonBuilder(BuildContext context, LMFeedButton floatingActionButton) {
     // Return a custom floating action button
     return floatingActionButton.copyWith();
   }
   ```

3. **`firstPageProgressIndicatorBuilder`**  
   **Definition:** Builds the first page loader widget for the social feed screen.  
   **Purpose:** Provides a way to customize the loader.

   **Usage Example:**

   ```dart
   @override
   Widget firstPageProgressIndicatorBuilder(BuildContext context, {Widget? child}) {
     return child;
   }
   ```

### Remaining Methods

Explore the complete list of methods [here](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/feed/social/configurations/builder.dart).

---

## 3. LMFeedSocialSettings

**File Location:**  
[settings.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/feed/social/configurations/settings.dart)

### Class Declaration

```dart
class LMFeedSocialSettings {
  const LMFeedSocialSettings();
}
```

- **Purpose:** Provides configuration settings for the Social Feed Screen. No additional fields or methods are currently defined.

---

## 4. LMFeedSocialStyle

**File Location:**  
[styles.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/feed/social/configurations/styles.dart)

### Class Declaration

```dart
class LMFeedSocialStyle {
  const LMFeedSocialStyle();
}
```

- **Purpose:** Defines styling options for the Social Feed Screen. No fields or methods are currently defined.

---

## 5. LMFeedSocialConfig

**File Location:**  
[config.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/tree/master/packages/integration/lib/src/views/feed/social/configurations/config.dart)

### Class Declaration

```dart
class LMFeedSocialConfig {
  final LMFeedSocialBuilderDelegate builder;
  final LMFeedSocialSettings settings;
  final LMFeedSocialStyle style;

  const LMFeedSocialConfig({
    this.builder = const LMFeedSocialBuilderDelegate(),
    this.settings = const LMFeedSocialSettings(),
    this.style = const LMFeedSocialStyle(),
  });
}
```

### Usage Example: Injecting Custom Configuration

1. **Create a Custom Builder:**

   ```dart
   class CustomFeedSocialBuilder extends LMFeedSocialBuilderDelegate {
    @override
    Widget postWidgetBuilder(
        BuildContext context, LMFeedPostWidget post, LMPostViewData postViewData,
        {LMFeedWidgetSource source = LMFeedWidgetSource.universalFeed}) {
      return post.copyWith();
    }
   }
   ```

2. **Pass Custom Style or Setting along with Builder:**

   ```dart
   final customStyle = LMFeedSocialStyle();
   final customSetting = LMFeedSocialSettings();
   ```

3. **Inject the Custom Builder, Style, or Setting into the Config:**

   ```dart
   final socialConfig = LMFeedSocialConfig(
     builder: CustomFeedSocialBuilder(),
     settings: customSetting,
     style: customStyle,
   );
   ```

4. **Initialize with Custom Config:**

   ```dart
   LMFeedCore.instance.initialize(
     config: LMFeedConfig(
       socialConfig: socialConfig,
     ),
   );
   ```

---

## 6. Summary

The **Social Feed Screen** provides a user interface for interacting with social feeds. Developers can customize components like app bars, posts, and floating action buttons using the `LMFeedSocialBuilderDelegate`. Configuration options are encapsulated in `LMFeedSocialConfig`, enabling seamless integration and customization tailored to specific design and functional requirements.



================================================
File: feed/Flutter/Core/Screens/LMFeedVideoFeedScreen.md
================================================
---
sidebar_position: 15  
title: Video Feed Screen  
slug: /flutter/core/screens/video-feed-screen  
---

# Video Feed Screen  

## Introduction  
The **Video Feed Screen** (`LMFeedVideoFeedScreen`) provides an interface for browsing and interacting with video-based feeds. It allows customization of the **app bar**, **video posts**, and other components through builders and configurations.

---

## 1. LMFeedVideoFeedScreen Widget  
**File Location:**  
[video_feed_screen.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/blob/master/packages/integration/lib/src/views/feed/video_feed/video_feed_screen.dart)

### Class Declaration

```dart
class LMFeedVideoFeedScreen extends StatefulWidget {
  const LMFeedVideoFeedScreen({super.key});

  @override
  State<LMFeedVideoFeedScreen> createState() => _LMFeedVideoFeedScreenState();
}
```

#### Key Features  

- A stateful widget responsible for displaying a video-based feed.  
- Can be customized using **builders** and **configurations** for flexibility.  

For the complete source code, refer to the [GitHub link](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/blob/master/packages/integration/lib/src/views/feed/video_feed/video_feed_screen.dart).

---

## 2. LMFeedVideoFeedScreenBuilderDelegate  
**File Location:**  
[builder.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/blob/master/packages/integration/lib/src/views/feed/video_feed/configurations/builder.dart)  

### Class Declaration

```dart
class LMFeedVideoFeedScreenBuilderDelegate {
  const LMFeedVideoFeedScreenBuilderDelegate();
}
```

The `LMFeedVideoFeedScreenBuilderDelegate` allows developers to customize various UI components of the **video feed screen**.

### Methods in LMFeedVideoFeedScreenBuilderDelegate

1. **`appBarBuilder`**  
   - Builds the app bar for the Video Feed Screen, allowing custom styles and actions.  
   ```dart
   Widget appBarBuilder(BuildContext context, LMFeedAppBar appBar)
   ```

2. **`titleTextBuilder`**  
   - Customizes the title text widget inside the app bar or screen.  
   ```dart
   Widget titleTextBuilder(BuildContext context, LMFeedText text)
   ```

3. **`createPostButtonBuilder`**  
   - Defines the UI for the "Create Post" button, allowing customization.  
   ```dart
   Widget createPostButtonBuilder(BuildContext context, LMFeedButton button)
   ```

4. **`postViewBuilder`**  
   - Builds the layout for displaying video posts in the feed.  
   ```dart
   Widget postViewBuilder(
     BuildContext context,
     LMFeedVerticalVideoPost postWidget, 
     LMPostViewData postViewData
   )
   ```

5. **`noItemIndicatorBuilder`**  
   - Provides a custom UI when there are no video posts available.  
   ```dart
   Widget noItemIndicatorBuilder(BuildContext context, Widget child)
   ```

6. **`uploadingPostLoaderBuilder`**  
   - Defines the UI for showing a loader when a video post is uploading.  
   ```dart
   Widget uploadingPostLoaderBuilder(BuildContext context, LMFeedLoader loader)
   ```

7. **`uploadingPostRetryButtonBuilder`**  
   - Builds a retry button to allow users to re-upload a failed video post.  
   ```dart
   Widget uploadingPostRetryButtonBuilder(BuildContext context, LMFeedButton button)
   ```

Explore the complete list of methods [here](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/blob/master/packages/integration/lib/src/views/feed/video_feed/configurations/builder.dart).

---

## 3. LMFeedVideoFeedSettings  
**File Location:**  
[settings.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/blob/master/packages/integration/lib/src/views/feed/video_feed/configurations/settings.dart)

### Class Declaration

```dart
class LMFeedVideoFeedSettings {
  const LMFeedVideoFeedSettings();
}
```

- **Purpose:** Provides configuration settings for the Video Feed Screen. No additional fields or methods are currently defined.

---

## 4. LMFeedVideoFeedStyle  
**File Location:**  
[styles.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/blob/master/packages/integration/lib/src/views/feed/video_feed/configurations/styles.dart)

### Class Declaration

```dart
class LMFeedVideoFeedStyle {
  const LMFeedVideoFeedStyle();
}
```

- **Purpose:** Defines styling options for the Video Feed Screen. No fields or methods are currently defined.

---

## 5. LMFeedVideoFeedConfig  
**File Location:**  
[config.dart](https://github.com/LikeMindsCommunity/likeminds-feed-flutter/blob/master/packages/integration/lib/src/views/feed/video_feed/configurations/config.dart)

### Class Declaration

```dart
class LMFeedVideoFeedConfig {
  final LMFeedVideoFeedScreenBuilderDelegate builder;
  final LMFeedVideoFeedSettings settings;
  final LMFeedVideoFeedStyle style;

  const LMFeedVideoFeedConfig({
    this.builder = const LMFeedVideoFeedScreenBuilderDelegate(),
    this.settings = const LMFeedVideoFeedSettings(),
    this.style = const LMFeedVideoFeedStyle(),
  });
}
```

### Usage Example  

#### **1. Create a Custom Builder**  
```dart
class CustomVideoFeedBuilder extends LMFeedVideoFeedScreenBuilderDelegate {
  @override
  Widget postViewBuilder(
    BuildContext context,
    LMFeedVerticalVideoPost postWidget, 
    LMPostViewData postViewData
  ) {
    return Column(
      children: [
        Text(postViewData.title),
        postWidget,
      ],
    );
  }
}
```

#### **2. Initialize with Custom Configuration**  
```dart
final customVideoFeedConfig = LMFeedVideoFeedConfig(
  builder: CustomVideoFeedBuilder(),
);
```

#### **3. Apply the Updated Configuration**  
```dart
LMFeedCore.instance.initialize(
  config: LMFeedConfig(
    videoFeedConfig: customVideoFeedConfig,
  ),
);
```

---

## 6. Summary  

The **Video Feed Screen** provides a user interface for interacting with video-based content. Developers can customize components like app bars, video posts, and upload UI using the `LMFeedVideoFeedScreenBuilderDelegate`. Configuration options are encapsulated in `LMFeedVideoFeedConfig`, enabling seamless integration and customization tailored to specific design and functional requirements.



================================================
File: feed/Flutter/Core/Screens/_category_.json
================================================
{
  "label": "Screens",
  "position": 1,
  "link": {
    "type": "generated-index",
    "description": "Screens used in Flutter Core Library"
  }
}



================================================
File: feed/Flutter/Core/Troubleshooting Guides/_category_.json
================================================
{
  "label": "Troubleshooting Guides",
  "position": 4,
  "link": {
    "type": "generated-index",
    "description": "Troubleshooting guides related to Core library in LikeMinds Flutter SDK"
  }
}



================================================
File: feed/Flutter/Core/Troubleshooting Guides/how-to-setup-proguard-for-media-upload.md
================================================
---
sidebar_position: 1
title: How to setup proguard for media upload
slug: /flutter/core/troubleshooting-guide/how-to-setup-proguard
---

# How to setup proguard for media upload

To start uploading media to feed (release mode) - Add Proguard rules using the [guide](#proguard-setup) below

## Proguard setup

This is required only for Android, when you are building for release mode.

To enable uploading of media in the release build of Android, add these lines in your app/build.gradle

```gradle
  minifyEnabled true
  useProguard true
  proguardFiles getDefaultProguardFile('proguard-android.txt'),
          'proguard-aws-2.1.5.pro'

  //EXAMPLE
  buildTypes {
    release {
    signingConfig signingConfigs.release
    minifyEnabled true
    useProguard true
    proguardFiles getDefaultProguardFile('proguard-android.txt'),
                  'proguard-aws-2.1.5.pro'
    }
  }
```

Now create a new file with name "proguard-aws-2.1.5.pro" at the same location as app/build.gradle and paste the copied contents into this file. Paste the content below into this file.

```pro
# These options are the minimal options for a functioning application
# using Proguard and the AWS SDK 2.1.5 for Android
-keep class io.flutter.app.** { *; }
-keep class io.flutter.plugin.**  { *; }
-keep class io.flutter.util.**  { *; }
-keep class io.flutter.view.**  { *; }
-keep class io.flutter.**  { *; }
-keep class io.flutter.plugins.**  { *; }
-keep class org.apache.commons.logging.**               { *; }
-keep class com.amazonaws.org.apache.commons.logging.** { *; }
-keep class com.amazonaws.services.sqs.QueueUrlHandler  { *; }
-keep class com.amazonaws.javax.xml.transform.sax.*     { public *; }
-keep class com.amazonaws.javax.xml.stream.**           { *; }
-keep class com.amazonaws.services.**.model.*Exception* { *; }
-keep class com.amazonaws.internal.**                   { *; }
-keep class org.codehaus.**                             { *; }
-keep class org.joda.time.tz.Provider                   { *; }
-keep class org.joda.time.tz.NameProvider               { *; }
-keepattributes Signature,*Annotation*,EnclosingMethod
-keepnames class com.fasterxml.jackson.** { *; }
-keepnames class com.amazonaws.** { *; }

-dontwarn com.fasterxml.jackson.databind.**
-dontwarn javax.xml.stream.events.**
-dontwarn org.codehaus.jackson.**
-dontwarn org.apache.commons.logging.impl.**
-dontwarn org.apache.http.conn.scheme.**
-dontwarn org.apache.http.annotation.**
-dontwarn org.ietf.jgss.**
-dontwarn org.joda.convert.**
-dontwarn com.amazonaws.org.joda.convert.**
-dontwarn org.w3c.dom.bootstrap.**

#SDK split into multiple jars so certain classes may be referenced but not used
-dontwarn com.amazonaws.services.s3.**
-dontwarn com.amazonaws.services.sqs.**

-dontnote com.amazonaws.services.sqs.QueueUrlHandler
```

Your release mode APK should work now.



================================================
File: feed/Flutter/Data/__category__.json
================================================
{
  "label": "Data",
  "position": 2,
  "link": {
    "type": "generated-index",
    "description": "Flutter Documentation for LikeMinds Feed Data layer of the SDK"
  }
}



================================================
File: feed/Flutter/Data/introduction.md
================================================
---
sidebar_position: 1
title: Introduction
---

# Getting Started

The LikeMinds Flutter Feed SDK empowers you to integrate personalized and engaging feeds into your Flutter application, enhancing user experiences and driving user engagement. This guide will walk you through the steps to get started with the LikeMinds Flutter Feed SDK and set up a dynamic feed in your application. Obtain the necessary API key from the [LikeMinds dashboard](https://dashboard.likeminds.community).

## Add Dependency

Add `likeminds_feed` as a dependency in your `pubspec.yaml` file

```yaml
dependencies:
  likeminds_feed: ^latest
```

or you can run this command in the terminal

```bash
flutter pub add likeminds_feed
```

## Usage

To start using the package, import it in your `main.dart` file

```dart
import 'package:likeminds_feed/likeminds_feed.dart';
```

To initiate LikeMinds SDK in your code, use the `LMFeedClientBuilder` class to build an instance of the `LMFeedClient` class. The `LMFeedClientBuilder` class has a `build()` method that returns the `LMFeedClient` instance.

```dart
// Initiate the LMFeedClient instance
final LMFeedClient lmFeedClient = (LMFeedClientBuilder()
    ..sdkCallback(YOUR_CALLBACK))
    .build();
```

:::tip
Maintain this instance of the `LMFeedClient` class throughout your application. You can use it to access the different methods exposed by the package.
:::

### LMSDKCallback

The `LMSDKCallback` class is a callback class that is used to listen to analytic events from the LikeMinds Feed package. It has several methods that you can override to listen to events from the package.

```dart
class YourCallback extends LMChatSDKCallback {
  @override
  void eventFiredCallback(String eventKey, Map<String, dynamic> propertiesMap) {
    // Implement eventFiredCallback
    print('Event Fired: $eventKey with properties: $propertiesMap');
  }

  @override
  void loginRequiredCallback() {
    print('Login required');
  }

  @override
  void logoutCallback() {
    print('User logged out');
  }

  @override
  void profileRouteCallback({required String lmUserId}) {
    print('Profile button clicked for user: $lmUserId');
  }

  @override
  void onAccessTokenExpiredAndRefreshed(String accessToken, String refreshToken) {
    print('Access token refreshed: $accessToken');
  }

  @override
  Future<LMAuthToken> onRefreshTokenExpired() async {
    print('Refresh token expired, fetching new token...');
    return LMAuthToken(accessToken: 'newAccessToken', refreshToken: 'newRefreshToken');
  }
}
```



================================================
File: feed/Flutter/Data/logging.md
================================================
---
sidebar_position: 10
title: Logging
---

# Push Logs

The `pushLogs()` function is used to push logs. It takes a `PushLogRequest` as input, which includes a list of `LMLog` objects. The function returns a `PushLogResponse` as a Future.

## Steps to Push Logs with Error Logging

1. Create an instance of `PushLogRequest` with the required parameter: `logs` (a list of `LMLog` objects).
2. Call the `pushLogs()` function using the instance of the `LMLog` class, passing the request as a parameter.
3. Use the response as per your requirement.

```dart
// Create an instance of PushLogRequest
final PushLogRequest pushLogRequest = PushLogRequest(
  logs: [
    LMLog(...),
    // Add more LMLog objects as needed
  ],
);

// Get the response from calling the function
final PushLogResponse pushLogResponse = await lmLog.pushLogs(pushLogRequest);

// Process the response, as per requirement
if (pushLogResponse.success) {
  // your function to handle successful log push
  handleLogPushSuccess();
} else {
  // your function to handle error message
  handleLogPushError(pushLogResponse.errorMessage);
}
```

## Models

### PushLogRequest

List of parameters for the `PushLogRequest` class

| Variable | Type                    | Description                      | Optional |
| -------- | ----------------------- | -------------------------------- | -------- |
| logs     | List<[`LMLog`](#lmlog)> | List of log objects to be pushed |          |

### PushLogResponse

List of parameters for the `PushLogResponse` class

| Variable     | Type     | Description                      | Optional |
| ------------ | -------- | -------------------------------- | -------- |
| success      | `bool`   | API success status               |          |
| errorMessage | `String` | Error message in case of failure | &#10004; |




================================================
File: feed/Flutter/Data/Comment/_category_.json
================================================
{
  "label": "Comment",
  "position": 3,
  "link": {
    "type": "generated-index",
    "description": "Documentation for Comment feature in Feed"
  }
}



================================================
File: feed/Flutter/Data/Comment/add_comment.md
================================================
---
sidebar_position: 2
title: Add Comment
---

# Add Comment

The `addComment()` function allows users to engage in interactive discussions by adding comments to posts. This powerful feature enables users to express their thoughts, ask questions, and engage with other members in a dynamic and collaborative manner. By integrating the comment functionality, developers can foster meaningful conversations and enhance the overall user experience within their application.

## Steps to Add Comment

1. Create an instance of `AddCommentRequest` with the required parameters: `text` and `postId`.
2. Call the `addComment()` function using the instance of the `LMFeedClient` class, passing the request as a parameter.
3. Use the response as per your requirement.

```dart
// Create an instance of AddCommentRequest
AddCommentRequest request = (AddCommentRequestBuilder()
            ..postId("post_id")
            ..text("comment_text"))
          .build();

// Get the response from calling the function
final AddCommentResponse addCommentResponse = await lmFeedClient.addComment(addCommentRequest);

// Process the response, as per requirement
if (addCommentResponse.success) {
  // your function to handle successful addition of comment
  handleAddCommentSuccess(addCommentResponse.reply);
} else {
  // your function to handle error message
  handleAddCommentError(addCommentResponse.errorMessage);
}
```

## Additional Features

### Tag a User

To tag a user, use the [getTaggingList()](../Helper/tagging.md) function to fetch the list of users that can be tagged, and use the format `<<[user.name]|route://user_profile/[user.sdkClientInfo.uuid]>>` to embed it inside the text of the post.

## Models

### AddCommentRequest

List of parameters for the `AddCommentRequest` class

| Variable | Type     | Description         |
| -------- | -------- | ------------------- |
| text     | `String` | Comment text        |
| postId   | `String` | Post ID for comment |

### AddCommentResponse

List of parameters for the `AddCommentResponse` class

| Variable     | Type                                              | Description                               | Optional |
| ------------ | ------------------------------------------------- | ----------------------------------------- | -------- |
| success      | `bool`                                            | API success status                        |          |
| errorMessage | `String`                                          | Error message in failure                  | &#10004; |
| reply        | [`Comment`](../Models/comment.md)                 | Added comment entity                      | &#10004; |
| users        | Map<`String`, [`User`](../Models/user.md)>        | Map of user UUIDs to User entities        | &#10004; |
| topics       | Map<String, [`Topic`](../Models/topic.md)>        | Map of topic IDs to Topic entities        |          |
| widgets      | Map<String, [`WidgetModel`](../Models/widget.md)> | Map of widget IDs to WidgetModel entities |          |
| userTopics   | Map<String, List<String\>>                        | Map of user topics (key: user ID)         | &#10004; |



================================================
File: feed/Flutter/Data/Comment/delete_comment.md
================================================
---
sidebar_position: 6
title: Delete Comment
---

# Delete Comment

The `deleteComment()` function is used to remove a comment from a post. This functionality allows users to manage their comments by providing the capability to delete comments they no longer wish to keep.

:::note
**Community Managers** can delete other members commennts/replies as well, but reason is required.
:::


## Steps to Delete Comment

1. Create an instance of `DeleteCommentRequest` with the required parameters: `commentId`, `postId`, and `reason`.
2. Call the `deleteComment()` function using the instance of the `LMFeedClient` class, passing the request as a parameter.
3. Use the response as per your requirement.

```dart
// Create an instance of DeleteCommentRequest
DeleteCommentRequest request = (DeleteCommentRequestBuilder()
            ..commentId("comment_id")
            ..postId("post_id")
            ..reason("reason_for_deletion"))
          .build();

// Get the response from calling the function
final DeleteCommentResponse deleteCommentResponse = await lmFeedClient.deleteComment(deleteCommentRequest);

// Process the response, as per requirement
if (deleteCommentResponse.success) {
  // your function to handle successful deletion of comment
  handleDeleteCommentSuccess();
} else {
  // your function to handle error message
  handleDeleteCommentError(deleteCommentResponse.errorMessage);
}
```

## Models

### DeleteCommentRequest

List of parameters for the `DeleteCommentRequest` class

| Variable  | Type     | Description                  |
| --------- | -------- | ---------------------------- |
| commentId | `String` | Comment ID to be deleted     |
| postId    | `String` | Post ID for the comment      |
| reason    | `String` | Optional reason for deletion |

:::note
`deleteReason` is only required when **Community Manager** deletes other members post.
:::

### DeleteCommentResponse

List of parameters for the `DeleteCommentResponse` class

| Variable     | Type     | Description              | Optional |
| ------------ | -------- | ------------------------ | -------- |
| success      | `bool`   | API success status       |          |
| errorMessage | `String` | Error message in failure | &#10004; |



================================================
File: feed/Flutter/Data/Comment/edit_comment.md
================================================
---
sidebar_position: 5
title: Edit Comment
---

# Edit Comment

The `editComment()` function empowers members to edit their own comments, allowing them the convenience and flexibility to modify their shared thoughts and responses within the application. This feature enables users to refine their comments, correct any mistakes, or update their opinions as needed, enhancing the overall user experience and ensuring accurate and up-to-date discussions.

:::note
**Community Managers** can edit other members commennts/replies as well.
:::

## Steps to Edit Comment

1. Create an instance of `EditCommentRequest` with the required parameters: `text`, `postId`, and `commentId`.
2. Call the `editComment()` function using the instance of the `LMFeedClient` class, passing the request as a parameter.
3. Use the response as per your requirement.

```dart
// Create an instance of EditCommentRequest
EditCommentRequest request = (EditCommentRequestBuilder()
            ..postId("post_id")
            ..commentId("comment_id")
            ..text("edited_text"))
          .build();

// Get the response from calling the function
final EditCommentResponse editCommentResponse = await lmFeedClient.editComment(editCommentRequest);

// Process the response, as per requirement
if (editCommentResponse.success) {
  // your function to handle successful comment edit
  handleEditCommentSuccess(editCommentResponse.reply);
} else {
  // your function to handle error message
  handleEditCommentError(editCommentResponse.errorMessage);
}
```

## Models

### EditCommentRequest

List of parameters for the `EditCommentRequest` class

| Variable  | Type     | Description             |
| --------- | -------- | ----------------------- |
| text      | `String` | Updated comment text    |
| postId    | `String` | Post ID for the comment |
| commentId | `String` | Comment ID to be edited |

### EditCommentResponse

List of parameters for the `EditCommentResponse` class

| Variable     | Type                                              | Description                               | Optional |
| ------------ | ------------------------------------------------- | ----------------------------------------- | -------- |
| success      | `bool`                                            | API success status                        |          |
| errorMessage | `String`                                          | Error message in failure                  | &#10004; |
| reply        | [`Comment`](../Models/comment.md)                 | Updated comment entity                    | &#10004; |
| users        | Map<`String`, [`User`](../Models/user.md)>        | Map of user UUIDs to User entities        | &#10004; |
| topics       | Map<String, [`Topic`](../Models/topic.md)>        | Map of topic IDs to Topic entities        |          |
| widgets      | Map<String, [`WidgetModel`](../Models/widget.md)> | Map of widget IDs to WidgetModel entities |          |
| userTopics   | Map<String, List<String\>>                        | Map of user topics (key: user ID)         | &#10004; |



================================================
File: feed/Flutter/Data/Comment/edit_reply.md
================================================
---
sidebar_position: 8
title: Edit Comment Reply
---

# Edit Comment Reply

The `editCommentReply()` function empowers users to modify their replies to comments, providing a dynamic and interactive user experience. By utilizing this function, developers enable users to update their responses, ensuring the content remains relevant and accurate. The function takes an `EditCommentReplyRequest` as input, containing the `text`, `postId`, `commentId`, and `replyId` parameters, and returns an `EditCommentReplyResponse` as a Future.

## Steps to Edit Comment Reply

1. Create an instance of `EditCommentReplyRequest` with the required parameters: `text`, `postId`, `commentId`, and `replyId`.
2. Call the `editCommentReply()` function using the instance of the `LMFeedClient` class, passing the request as a parameter.
3. Utilize the response as per your application's requirements.

```dart
// Create an instance of EditCommentReplyRequest
EditCommentReplyRequest request = (EditCommentReplyRequestBuilder()
            ..commentId("comment_id")
            ..text("edited_text")
            ..postId("post_id")
            ..replyId("reply_id"))
          .build();

// Get the response from calling the function
final EditCommentReplyResponse editReplyResponse = await lmFeedClient.editCommentReply(editReplyRequest);

// Process the response, as per requirement
if (editReplyResponse.success) {
  // your function to handle successful edit of comment reply
  handleEditCommentReplySuccess(editReplyResponse.reply);
} else {
  // your function to handle error message
  handleEditCommentReplyError(editReplyResponse.errorMessage);
}
```

## Models

### EditCommentReplyRequest

List of parameters for the `EditCommentReplyRequest` class

| Variable  | Type     | Description                         | Optional |
| --------- | -------- | ----------------------------------- | -------- |
| text      | `String` | Edited reply text                   |
| postId    | `String` | Post ID associated with the comment |
| commentId | `String` | Parent comment ID for the reply     |
| replyId   | `String` | ID of the reply to be edited        |

### EditCommentReplyResponse

List of parameters for the `EditCommentReplyResponse` class

| Variable     | Type                                              | Description                               | Optional |
| ------------ | ------------------------------------------------- | ----------------------------------------- | -------- |
| success      | `bool`                                            | API success status                        |          |
| errorMessage | `String`                                          | Error message in failure                  | &#10004; |
| reply        | [`Comment`](../Models/comment.md)                 | Edited comment reply entity               | &#10004; |
| users        | Map<`String`, [`User`](../Models/user.md)>        | Map of user UUIDs to User entities        | &#10004; |
| topics       | Map<String, [`Topic`](../Models/topic.md)>        | Map of topic IDs to Topic entities        |          |
| widgets      | Map<String, [`WidgetModel`](../Models/widget.md)> | Map of widget IDs to WidgetModel entities |          |
| userTopics   | Map<String, List<String\>>                        | Map of user topics (key: user ID)         | &#10004; |



================================================
File: feed/Flutter/Data/Comment/fetch_comment.md
================================================
---
sidebar_position: 1
title: Fetch Comment
---

# Fetch Comment

The `getComment()` function serves the purpose of fetching a specific comment along with its associated replies. By utilizing this function, developers can seamlessly retrieve detailed information about a comment and the ensuing conversation.

## Steps to Get Comment

1. Create an instance of `GetCommentRequest` with the required parameters: `commentId`, `postId`, and `page`.
2. Call the `getComment()` function using the instance of the `LMFeedClient` class, passing the request as a parameter.
3. Utilize the response as per your application's requirements.

```dart
// Create an instance of GetCommentRequest
GetCommentRequest request = (GetCommentRequestBuilder()
            ..postId("post_id")
            ..commentId("comment_id")
            ..page(1))
          .build();

// Get the response from calling the function
final GetCommentResponse commentResponse = await lmFeedClient.getComment(commentRequest);

// Process the response, as per requirement
if (commentResponse.success) {
  // your function to handle successful retrieval of the comment and replies
  handleGetCommentSuccess(commentResponse.postReplies, commentResponse.users);
} else {
  // your function to handle error message
  handleGetCommentError(commentResponse.errorMessage);
}
```

## Models

### GetCommentRequest

List of parameters for the `GetCommentRequest` class

| Variable  | Type     | Description                         |
| --------- | -------- | ----------------------------------- |
| commentId | `String` | Comment ID to retrieve              |
| postId    | `String` | Post ID associated with the comment |
| page      | `int`    | Page number for pagination          |

### GetCommentResponse

List of parameters for the `GetCommentResponse` class

| Variable     | Type                                              | Description                               | Optional |
| ------------ | ------------------------------------------------- | ----------------------------------------- | -------- |
| success      | `bool`                                            | API success status                        |          |
| errorMessage | `String`                                          | Error message in failure                  | &#10004; |
| postReplies  | [`Comment`](../Models/comment.md)                 | Comment and replies entity                | &#10004; |
| users        | Map<`String`, [`User`](../Models/user.md)>        | Map of user UUIDs to User entities        | &#10004; |
| topics       | Map<String, [`Topic`](../Models/topic.md)>        | Map of topic IDs to Topic entities        |          |
| widgets      | Map<String, [`WidgetModel`](../Models/widget.md)> | Map of widget IDs to WidgetModel entities |          |
| userTopics   | Map<String, List<String\>>                        | Map of user topics (key: user ID)         | &#10004; |



================================================
File: feed/Flutter/Data/Comment/fetch_comment_likes.md
================================================
---
sidebar_position: 7
title: Fetch Comment Likes
---

# Fetch Comment Likes

The `getCommentLikes()` function enables users to retrieve the list of individuals who have expressed their appreciation for a particular comment. This feature provides valuable insights into the popularity and impact of comments within the community.

## Steps to Get Comment Likes

1. Create an instance of `GetCommentLikesRequest` with the required parameters: `commentId`, `postId`, `page`, and `pageSize`.
2. Call the `getCommentLikes()` function using the instance of the `LMFeedClient` class, passing the request as a parameter.
3. Use the response as per your requirement.

```dart
// Create an instance of GetCommentLikesRequest
 GetCommentLikesRequest request = (GetCommentLikesRequestBuilder()
            ..commentId("comment_id")
            ..page(1)
            ..pageSize(10)
            ..postId("post_id"))
          .build();

// Get the response from calling the function
final GetCommentLikesResponse commentLikesResponse = await lmFeedClient.getCommentLikes(commentLikesRequest);

// Process the response, as per requirement
if (commentLikesResponse.success) {
  // your function to handle successful retrieval of comment likes
  handleCommentLikesSuccess(commentLikesResponse.commentLikes, commentLikesResponse.totalCount);
} else {
  // your function to handle error message
  handleCommentLikesError(commentLikesResponse.errorMessage);
}
```

## Models

### GetCommentLikesRequest

List of parameters for the `GetCommentLikesRequest` class

| Variable  | Type     | Description                         |
| --------- | -------- | ----------------------------------- |
| commentId | `String` | Comment ID to retrieve likes        |
| postId    | `String` | Post ID associated with the comment |
| page      | `int`    | Page number for pagination          |
| pageSize  | `int`    | Number of items per page            |

### GetCommentLikesResponse

List of parameters for the `GetCommentLikesResponse` class

| Variable     | Type                                       | Description                        | Optional |
| ------------ | ------------------------------------------ | ---------------------------------- | -------- |
| success      | `bool`                                     | API success status                 |          |
| errorMessage | `String`                                   | Error message in failure           | &#10004; |
| commentLikes | List<[`Like`](../Models/like.md)>          | List of liked comments             |          |
| users        | Map<`String`, [`User`](../Models/user.md)> | Map of user UUIDs to User entities |          |
| totalCount   | `int`                                      | Total count of likes               |          |



================================================
File: feed/Flutter/Data/Comment/fetch_user_created_comment.md
================================================
---
sidebar_position: 9
title: Fetch User Created Comment
---

# Fetch User Created Comment

To retrieve comments created by a specific user, you need to fetch them within the system. This process allows you to get all comments associated with a user in the LikeMinds Feed.

## Steps to Fetch User Created Comments

1. Build a `GetUserCommentsRequest` object using the `GetUserCommentsRequestBuilder` class.
2. Call the `getUserComments()` function using the instance of the `LMFeedClient` class.
3. Use the response as per your requirement.

   ```dart
   // Provide user details for fetching comments
   String uuid = "user_uuid_here";
   int page = 1;
   int pageSize = 20;

   // Build the request object
   GetUserCommentsRequest request = (GetUserCommentsRequestBuilder()
           ..uuid(uuid)
           ..page(page)
           ..pageSize(pageSize))
         .build();

    // Get the response from calling the function
    final GetUserCommentsResponse response = await lmFeedClient.getUserComments(request);

    // Process the response, as per requirement
    if(response.success){
        // your function to process fetched comments
        processFetchedComments(response.comments);
    }else{
        // your function to process error message
        processError(response.errorMessage);
    }
   ```

:::tip
Fetching user-created comments allows you to display all comments made by a user in the LikeMinds community.
:::

## Models

### GetUserCommentsRequest

List of parameters for the `GetUserCommentsRequest` class

| Variable  | Type     | Description                | Optional |
| --------- | -------- | -------------------------- | -------- |
| uuid      | `String` | UUID of the user           |          |
| page      | `int`    | Page number for pagination |          |
| pageSize  | `int`    | Number of items per page   |          |

### GetUserCommentsResponse

List of parameters for the `GetUserCommentsResponse` class

| Variable     | Type                                | Description                                 | Optional |
| ------------ | ----------------------------------- | ------------------------------------------- | -------- |
| success      | `bool`                              | API success status                          |          |
| errorMessage | `String`                            | Error message in case of failure            | &#10004; |
| comments     | `List<Comment>`                     | List of comments created by the user        | &#10004; |
| users        | `Map<String, User>`                 | Map of user details                         | &#10004; |
| posts        | `Map<String, Post>`                 | Map of post details                         | &#10004; |
| topics       | `Map<String, Topic>`                | Map of topic details                        | &#10004; |
| widgets      | `Map<String, WidgetModel>`          | Map of widget details                       | &#10004; |
| userTopics   | `Map<String, List<String>>`         | Map of user topics                          | &#10004; |



================================================
File: feed/Flutter/Data/Comment/like_comment.md
================================================
---
sidebar_position: 3
title: Like Comment
---

# Like Comment

The `likeComment()` function provides users with the ability to express their appreciation for a comment by liking it. This feature enhances user engagement and allows them to interact positively with the content shared by others.

## Steps to Like Comment

1. Create an instance of `ToggleLikeCommentRequest` with the required parameters: `postId` and `commentId`.
2. Call the `likeComment()` function using the instance of the `LMFeedClient` class, passing the request as a parameter.
3. Use the response as per your requirement.

```dart
// Create an instance of ToggleLikeCommentRequest
ToggleLikeCommentRequest request = (ToggleLikeCommentRequestBuilder()
            ..postId("post_id")
            ..commentId("comment_id"))
          .build();

// Get the response from calling the function
final ToggleLikeCommentResponse likeCommentResponse = await lmFeedClient.likeComment(likeCommentRequest);

// Process the response, as per requirement
if (likeCommentResponse.success) {
  // your function to handle successful liking of comment
  handleLikeCommentSuccess();
} else {
  // your function to handle error message
  handleLikeCommentError(likeCommentResponse.errorMessage);
}
```

## Models

### ToggleLikeCommentRequest

List of parameters for the `ToggleLikeCommentRequest` class

| Variable  | Type     | Description            |
| --------- | -------- | ---------------------- |
| postId    | `String` | Post ID of the comment |
| commentId | `String` | Comment ID to be liked |

### ToggleLikeCommentResponse

List of parameters for the `ToggleLikeCommentResponse` class

| Variable     | Type     | Description              | Optional |
| ------------ | -------- | ------------------------ | -------- |
| success      | `bool`   | API success status       |          |
| errorMessage | `String` | Error message in failure | &#10004; |



================================================
File: feed/Flutter/Data/Comment/reply_comment.md
================================================
---
sidebar_position: 4
title: Reply Comment
---

# Reply Comment

The `addCommentReply()` function facilitates the addition of a reply to a specific comment, extending the conversational aspect of the application. By using this function, developers can empower users to engage in threaded discussions, responding directly to comments within a post.

## Steps to Add Comment Reply

1. Create an instance of `AddCommentReplyRequest` with the required parameters: `text`, `postId`, and `commentId`.
2. Call the `addCommentReply()` function using the instance of the `LMFeedClient` class, passing the request as a parameter.
3. Leverage the response as per your application's requirements.

```dart
// Create an instance of AddCommentReplyRequest
AddCommentReplyRequest request = (AddCommentReplyRequestBuilder()
            ..commentId("comment_id")
            ..text("reply_text")
            ..postId("post_id"))
          .build();

// Get the response from calling the function
final AddCommentReplyResponse replyResponse = await lmFeedClient.addCommentReply(replyRequest);

// Process the response, as per requirement
if (replyResponse.success) {
  // your function to handle successful addition of comment reply
  handleAddCommentReplySuccess(replyResponse.reply);
} else {
  // your function to handle error message
  handleAddCommentReplyError(replyResponse.errorMessage);
}
```

## Models

### AddCommentReplyRequest

List of parameters for the `AddCommentReplyRequest` class

| Variable  | Type     | Description                         |
| --------- | -------- | ----------------------------------- |
| text      | `String` | Reply text                          |
| postId    | `String` | Post ID associated with the comment |
| commentId | `String` | Parent comment ID for the reply     |

### AddCommentReplyResponse

List of parameters for the `AddCommentReplyResponse` class

| Variable     | Type                                              | Description                               | Optional |
| ------------ | ------------------------------------------------- | ----------------------------------------- | -------- |
| success      | `bool`                                            | API success status                        |          |
| errorMessage | `String`                                          | Error message in failure                  | &#10004; |
| reply        | [`Comment`](../Models/comment.md)                 | Added comment reply entity                | &#10004; |
| users        | Map<`String`, [`User`](../Models/user.md)>        | Map of user UUIDs to User entities        | &#10004; |
| topics       | Map<String, [`Topic`](../Models/topic.md)>        | Map of topic IDs to Topic entities        |          |
| widgets      | Map<String, [`WidgetModel`](../Models/widget.md)> | Map of widget IDs to WidgetModel entities |          |
| userTopics   | Map<String, List<String\>>                        | Map of user topics (key: user ID)         | &#10004; |



================================================
File: feed/Flutter/Data/Community/_category_.json
================================================
{
  "label": "Community",
  "position": 8,
  "link": {
    "type": "generated-index",
    "description": "Documentation for community features in Feed"
  }
}



================================================
File: feed/Flutter/Data/Community/community_configurations.md
================================================
# Get Community Configurations

The `getCommunityConfigurations()` function is used to fetch configurations related to the community.

## Steps to Get Community Configurations

1. Call the `getCommunityConfigurations()` function using the instance of the `LMFeedClient` class.
2. Use the response as per your requirement.

   ```dart
    // Get the response from calling the function
    final GetCommunityConfigurationsResponse response = await lmFeedClient.getCommunityConfigurations();

    // Process the response, as per requirement
    if(response.success){
        // your function to handle successful retrieval of community configurations
        handleCommunityConfigurations(response.communityConfigurations);
    }else{
        // your function to handle error message
        handleCommunityConfigurationsError(response.errorMessage);
    }
   ```

:::tip
Fetching community configurations provides essential information about the community settings, enabling you to tailor the user experience accordingly.
:::

## Models

### GetCommunityConfigurationsResponse

List of parameters for the `GetCommunityConfigurationsResponse` class

| Variable                | Type                                                        | Description                            | Optional |
| ----------------------- | ----------------------------------------------------------- | -------------------------------------- | -------- |
| success                 | `bool`                                                      | API success status                     |          |
| errorMessage            | `String`                                                    | Error message in case of failure       | &#10004; |
| communityConfigurations | List<[`CommunityConfigurations`](../Models/community.md#communityconfigurations)> | List of community configuration models | &#10004; |



================================================
File: feed/Flutter/Data/Connection/_category_.json
================================================
{
    "label": "Connection",
    "position": 6,
    "link": {
      "type": "generated-index",
      "description": "Documentation for Connection features"
    }
  }
  



================================================
File: feed/Flutter/Data/Connection/connection_meta.md
================================================
---
sidebar_position: 1
title: Connection Meta
slug: /flutter/data/connection/connection_meta
---

# Connection Meta

The `connectionMeta()` function is used to retrieve user metadata, including follow status, follower count, and following count.

## Steps to Get Connection Meta

1. Build a `ConnectionMetaRequest` object using the `ConnectionMetaRequestBuilder` class.

2. Call the `connectionMeta()` function using the instance of the `LMFeedClient` class.

3. Use the response ([`LMResponse<ConnectionMetaResponse>`](../Models/lm_response.md)) as per your requirement.

   ```dart
    // Build the request object
   final ConnectionMetaRequest connectionMetaRequest =
      (ConnectionMetaRequestBuilder()..userUUID('user_id')).build();

   // Get the response from calling the function
   final LMResponse<ConnectionMetaResponse> connectionMetaResponse =
      await LMFeedCore.client.connectionMeta(connectionMetaRequest);

   // Process the response, as per requirement
   if (connectionMetaResponse.success) {
    // your function to handle successful retrieval of connection meta
    handleConnectionMetaSuccess(connectionMetaResponse);
   } else {
    // your function to handle error message
    handleConnectionMetaError(connectionMetaResponse.errorMessage);
   }
   ```

## Models
### ConnectionMetaRequest

List of parameters for the `ConnectionMetaRequest` class

| Variable   | Type   | Description       | Optional |
| ---------- | ------ | ----------------- | -------- |
| `userUUID` | String | User ID of a user |          |

### ConnectionMetaResponse

List of parameters for the `ConnectionMetaResponse` class

| Variable          | Type | Description                            | Optional |
| ----------------- | ---- | -------------------------------------- | -------- |
| `followStatus`    | bool | Indicates whether you follow the user  |          |
| `followersCount`  | int  | Number of the user's followers         |          |
| `followingsCount` | int  | Number of people the user is following |          |



================================================
File: feed/Flutter/Data/Connection/send_connection.md
================================================
---
sidebar_position: 2
title: Send Connection
slug: /flutter/data/connection/send_connection
---

# Send Connection

The `sendConnection()` function is used to send a connection request to a specified user.

## Steps to Send a Connection Request

1. Build a `SendConnectionRequest` object using the `SendConnectionRequestBuilder` class.

2. Call the `sendConnection()` function using an instance of the appropriate class or repository.

3. Use the response ([`LMResponse<void>`](../Models/lm_response.md)) as needed.

   ```dart
   // Create a SendConnectionRequest object using the builder
   final SendConnectionRequest sendConnectionRequest = SendConnectionRequestBuilder()
     ..receiverUUID('receiver_user_id')
     ..connectionType(ConnectionType.onWay) // on way connection type
     ..connectionRequestAutoAccepted(true)  // Optional: Set to true to auto-accept the request
     .build();

   // Send the connection request
   final LMResponse<void> sendConnectionResponse = await sendConnection(sendConnectionRequest);

   // Process the response, as needed
   if (response.success) {
     // Handle successful connection request
     handleSendConnectionSuccess(sendConnectionResponse);
   } else {
     // Handle error message
     handleSendConnectionError(sendConnectionResponse.errorMessage);
   }
   ```

## Models

### SendConnectionRequest

The `SendConnectionRequest` class represents a request to send a connection.

List of parameters for the `SendConnectionRequest` class:

| Variable                        | Type                                             | Description                                                                 | Optional |
| ------------------------------- | ------------------------------------------------ | --------------------------------------------------------------------------- | -------- |
| `receiverUUID`                  | String                                           | The UUID of the user to whom the connection request is sent.                |          |
| `connectionType`                | [ConnectionType](../models/connection_enum#connectiontype) | The type of connection being requested (e.g., oneWay, twoWay).              |          |
| `connectionRequestAutoAccepted` | bool?                                            | Optional flag indicating if the connection request should be auto-accepted. | &#10004; |



================================================
File: feed/Flutter/Data/Connection/update_connection.md
================================================
---
sidebar_position: 3
title: Update Connection
slug: /flutter/data/connection/update_connection
---

# Update Connection

The `updateConnection()` function is used to update a connection with a specified action.

## Steps to Update a Connection

1. Build an `UpdateConnectionRequest` object using the `UpdateConnectionRequestBuilder` class.

2. Call the `updateConnection()` function using an instance of the appropriate class or repository.

3. Use the response ([`LMResponse<void>`](../Models/lm_response.md)) as needed.

   ```dart
   // Create an UpdateConnectionRequest object using the builder
   final UpdateConnectionRequest updateConnectionRequest = UpdateConnectionRequestBuilder()
     ..receiverUUID('receiver_user_id')
     ..action(ConnectionAction.accept) // Example action
     ..connectionType(ConnectionType.oneWay) // Example connection type
     .build();

   // Update the connection
   final LMResponse<void> updateConnectionResponse = await updateConnection(updateConnectionRequest);

   // Process the response, as needed
   if (response.success) {
     // Handle successful connection update
     handleUpdateConnectionSuccess(updateConnectionResponse);
   } else {
     // Handle error message
     handleUpdateConnectionError(updateConnectionResponse.errorMessage);
   }
   ```

## Models

### UpdateConnectionRequest

The `UpdateConnectionRequest` class represents a request to update a connection.

List of parameters for the `UpdateConnectionRequest` class:

| Variable         | Type                                                           | Description                                                     | Optional |
| ---------------- | -------------------------------------------------------------- | --------------------------------------------------------------- | -------- |
| `receiverUUID`   | String                                                         | The UUID of the user to whom the connection update is applied.  |          |
| `action`         | [ConnectionAction](../models/connection_enum#connectionaction) | The action to perform on the connection (e.g., accept, reject). |          |
| `connectionType` | [ConnectionType](../models/connection_enum#connectiontype)     | The type of connection being updated (e.g., oneWay, twoWay).    |          |



================================================
File: feed/Flutter/Data/Feed/_category_.json
================================================
{
  "label": "Feed",
  "position": 2,
  "link": {
    "type": "generated-index",
    "description": "Documentation for Feed features"
  }
}



================================================
File: feed/Flutter/Data/Feed/feedroom.md
================================================
---
sidebar_position: 3
title: Fetch Feed in Feedroom
---

# Get Feed in Feedroom

The `getFeedOfFeedRoom()` function is used to retrieve the feed content inside a specific feedroom, including posts, users, topics, and widgets based on specified parameters.

## Steps to Get Feed in Feedroom

1. Build a `GetFeedOfFeedRoomRequest` object using the `GetFeedOfFeedRoomRequestBuilder` class.
2. Call the `getFeedOfFeedRoom()` function using the instance of the `LMFeedClient` class.
3. Use the response as per your requirement.

   ```dart
   // Build the request object
   final GetFeedOfFeedRoomRequest feedOfFeedRoomRequest = (GetFeedOfFeedRoomRequestBuilder()
       ..page(1)
       ..pageSize(10)
       ..feedroomId(123))
       .build();

   // Get the response from calling the function
   final GetFeedOfFeedRoomResponse feedOfFeedRoomResponse = await lmFeedClient.getFeedOfFeedRoom(feedOfFeedRoomRequest);

   // Process the response, as per requirement
   if (feedOfFeedRoomResponse.success) {
       // Handle successful retrieval
       handleFeedRoomSuccess(feedOfFeedRoomResponse);
   } else {
       // Handle error message
       handleFeedRoomError(feedOfFeedRoomResponse.errorMessage);
   }
   ```

:::tip
Fetching feed content in a feedroom allows users to view posts and related content based on specific topics or widgets.
:::

## Models

### GetFeedOfFeedRoomRequest

List of parameters for the `GetFeedOfFeedRoomRequest` class:

| Variable     | Type          | Description                         | Optional |
| ------------ | ------------- | ----------------------------------- | -------- |
| `page`       | int           | Page number for pagination          |          |
| `pageSize`   | int           | Number of items per page            |          |
| `feedroomId` | int           | ID of the feedroom to fetch details |          |
| `topicIds`   | List<String\> | List of topic IDs to filter feed    | &#10004; |

### GetFeedOfFeedRoomResponse

List of parameters for the `GetFeedOfFeedRoomResponse` class:

| Variable           | Type                                            | Description                                | Optional |
| ------------------ | ----------------------------------------------- | ------------------------------------------ | -------- |
| `success`          | bool                                            | API success status                         |          |
| `errorMessage`     | String                                          | Error message in case of failure           | &#10004; |
| `posts`            | List<[Post](../Models/post.md)>                 | List of post models                        | &#10004; |
| `users`            | Map<String, [User](../Models/user.md)>          | Map of user models (key: user ID)          |          |
| `topics`           | Map<String, [Topic](../Models/topic.md)>        | Map of topic models (key: topic ID)        |          |
| `widgets`          | Map<String, [WidgetModel](../Models/widget.md)> | Map of widget models (key: widget ID)      | &#10004; |
| `repostedPosts`    | Map<String, [Post](../Models/post.md)>          | Map of reposted post models (key: post ID) | &#10004; |
| `filteredComments` | Map<String, [Comment](../Models/comment.md)>    | Map of filtered comments                   | &#10004; |
| `userTopics`       | Map<String, List<String\>>                      | Map of user topics (key: user ID)          | &#10004; |



================================================
File: feed/Flutter/Data/Feed/feedroom_list.md
================================================
---
sidebar_position: 2
title: Fetch Feedroom
---

# Get Feed Room

The `getFeedRoom()` function is used to retrieve information about feed rooms, including details about a specific feed room, a list of feed rooms, participant count, and an error message in case of failure.

## Steps to Get Feed Room

1. Build a `GetFeedRoomRequest` object using the `GetFeedRoomRequestBuilder` class.
2. Call the `getFeedRoom()` function using the instance of the `LMFeedClient` class.
3. Use the response as per your requirement.

   ```dart
    // Build the request object
    final GetFeedRoomRequest getFeedRoomRequest = (GetFeedRoomRequestBuilder()
        ..page(1)
        ..feedroomId(123))
        .build();

    // Get the response from calling the function
    final GetFeedRoomResponse feedRoomResponse = await lmFeedClient.getFeedRoom(getFeedRoomRequest);

    // Process the response, as per requirement
    if(feedRoomResponse.success){
        // your function to handle successful retrieval of feed room
        handleFeedRoomSuccess(feedRoomResponse);
    }else{
        // your function to handle error message
        handleFeedRoomError(feedRoomResponse.errorMessage);
    }
   ```

:::tip
Fetching feed room information allows you to access details about a specific feed room, a list of feed rooms, participant count, and an error message in case of failure.
:::

## Models

### GetFeedRoomRequest

List of parameters for the `GetFeedRoomRequest` class

| Variable   | Type  | Description                         | Optional |
| ---------- | ----- | ----------------------------------- | -------- |
| page       | `int` | Page number for pagination          |          |
| feedroomId | `int` | ID of the feed room (if applicable) | &#10004; |

### GetFeedRoomResponse

List of parameters for the `GetFeedRoomResponse` class

| Variable         | Type                                      | Description                              | Optional |
| ---------------- | ----------------------------------------- | ---------------------------------------- | -------- |
| success          | `bool`                                    | API success status                       |          |
| chatroom         | [`FeedRoom`](../Models/feedroom.md)       | Details of the feed room (if applicable) | &#10004; |
| participantCount | `int`                                     | Number of participants in the feed room  |          |
| errorMessage     | `String`                                  | Error message in case of failure         | &#10004; |
| chatrooms        | List<[`FeedRoom`](../Models/feedroom.md)> | List of feed rooms (if applicable)       | &#10004; |



================================================
File: feed/Flutter/Data/Feed/personalised_feed.md
================================================
---
sidebar_position: 5
title: Get Personalised Feed
slug: /flutter/data/feed/personalised_feed
---

# Get Personalised Feed

The `getPersonalisedFeed()` function retrieves a personalized feed based on the provided request parameters.

## Steps to Get a Personalised Feed

1. Build a `GetPersonalisedFeedRequest` object using the `GetPersonalisedFeedRequestBuilder` class.

2. Call the `getPersonalisedFeed()` function using an instance of the appropriate class or repository.

3. Use the response ([`LMResponse<GetPersonalisedFeedResponse>`](../Models/lm_response.md)) as needed.

```dart
// Build the request object
final GetPersonalisedFeedRequest personalisedFeedRequest = (GetPersonalisedFeedRequestBuilder()
    ..page(1)
    ..pageSize(20)
    ..shouldRecompute(true)
    ..shouldReorder(true))
    .build();

// Get the response from calling the function
final LMResponse<GetPersonalisedFeedResponse> personalisedFeedResponse = await feedRepository.getPersonalisedFeed(personalisedFeedRequest);

// Process the response, as per requirement
if (personalisedFeedResponse.success) {
    // Your function to handle successful retrieval of the personalised feed
    handlePersonalisedFeedSuccess(personalisedFeedResponse);
} else {
    // Your function to handle error message
    handlePersonalisedFeedError(personalisedFeedResponse.errorMessage);
}
```

## Models

### GetPersonalisedFeedRequest

The `GetPersonalisedFeedRequest` class represents a request to fetch a personalized feed.

List of parameters for the `GetPersonalisedFeedRequest` class:

| Variable          | Type  | Description                                           | Optional |
| ----------------- | ----- | ----------------------------------------------------- | -------- |
| `page`            | int   | The page number of the feed to retrieve.              |          |
| `pageSize`        | int?  | The number of items per page.                         | &#10004; |
| `shouldRecompute` | bool? | Indicates whether the feed should be recomputed.      | &#10004; |
| `shouldReorder`   | bool? | Indicates whether the feed items should be reordered. | &#10004; |

### GetPersonalisedFeedResponse

The `GetPersonalisedFeedResponse` class represents the response of a personalized feed request.

List of parameters for the `GetPersonalisedFeedResponse` class:

| Variable           | Type                                            | Description                                        |
| ------------------ | ----------------------------------------------- | -------------------------------------------------- |
| `posts`            | List<[Post](../Models/post.md)>                 | A list of posts included in the personalized feed. |
| `users`            | Map<String, [User](../Models/user.md)>          | A map of user IDs to user objects.                 |
| `topics`           | Map<String, [Topic](../Models/topic.md)>        | A map of topic IDs to topic objects.               |
| `widgets`          | Map<String, [WidgetModel](../Models/widget.md)> | A map of widget IDs to widget models.              |
| `repostedPosts`    | Map<String, [Post](../Models/post.md)>          | A map of reposted post IDs to post objects.        |
| `filteredComments` | Map<String, [Comment](../Models/comment.md)>    | A map of comment IDs to comment objects.           |
| `userTopics`       | `Map<String, List<String>> `                    | A map of user IDs to lists of topic IDs.           |



================================================
File: feed/Flutter/Data/Feed/saved_post.md
================================================
---
sidebar_position: 5
title: Get Saved Posts
---

# Get Saved Posts

The `getSavedPost()` function is used to retrieve the posts saved by a specific user, including posts, users, topics, widgets, and reposted posts associated with the user.

## Steps to Get Saved Posts

1. Build a `GetSavedPostRequest` object using the `GetSavedPostRequestBuilder` class.
2. Call the `getSavedPost()` function using the instance of the `LMFeedClient` class.
3. Use the response as per your requirement.

   ```dart
    // Build the request object
    final GetSavedPostRequest request = (GetSavedPostRequestBuilder()
        ..page(1)
        ..pageSize(10)
        ..uuid("user_id_here"))
        .build();

    // Get the response from calling the function
    final GetSavedPostResponse response = await lmFeedClient.getSavedPost(request);

    // Process the response, as per requirement
    if(response.success){
        // your function to handle successful retrieval of saved posts
        handleSavedPosts(response);
    }else{
        // your function to handle error message
        handleSavedPostsError(response.errorMessage);
    }
   ```

:::tip
Fetching the saved posts allows you to provide users with personalized content, including posts, users, topics, and widgets based on their preferences and interactions.
:::

## Models

### GetSavedPostRequest

List of parameters for the `GetSavedPostRequest` class

| Variable | Type     | Description                   | Optional |
| -------- | -------- | ----------------------------- | -------- |
| uuid     | `String` | Unique identifier of the user |          |
| page     | `int`    | Page number for pagination    |          |
| pageSize | `int`    | Number of items per page      |          |

### GetSavedPostResponse

List of parameters for the `GetSavedPostResponse` class

| Variable         | Type                                              | Description                                | Optional |
| ---------------- | ------------------------------------------------- | ------------------------------------------ | -------- |
| success          | `bool`                                            | API success status                         |          |
| errorMessage     | `String`                                          | Error message in case of failure           | &#10004; |
| posts            | List<[`Post`](../Models/post.md)>                 | List of post models                        | &#10004; |
| repostedPosts    | Map<String, [`Post`](../Models/post.md)>          | Map of reposted post models (key: post ID) | &#10004; |
| topics           | Map<String, [`Topic`](../Models/topic.md)>        | Map of topic models (key: topic ID)        | &#10004; |
| widgets          | Map<String, [`WidgetModel`](../Models/widget.md)> | Map of widget models (key: widget ID)      | &#10004; |
| users            | Map<String, [`User`](../Models/user.md)>          | Map of user models (key: user ID)          | &#10004; |
| filteredComments | Map<String, [`Comment`](../Models/comment.md)>    | Map of filtered comments                   | &#10004; |
| userTopics       | Map<String, List<String\>>                        | Map of user topics (key: user ID)          | &#10004; |
| totalCount       | `int`                                             | Total count of saved posts                 | &#10004; |



================================================
File: feed/Flutter/Data/Feed/universal_feed.md
================================================
---
sidebar_position: 1
title: Fetch Universal feed
---

# Get Universal Feed

The `getUniversalFeed()` function is used to retrieve the universal feed, including posts, users, topics, widgets, and reposted posts based on specified parameters.

## Steps to Get Universal Feed

1. Build a `GetFeedRequest` object using the `GetFeedRequestBuilder` class.
2. Call the `getUniversalFeed()` function using the instance of the `LMFeedClient` class.
3. Use the response as per your requirement.

   ```dart
    // Build the request object
    final GetFeedRequest universalFeedRequest = (GetFeedRequestBuilder()
        ..page(1)
        ..pageSize(10)
        ..topicIds(["topic-id-1", "topic-id-2"]))
        .build();

    // Get the response from calling the function
    final GetFeedResponse universalFeedResponse = await lmFeedClient.getUniversalFeed(universalFeedRequest);

    // Process the response, as per requirement
    if(universalFeedResponse.success) {
        // your function to handle successful retrieval of universal feed
        handleUniversalFeedSuccess(universalFeedResponse);
    } else {
        // your function to handle error message
        handleUniversalFeedError(universalFeedResponse.errorMessage);
    }
   ```

:::tip
Fetching the universal feed allows you to provide users with a curated feed based on specified topics and widgets.
:::

## Models

### GetFeedRequest

List of parameters for the `GetFeedRequest` class

| Variable    | Type          | Description                | Optional |
| ----------- | ------------- | -------------------------- | -------- |
| `page`      | int           | Page number for pagination |          |
| `pageSize`  | int           | Number of items per page   |          |
| `topics`    | List<String\> | List of topic IDs          | &#10004; |
| `widgetIds` | List<String\> | List of widget IDs         | &#10004; |

### GetFeedResponse

List of parameters for the `GetFeedResponse` class

| Variable           | Type                                            | Description                                | Optional |
| ------------------ | ----------------------------------------------- | ------------------------------------------ | -------- |
| `success`          | bool                                            | API success status                         |          |
| `errorMessage`     | String                                          | Error message in case of failure           | &#10004; |
| `posts`            | List<[Post](../Models/post.md)>                 | List of post models                        | &#10004; |
| `users`            | Map<String, [User](../Models/user.md)>          | Map of user models (key: user ID)          | &#10004; |
| `topics`           | Map<String, [Topic](../Models/topic.md)>        | Map of topic models (key: topic ID)        | &#10004; |
| `widgets`          | Map<String, [WidgetModel](../Models/widget.md)> | Map of widget models (key: widget ID)      | &#10004; |
| `repostedPosts`    | Map<String, [Post](../Models/post.md)>          | Map of reposted post models (key: post ID) | &#10004; |
| `filteredComments` | Map<String, [Comment](../Models/comment.md)>    | Map of filtered comments                   | &#10004; |
| `userTopics`       | Map<String, List<String\>>                   | Map of user topics (key: user ID)          | &#10004; |



================================================
File: feed/Flutter/Data/Feed/user_created_post.md
================================================
---
sidebar_position: 4
title: Get User Created Posts
---

# Get User Created Posts

The `getUserCreatedPosts()` function is used to retrieve the posts created by a specific user, including posts, users, topics, widgets, and reposted posts associated with the user.

## Steps to Get User Created Posts

1. Build a `GetUserPostRequest` object using the `GetUserPostRequestBuilder` class.
2. Call the `getUserCreatedPosts()` function using the instance of the `LMFeedClient` class.
3. Use the response as per your requirement.

   ```dart
    // Build the request object
    final GetUserPostRequest request = (GetUserPostRequestBuilder()
        ..page(1)
        ..pageSize(10)
        ..uuid("user_id_here"))
        .build();

    // Get the response from calling the function
    final GetUserPostResponse response = await lmFeedClient.getUserCreatedPosts(request);

    // Process the response, as per requirement
    if(response.success){
        // your function to handle successful retrieval of user created posts
        handleUserCreatedPosts(response);
    }else{
        // your function to handle error message
        handleUserCreatedPostsError(response.errorMessage);
    }
   ```

:::tip
Fetching the user-created posts allows you to provide users with personalized content, including posts, users, topics, and widgets based on their preferences and interactions.
:::

## Models

### GetUserPostRequest

List of parameters for the `GetUserPostRequest` class

| Variable | Type     | Description                   | Optional |
| -------- | -------- | ----------------------------- | -------- |
| page     | `int`    | Page number for pagination    |          |
| pageSize | `int`    | Number of items per page      |          |
| uuid     | `String` | Unique identifier of the user |          |

### GetUserPostResponse

List of parameters for the `GetUserPostResponse` class

| Variable         | Type                                              | Description                                | Optional |
| ---------------- | ------------------------------------------------- | ------------------------------------------ | -------- |
| success          | `bool`                                            | API success status                         |          |
| errorMessage     | `String`                                          | Error message in case of failure           | &#10004; |
| posts            | List<[`Post`](../Models/post.md)>                 | List of post models                        | &#10004; |
| users            | Map<String, [`User`](../Models/user.md)>          | Map of user models (key: user ID)          | &#10004; |
| topics           | Map<String, [`Topic`](../Models/topic.md)>        | Map of topic models (key: topic ID)        | &#10004; |
| widgets          | Map<String, [`WidgetModel`](../Models/widget.md)> | Map of widget models (key: widget ID)      | &#10004; |
| repostedPosts    | Map<String, [`Post`](../Models/post.md)>          | Map of reposted post models (key: post ID) | &#10004; |
| filteredComments | Map<String, [`Comment`](../Models/comment.md)>    | Map of filtered comments                   | &#10004; |
| userTopics       | Map<String, List<String\>>                        | Map of user topics (key: user ID)          | &#10004; |



================================================
File: feed/Flutter/Data/Feedroom/_category_.json
================================================
{
    "label": "Feedroom",
    "position": 2,
    "link": {
      "type": "generated-index",
      "description": "Documentation for Feed features"
    }
  }
  


================================================
File: feed/Flutter/Data/Feedroom/explore_feedroom.md
================================================
# Get Explore FeedRooms

The `getExploreFeedRooms()` function is used to fetch the explore feed rooms based on the parameters provided in the `GetExploreFeedRoomRequest`, it return `LMResponse<GetExploreFeedRoomResponse>`.

## Steps to Get Explore Feed Rooms

1. Build a `GetExploreFeedRoomRequest` object using the `GetExploreFeedRoomRequestBuilder` class.

2. Call the `getExploreFeedRooms()` function using an instance of the `LMFeedClient` class.

3. Use the response ([`LMResponse<GetExploreFeedRoomResponse>`](../Models/lm_response.md)) as per your requirement.

```dart
// Build the request object
final GetExploreFeedRoomRequest exploreFeedRoomRequest = (GetExploreFeedRoomRequestBuilder()
    ..page(1)            // Replace with actual page number
    ..orderType(LMFeedRoomOrderType.newest)       // Replace with actual order type
    ..type(1))            // Replace with actual type
    .build();

// Get the response from calling the function
final LMResponse<GetExploreFeedRoomResponse> exploreFeedRoomResponse = await yourClient.getExploreFeedRooms(exploreFeedRoomRequest);

// Process the response, as per requirement
if (exploreFeedRoomResponse.success) {
    // Your function to handle successful retrieval of explore feed rooms
    handleExploreFeedRoomSuccess(exploreFeedRoomResponse);
} else {
    // Your function to handle error message
    handleExploreFeedRoomError(exploreFeedRoomResponse.errorMessage);
}
```

## Models

### GetExploreFeedRoomRequest

List of parameters for the `GetExploreFeedRoomRequest` class:

| Variable  | Type | Description                                                                                            | Optional |
| --------- | ---- | ------------------------------------------------------------------------------------------------------ | -------- |
| page      | int  | The page number for pagination                                                                         | No       |
| orderType | [LMFeedRoomOrderType](../Models/feedroom_order_type)  | The type of ordering for the rooms | No       |
| type      | int  | The type of rooms to retrieve (default: 1)                                                             | No       |

### GetExploreFeedRoomResponse

List of parameters for the `GetExploreFeedRoomResponse` class:

| Variable             | Type                                             | Description                           | Optional |
| -------------------- | ------------------------------------------------ | ------------------------------------- | -------- |
| feedrooms            | List<[`FeedRoom`](../Models/feedroom.md)>?       | List of feedrooms models              | Yes      |
| pinnedFeedroomsCount | int?                                             | Count of pinned feedrooms             | Yes      |
| widgets              | Map<String, [WidgetModel](../Models/widget.md)>? | Map of widget models (key: widget ID) | Yes      |
| postCounts           | Map<String, int>?                                | Map of post counts (key: post ID)     | Yes      |



================================================
File: feed/Flutter/Data/Feedroom/join_feedroom.md
================================================
# Join FeedRoom

The `joinFeedRoom()` function is used to follow or unfollow a feed room based on the parameters provided in the `JoinFeedRoomRequest`. It returns an `LMResponse<void>`.

## Steps to Join or Unfollow a Feed Room

1. Build a `JoinFeedRoomRequest` object using the `JoinFeedRoomRequestBuilder` class.

2. Call the `joinFeedRoom()` function using an instance of the `LMFeedClient` class.

3. Use the response `(LMResponse<void>)` as per your requirement.

```dart
// Build the request object
final JoinFeedRoomRequest joinFeedRoomRequest = (JoinFeedRoomRequestBuilder()
    ..feedRoomId("ENTER_FEEDROOM_ID")       // Replace with the actual feed room ID
    ..value(true))          // Replace with true to follow or false to unfollow
    .build();

// Get the response from calling the function
final LMResponse<void> joinFeedRoomResponse = await yourClient.joinFeedRoom(joinFeedRoomRequest);

// Process the response, as per requirement
if (joinFeedRoomResponse.success) {
    // Your function to handle successful join/unfollow action
    handleJoinFeedRoomSuccess();
} else {
    // Your function to handle error message
    handleJoinFeedRoomError(joinFeedRoomResponse.errorMessage);
}

```

## Models

### JoinFeedRoomRequest

The `JoinFeedRoomRequest` class represents the parameters required to follow or unfollow a feed room. Below are the details of the `JoinFeedRoomRequest` model:

| Variable   | Type | Description                                          | Optional |
| ---------- | ---- | ---------------------------------------------------- | -------- |
| feedRoomId | int  | The unique identifier of the feed room.              | No       |
| value      | bool | `true` to join the feed room, `false` to leave. | No       |



================================================
File: feed/Flutter/Data/Helper/_category_.json
================================================
{
  "label": "Helper",
  "position": 10,
  "link": {
    "type": "generated-index",
    "description": "Documentation for helper functions in Feed Data"
  }
}



================================================
File: feed/Flutter/Data/Helper/decode_url.md
================================================
---
sidebar_position: 2
title: Decode URL
---

# Decode URL

The `decodeUrl()` function is used to decode a URL and retrieve information about the content it represents, such as Open Graph (OG) tags. You can then use those tags to build Link Previews inside the feed.

## Steps to Decode URL

1. Build a `DecodeUrlRequest` object using the `DecodeUrlRequestBuilder` class.
2. Call the `decodeUrl()` function using the instance of the `LMFeedClient` class.
3. Use the response as per your requirement.

   ```dart
    // Provide the URL to be decoded
    String urlToDecode = "https://example.com"; // replace with the actual URL

    // Build the request object
    DecodeUrlRequest request = (DecodeUrlRequestBuilder()
      ..url(urlToDecode))
      .build();

    // Get the response from calling the function
    final DecodeUrlResponse response = await lmFeedClient.decodeUrl(request);

    // Process the response, as per requirement
    if(response.success){
        // your function to handle successful URL decoding
        handleDecodedUrl(response);
    }else{
        // your function to handle error message
        handleDecodedUrlError(response.errorMessage);
    }
   ```

:::tip
Decoding a URL can provide valuable information about the content it points to, including OG tags for better content presentation.
:::

## Models

### DecodeUrlRequest

List of parameters for the `DecodeUrlRequest` class

| Variable | Type     | Description       | Optional |
| -------- | -------- | ----------------- | -------- |
| url      | `String` | URL to be decoded |          |

### DecodeUrlResponse

List of parameters for the `DecodeUrlResponse` class

| Variable     | Type                | Description                             | Optional |
| ------------ | ------------------- | --------------------------------------- | -------- |
| success      | `bool`              | API success status                      |          |
| errorMessage | `String`            | Error message in case of failure        | &#10004; |
| ogTags       | [`OgTags`](../Models/og_tags) | Open Graph tags for the decoded content | &#10004; |



================================================
File: feed/Flutter/Data/Helper/route_profile.md
================================================
---
sidebar_position: 4
title: Route to Profile
---

# Route to User Profile

The `routeToProfile` function is used to navigate to a user's profile page.

## Steps to Route to User Profile

1. Call the `routeToProfile` function using the instance of the `LMFeedClient` class.

   ```dart
   // Specify the user ID to route to
   String userId = "user123";

   // Call the function
   lmFeedClient.routeToProfile(userId);
   ```

:::tip
Routing to a user's profile allows for easy navigation and viewing of user-specific content and information.
:::



================================================
File: feed/Flutter/Data/Helper/sdk_callback.md
================================================
---
sidebar_position: 3
title: SDK Callback
---

# LMSDKCallback

The LMSDKCallback class is a callback class that is used to listen to analytic events from the LikeMinds Feed package. It has 4 methods that you can override to listen to events from the package.

```dart
class YourCallback extends LMSDKCallback {
  @override
  void eventFiredCallback(String eventKey, Map<String, dynamic> propertiesMap) {
    // Implement eventFiredCallback
  }

  @override
  void loginRequiredCallback() {
    // Implement loginRequiredCallback
  }

  @override
  void logoutCallback() {
    // Implement logoutCallback
  }

  // This method is called when the user profile (tag, header) is clicked
  @override
  void profileRouteCallback({required String lmUserId}) {}
}
```



================================================
File: feed/Flutter/Data/Helper/tagging.md
================================================
---
sidebar_position: 1
title: Tagging
---

# Get Tagging List

The `getTaggingList()` function is used to fetch the tagging list, including group tags and user tags, based on the specified parameters.

## Steps to Fetch Tagging List

1. Build a `GetTaggingListRequest` object using the `GetTaggingListRequestBuilder` class.
2. Call the `getTaggingList()` function using the instance of the `LMFeedClient` class.
3. Use the response as per your requirement.

   ```dart
    // Provide parameters for fetching the tagging list
    int page = 1;
    int pageSize = 10;
    String searchQuery = "tag"; // replace with actual search query

    // Build the request object
    GetTaggingListRequest request = (GetTaggingListRequestBuilder()
      ..page(page)
      ..pageSize(pageSize)
      ..searchQuery(searchQuery))
      .build();

    // Get the response from calling the function
    final GetTaggingListResponse response = await lmFeedClient.getTaggingList(request);

    // Process the response, as per requirement
    if(response.success){
        // your function to handle successful tagging list retrieval
        handleTaggingList(response);
    }else{
        // your function to handle error message
        handleTaggingListError(response.errorMessage);
    }
   ```

:::tip
Fetching the tagging list provides information about group tags and user tags, which can be useful for organizing and categorizing content.
:::

## Models

### GetTaggingListRequest

List of parameters for the `GetTaggingListRequest` class

| Variable    | Type     | Description                         | Optional |
| ----------- | -------- | ----------------------------------- | -------- |
| feedroomId  | `int`    | ID of the feedroom for tagging list | &#10004; |
| page        | `int`    | Page number for pagination          | &#10004; |
| pageSize    | `int`    | Number of items per page            | &#10004; |
| searchQuery | `String` | Search query for filtering the list | &#10004; |

### GetTaggingListResponse

List of parameters for the `GetTaggingListResponse` class

| Variable     | Type                                            | Description                      | Optional |
| ------------ | ----------------------------------------------- | -------------------------------- | -------- |
| errorMessage | `String`                                        | Error message in case of failure | &#10004; |
| success      | `bool`                                          | API success status               |          |
| members      | List<[`UserTag`](../Models/user#usertag-model)> | List of user tags                | &#10004; |
| groupTags      | List<[`GroupTag`](../Models/group_tag/#grouptag)> | List of user tags                | &#10004; |



================================================
File: feed/Flutter/Data/Models/_category_.json
================================================
{
  "label": "Models",
  "position": 11,
  "link": {
    "type": "generated-index",
    "description": "Documentation for all models used in Feed"
  }
}



================================================
File: feed/Flutter/Data/Models/activity.md
================================================
---
sidebar_position: 4
title: Activity
---

# NotificationFeedItem Model

The `NotificationFeedItem` class represents an item in the notification feed, providing information about a specific action or activity. Below are the details of the `NotificationFeedItem` model:

## Properties

| Variable           | Type                                        | Description                                                                        | Optional |
| ------------------ | ------------------------------------------- | ---------------------------------------------------------------------------------- | -------- |
| id                 | `String`                                    | The unique identifier of the notification feed item.                               |          |
| action             | `int`                                       | The type of action or activity associated with the notification.                   |          |
| actionBy           | List<`String`>                              | List of unique identifiers of users who performed the action.                      |          |
| actionOn           | `String`                                    | The unique identifier of the entity on which the action was performed.             |          |
| activityEntityData | [`ActivityEntityData`](#activityentitydata) | Data related to the entity on which the action was performed.                      |          |
| activityText       | `String`                                    | The text or description of the activity.                                           |          |
| cta                | `String`                                    | Call-to-action associated with the notification.                                   | &#10004; |
| createdAt          | `int`                                       | The timestamp when the notification feed item was created.                         |          |
| entityId           | `String`                                    | The unique identifier of the entity associated with the notification.              |          |
| entityOwnerId      | `String`                                    | The unique identifier of the owner of the entity associated with the notification. | &#10004; |
| entityType         | `int`                                       | The type of entity associated with the notification.                               |          |
| isRead             | `bool`                                      | Indicates whether the notification has been read.                                  |          |
| updatedAt          | `int`                                       | The timestamp when the notification feed item was last updated.                    |          |

## ActivityEntityData

The `ActivityEntityData` class represents data related to an entity on which a specific action or activity was performed. This model provides details about the entity, including attachments, user interactions, and other relevant information. Below are the details of the `ActivityEntityData` model:

## Properties

| Variable     | Type                              | Description                                                              | Optional |
| ------------ | --------------------------------- | ------------------------------------------------------------------------ | -------- |
| id           | `String`                          | The unique identifier of the entity.                                     |          |
| attachments  | List<[`Attachment`](#attachment)> | List of attachments associated with the entity.                          | &#10004; |
| chatroomId   | `int`                             | The unique identifier of the associated chatroom, if applicable.         | &#10004; |
| communityId  | `int`                             | The unique identifier of the community to which the entity belongs.      |          |
| createdAt    | `int`                             | The timestamp when the entity was created.                               |          |
| deleteReason | `String`                          | The reason for deleting the entity, if applicable.                       | &#10004; |
| deleteBy     | `String`                          | The unique identifier of the user who deleted the entity, if applicable. | &#10004; |
| heading      | `String`                          | The heading or title associated with the entity.                         | &#10004; |
| level        | `int`                             | The level or depth of the entity in a hierarchical structure.            | &#10004; |
| postId       | `String`                          | The unique identifier of the associated post, if applicable.             | &#10004; |
| isDeleted    | `bool`                            | Indicates whether the entity has been deleted.                           | &#10004; |
| isPinned     | `bool`                            | Indicates whether the entity is pinned.                                  | &#10004; |
| isEdited     | `bool`                            | Indicates whether the entity has been edited.                            | &#10004; |
| text         | `String`                          | The text content of the entity.                                          |          |
| replies      | List<[`Comment`](#comment)>       | List of comments as replies to the entity.                               | &#10004; |
| updatedAt    | `int`                             | The timestamp when the entity was last updated.                          | &#10004; |
| userId       | `String`                          | The unique identifier of the user associated with the entity.            |          |

## UserActivityItem

The `UserActivityItem` class represents an item of user activity, capturing various details related to a specific action performed by a user. This model includes information about the action, the entity on which the action was performed, and other relevant data. Below are the details of the `UserActivityItem` model:

### Properties

| Variable           | Type                                                | Description                                                                               | Optional |
| ------------------ | --------------------------------------------------- | ----------------------------------------------------------------------------------------- | -------- |
| id                 | `String`                                            | The unique identifier of the user activity item.                                          |          |
| action             | `int`                                               | The code or identifier representing the type of action performed.                         |          |
| actionBy           | List<`String`>                                      | List of unique identifiers of users who performed the action.                             |          |
| actionOn           | `String`                                            | The type or category of the entity on which the action was performed.                     |          |
| activityEntityData | [`UserActivityEntityData`](#useractivityentitydata) | The data related to the entity on which the action was performed.                         |          |
| activityText       | `String`                                            | The text or description of the user activity.                                             |          |
| createdAt          | `int`                                               | The timestamp when the user activity item was created.                                    |          |
| cta                | `String`                                            | The call-to-action associated with the user activity item, if applicable.                 | &#10004; |
| entityId           | `String`                                            | The unique identifier of the entity on which the action was performed.                    |          |
| entityOwnerId      | `String`                                            | The unique identifier of the owner of the entity, if applicable.                          | &#10004; |
| entityType         | `int`                                               | The code or identifier representing the type of entity on which the action was performed. |          |
| isRead             | `bool`                                              | Indicates whether the user has read the activity item.                                    |          |
| updatedAt          | `int`                                               | The timestamp when the user activity item was last updated.                               |          |
| uuid               | `String`                                            | The universally unique identifier (UUID) associated with the user activity item.          |          |

## UserActivityEntityData

The `UserActivityEntityData` class represents data related to the entity on which a user activity item is performed. This model captures various attributes and interactions associated with the entity. Below are the details of the `UserActivityEntityData` model:

### Properties

| Variable         | Type                                                       | Description                                                          | Optional |
| ---------------- | ---------------------------------------------------------- | -------------------------------------------------------------------- | -------- |
| id               | `String`                                                   | The unique identifier of the entity.                                 |          |
| attachments      | List<[`Attachment`](./post.md#attachment)>                 | List of attachments associated with the entity.                      | &#10004; |
| commentsCount    | `int`                                                      | The count of comments associated with the entity.                    | &#10004; |
| communityId      | `int`                                                      | The unique identifier of the community to which the entity belongs.  |          |
| createdAt        | `int`                                                      | The timestamp when the entity was created.                           |          |
| heading          | `String`                                                   | The heading or title associated with the entity.                     | &#10004; |
| isEdited         | `bool`                                                     | Indicates whether the entity has been edited.                        | &#10004; |
| isLiked          | `bool`                                                     | Indicates whether the entity is liked by the user.                   | &#10004; |
| isPinned         | `bool`                                                     | Indicates whether the entity is pinned.                              | &#10004; |
| isSaved          | `bool`                                                     | Indicates whether the entity is saved by the user.                   | &#10004; |
| level            | `int`                                                      | The level or hierarchy of the entity.                                | &#10004; |
| likesCount       | `int`                                                      | The count of likes received by the entity.                           | &#10004; |
| menuItems        | List<[`PopupMenuItemModel`](./post.md#popupmenuitemmodel)> | List of menu items associated with the entity.                       | &#10004; |
| postData         | [`Post`](./post.md)                                        | Data related to a post associated with the entity.                   | &#10004; |
| postId           | `String`                                                   | The unique identifier of the associated post.                        | &#10004; |
| replies          | List<[`Comment`](./comment.md)>                            | List of comments as replies to the entity.                           | &#10004; |
| tempId           | `String`                                                   | Temporary identifier associated with the entity.                     | &#10004; |
| text             | `String`                                                   | The text content or description of the entity.                       |          |
| topics           | List<`String`>                                             | List of topics associated with the entity.                           | &#10004; |
| updatedAt        | `int`                                                      | The timestamp when the entity was last updated.                      | &#10004; |
| userId           | `String`                                                   | The unique identifier of the user associated with the entity.        | &#10004; |
| uuid             | `String`                                                   | The universally unique identifier (UUID) associated with the entity. | &#10004; |
| isRepost         | `bool`                                                     | Indicates whether the entity is a repost.                            | &#10004; |
| isRepostedByUser | `bool`                                                     | Indicates whether the entity is reposted by the user.                | &#10004; |
| repostCount      | `int`                                                      | The count of reposts received by the entity.                         | &#10004; |
| isDeleted        | `bool`                                                     | Indicates whether the entity is deleted.                             | &#10004; |



================================================
File: feed/Flutter/Data/Models/comment.md
================================================
---
sidebar_position: 2
title: Comment
---

# Comment Model

The `Comment` class represents a comment on a post, capturing various attributes and interactions. Below are the details of the `Comment` model:

## Properties

| Variable      | Type                       | Description                                                | Optional |
| ------------- | -------------------------- | ---------------------------------------------------------- | -------- |
| id            | `String`                   | The unique identifier of the comment.                      |          |
| isLiked       | `bool`                     | Indicates whether the comment is liked by the user.        |          |
| isEdited      | `bool`                     | Indicates whether the comment has been edited.             |          |
| userId        | `String`                   | The unique identifier of the user who created the comment. |          |
| text          | `String`                   | The text content of the comment.                           |          |
| level         | `int`                      | The level or depth of the comment in the hierarchy.        | &#10004; |
| likesCount    | `int`                      | The count of likes received by the comment.                |          |
| repliesCount  | `int`                      | The count of replies received by the comment.              |          |
| createdAt     | `int`                      | The timestamp when the comment was created.                |          |
| updatedAt     | `int`                      | The timestamp when the comment was last updated.           |          |
| replies       | List<[`Comment`](#)>       | List of comments as replies to the comment.                | &#10004; |
| menuItems     | List<`PopupMenuItemModel`> | List of menu items associated with the comment.            |          |
| parentComment | [`Comment`](#)             | The parent comment if the comment is a reply.              |          |
| uuid          | `String`                   | The universally unique identifier (UUID) of the comment.   |          |
| tempId        | `String`                   | Temporary identifier for the comment used during creation. | &#10004; |

## PopupMenuItemModel

This model is used to represent the menu items for a comment.

### Properties

| **VARIABLE** | **TYPE** | **DESCRIPTION**         | **OPTIONAL** |
| :----------- | :------- | :---------------------- | :----------: |
| **id**       | int      | ID of the menu item.    |              |
| **title**    | `String` | Title of the menu item. |              |



================================================
File: feed/Flutter/Data/Models/community.md
================================================
---
sidebar_position: 6
title: Community
---

# Community Model

The `Community` class represents a community within the platform, encapsulating various attributes and settings. Below are the details of the `Community` model:

## Properties

| Variable               | Type                                                        | Description                                                          | Optional |
| ---------------------- | ----------------------------------------------------------- | -------------------------------------------------------------------- | -------- |
| id                     | `int`                                                       | The unique identifier of the community.                              |          |
| name                   | `String`                                                    | The name of the community.                                           |          |
| imageUrl               | `String`                                                    | The URL of the community's image.                                    | &#10004; |
| purpose                | `String`                                                    | The purpose or goal of the community.                                | &#10004; |
| about                  | `String`                                                    | Detailed information about the community.                            | &#10004; |
| membersCount           | `int`                                                       | The count of members in the community.                               | &#10004; |
| isMember               | `bool`                                                      | Indicates whether the user is a member of the community.             | &#10004; |
| pendingMembersCount    | `int`                                                       | The count of pending member requests.                                | &#10004; |
| pendingChatRoomCount   | `int`                                                       | The count of pending chat room requests.                             | &#10004; |
| openReportsCount       | `int`                                                       | The count of open reports related to the community.                  | &#10004; |
| chatroomUnseen         | `int`                                                       | The count of unseen chat rooms in the community.                     | &#10004; |
| updatedAt              | `int`                                                       | The timestamp when the community was last updated.                   | &#10004; |
| isAdmin                | `bool`                                                      | Indicates whether the user is an administrator of the community.     | &#10004; |
| state                  | `int`                                                       | The state of the community.                                          | &#10004; |
| memberState            | `int`                                                       | The state of the member within the community.                        | &#10004; |
| createdBy              | `String`                                                    | The user who created the community.                                  | &#10004; |
| managedBy              | `String`                                                    | The user who manages the community.                                  | &#10004; |
| date                   | `String`                                                    | The date when the community was created.                             | &#10004; |
| type                   | `int`                                                       | The type of the community.                                           | &#10004; |
| subType                | `int`                                                       | The subtype of the community.                                        | &#10004; |
| clickState             | `int`                                                       | The click state of the community.                                    | &#10004; |
| chatroomCount          | `int`                                                       | The count of chat rooms in the community.                            | &#10004; |
| actions                | `List<dynamic>`                                             | List of actions associated with the community.                       | &#10004; |
| newChatRoomUsers       | List<[`User`](./user.md)>`                                  | List of new users added to chat rooms in the community.              | &#10004; |
| chatRoomUsers          | List<[`User`](./user.md)>                                   | List of users in chat rooms in the community.                        | &#10004; |
| memberRightStates      | List<`int`>                                                 | List of member right states in the community.                        | &#10004; |
| orderTime              | `int`                                                       | The timestamp used for ordering within the community.                | &#10004; |
| menu                   | List<`String`>                                              | List of menu items associated with the community.                    | &#10004; |
| leaveCommunity         | `dynamic`                                                   | Action to leave the community.                                       | &#10004; |
| isPaid                 | `bool`                                                      | Indicates whether the community is a paid community.                 | &#10004; |
| autoApproval           | `bool`                                                      | Indicates whether new members are auto-approved.                     | &#10004; |
| gracePeriod            | `int`                                                       | The grace period for community-related actions.                      | &#10004; |
| isDiscoverable         | `bool`                                                      | Indicates whether the community is discoverable.                     | &#10004; |
| websiteUrl             | `String`                                                    | The URL of the community's website.                                  | &#10004; |
| referralEnabled        | `bool`                                                      | Indicates whether the referral feature is enabled for the community. | &#10004; |
| communitySettingRights | List<[`CommunitySettingsRights`](#communitysettingsrights)> | List of community setting rights.                                    | &#10004; |
| likeMindsPlan          | `String`                                                    | The plan associated with the community.                              | &#10004; |
| isFreemiumCommunity    | `bool`                                                      | Indicates whether the community is a freemium community.             | &#10004; |

## CommunitySettingsRights

The `CommunitySettingsRights` class represents the settings and rights associated with a community. It encapsulates various attributes that define the configuration and state of specific settings. Below are the details of the `CommunitySettingsRights` model:

### Properties

| Variable   | Type     | Description                                  | Optional |
| ---------- | -------- | -------------------------------------------- | -------- |
| id         | `int`    | The unique identifier of the settings right. |          |
| state      | `int`    | The state of the settings right.             |          |
| title      | `String` | The title of the settings right.             |          |
| subtitle   | `String` | The subtitle or additional information.      | &#10004; |
| isLocked   | `bool`   | Indicates whether the settings are locked.   |          |
| isSelected | `bool`   | Indicates whether the settings are selected. |          |

## CommunityConfigurations

The `CommunityConfigurations` class represents the configurations associated with a community. It encapsulates various attributes that define the description, type, and values of specific configurations. Below are the details of the `CommunityConfigurations` model:

### Properties

| Variable    | Type                   | Description                                     | Optional |
| ----------- | ---------------------- | ----------------------------------------------- | -------- |
| description | `String`               | The description of the community configuration. | &#10004; |
| type        | `String`               | The type of the community configuration.        | &#10004; |
| value       | `Map<String, dynamic>` | The values associated with the configuration.   | &#10004; |



================================================
File: feed/Flutter/Data/Models/connection_enum.md
================================================
---
sidebar_position: 8
title: Connection Enums
slug: /flutter/data/models/connection_enum
---

# Connection Enums

This page describes the enums used in connection-related functionalities.

## ConnectionAction

The `ConnectionAction` enum defines the possible actions to perform on a connection.

| Value    | Description                    |
| -------- | ------------------------------ |
| `accept` | Accept the connection request. |
| `reject` | Reject the connection request. |

### Enum Details

- `accept`: Represents an action to accept the connection request.
- `reject`: Represents an action to reject the connection request.

Each enum value has a corresponding `value` property that holds the string representation of the action.

## ConnectionType

The `ConnectionType` enum defines the possible types of connections.

| Value    | Description                                                                   |
| -------- | ----------------------------------------------------------------------------- |
| `oneWay` | A one-way connection request, where only the sender initiates the connection. |
| `twoWay` | A two-way connection request, where both users agree to the connection.       |

### Enum Details

- `oneWay`: Represents a one-way connection request.
- `twoWay`: Represents a two-way connection request.

Each enum value has a corresponding `value` property that holds the string representation of the type.



================================================
File: feed/Flutter/Data/Models/feedroom.md
================================================
---
sidebar_position: 1
title: Feedroom
---

# FeedRoom Model

The `FeedRoom` class represents a feed room within a community, capturing various attributes and settings. This model is essential for managing and displaying information related to feed rooms. Below are the details of the `FeedRoom` model:

## Properties

| Variable                  | Type                        | Description                                                           | Optional |
| ------------------------- | --------------------------- | --------------------------------------------------------------------- | -------- |
| id                        | `int`                       | The unique identifier of the feed room.                               |          |
| title                     | `String`                    | The title or name of the feed room.                                   |          |
| header                    | `String`                    | The header or introductory text of the feed room.                     |          |
| date                      | `String`                    | The date of the feed room.                                            |          |
| dateEpoch                 | `int`                       | The epoch timestamp of the date.                                      | &#10004; |
| dateTime                  | `int`                       | The date and time in timestamp format.                                | &#10004; |
| duration                  | `int`                       | The duration of the feed room.                                        | &#10004; |
| cardCreationTime          | `String`                    | The creation time of the feed room card.                              | &#10004; |
| shareLink                 | `String`                    | The shareable link of the feed room.                                  | &#10004; |
| thirdPartyUniqueId        | `String`                    | The unique identifier from a third-party source.                      | &#10004; |
| state                     | `int`                       | The state of the feed room.                                           |          |
| isPrivate                 | `bool`                      | Indicates whether the feed room is private.                           | &#10004; |
| isSecret                  | `bool`                      | Indicates whether the feed room is secret.                            | &#10004; |
| isPending                 | `bool`                      | Indicates whether the feed room is pending.                           | &#10004; |
| isPrivateMember           | `bool`                      | Indicates whether the feed room is private for members.               | &#10004; |
| isTagged                  | `bool`                      | Indicates whether the feed room is tagged.                            | &#10004; |
| isGuest                   | `bool`                      | Indicates whether the feed room is for guests.                        | &#10004; |
| isPaid                    | `bool`                      | Indicates whether the feed room is paid.                              | &#10004; |
| isPinned                  | `bool`                      | Indicates whether the feed room is pinned.                            | &#10004; |
| isEdited                  | `bool`                      | Indicates whether the feed room has been edited.                      | &#10004; |
| hasBeenNamed              | `bool`                      | Indicates whether the feed room has been named.                       | &#10004; |
| autoFollowDone            | `bool`                      | Indicates whether auto-follow has been done for the room.             | &#10004; |
| includeMembersLater       | `bool`                      | Indicates whether members will be included later.                     | &#10004; |
| accessWithoutSubscription | `bool`                      | Indicates whether access is granted without subscription.             | &#10004; |
| externalSeen              | `bool`                      | Indicates external visibility.                                        | &#10004; |
| showFollowTelescope       | `bool`                      | Indicates whether to show follow telescope.                           | &#10004; |
| showFollowAutoTag         | `bool`                      | Indicates whether to show follow auto-tag.                            | &#10004; |
| memberCanMessage          | `bool`                      | Indicates whether members can message in the room.                    | &#10004; |
| muteStatus                | `bool`                      | Indicates the mute status of the feed room.                           | &#10004; |
| followStatus              | `bool`                      | Indicates the follow status of the feed room.                         | &#10004; |
| communityId               | `int`                       | The unique identifier of the community associated with the feed room. |          |
| communityName             | `String`                    | The name of the community associated with the feed room.              | &#10004; |
| chatroomImageUrl          | `String`                    | The URL of the image associated with the feed room chatroom.          | &#10004; |
| onlineLinkEnableBefore    | `int`                       | The timestamp for enabling online link before.                        | &#10004; |
| onlineLinkType            | `String`                    | The type of online link.                                              | &#10004; |
| participantsCount         | `int`                       | The count of participants in the feed room.                           |          |
| memberId                  | `int`                       | The unique identifier of the member associated with the feed room.    | &#10004; |
| access                    | `String`                    | The access level for the feed room.                                   | &#10004; |
| member                    | [`User`](../Models/user.md) | The member associated with the feed room.                             |          |
| cohorts                   | List<`dynamic`>             | List of cohorts associated with the feed room.                        | &#10004; |
| coHosts                   | List<`dynamic`>             | List of co-hosts associated with the feed room.                       | &#10004; |



================================================
File: feed/Flutter/Data/Models/feedroom_order_type.md
================================================
---
sidebar_position: 1
title: LMFeedRoomOrderType
---

# LMFeedRoomOrderType Enum

The `LMFeedRoomOrderType` enum represents the various types of order for feed rooms. Each value corresponds to a specific sorting criterion used to organize feed rooms. Below are the details of the `LMFeedRoomOrderType` enum:

## Enum Values

| Value              | Type  | Description                                               |
| ------------------ | ----- | --------------------------------------------------------- |
| `newest`           | `int` | Sort by the newest feed rooms (value: 0).                 |
| `recentlyActive`   | `int` | Sort by recently active feed rooms (value: 1).            |
| `mostMessages`     | `int` | Sort by feed rooms with the most messages (value: 2).     |
| `mostParticipants` | `int` | Sort by feed rooms with the most participants (value: 3). |


## Methods

### `LMFeedRoomOrderType.fromValue`

The fromValue factory constructor returns the LMFeedRoomOrderType enum constant that corresponds to the given integer value. If the provided value does not match any of the defined enum values, it throws an ArgumentError.

```dart
factory LMFeedRoomOrderType.fromValue(int value)
```



================================================
File: feed/Flutter/Data/Models/group_tag.md
================================================
---
sidebar_position: 12
title: Group Tag
---

# GroupTag

The `GroupTag` class represents a tag associated with a group. It contains information about the tag's description, image URL, name, route, and the tag itself. Below are the details of the `GroupTag` model:

## Properties

| Variable    | Type     | Description                             | Optional |
| ----------- | -------- | --------------------------------------- | -------- |
| description | `String` | A brief description of the tag.         | ✓        |
| imageUrl    | `String` | The URL of the image associated with the tag. | ✓        |
| name        | `String` | The name of the tag.                    | ✓        |
| route       | `String` | The route associated with the tag.      | ✓        |
| tag         | `String` | The tag itself.                         | ✓        |


================================================
File: feed/Flutter/Data/Models/like.md
================================================
---
sidebar_position: 3
title: Like
---

# Like Model

The `Like` class represents a like action on a post or comment. It captures essential information such as the unique identifier, creation and update timestamps, and the user who performed the like action. Below are the details of the `Like` model:

## Properties

| Variable  | Type     | Description                                                      | Optional |
| --------- | -------- | ---------------------------------------------------------------- | -------- |
| id        | `String` | The unique identifier of the like action.                        |          |
| createdAt | `int`    | The timestamp indicating when the like was created.              |          |
| updatedAt | `int`    | The timestamp indicating when the like was last updated.         |          |
| userId    | `String` | The unique identifier of the user who performed the like action. |          |



================================================
File: feed/Flutter/Data/Models/lm_response.md
================================================
# LMResponse

The `LMResponse<T>` class represents a standardized response format used across the API. It is a generic class where `T` denotes the type of data being returned. This class encapsulates the result of an API call, including success status, error messages, and the actual response data.

## Properties

| Variable      | Type      | Description                                                                 | Optional |
|---------------|-----------|-----------------------------------------------------------------------------|----------|
| success       | bool      | API success status. Indicates whether the API call was successful.          | No       |
| errorMessage  | String?   | Error message in case of failure. Provides details on what went wrong if the API call was not successful. | Yes      |
| data          | T?        | Response data of type `T`. Contains the data returned by the API call.       | Yes      |

## Generic Type Parameter

- **T**: The type of the data returned by the API call. This can be any class or data structure that represents the response data.



================================================
File: feed/Flutter/Data/Models/moderation.md
================================================
# Moderation

These are all the models related to moderation features in the SDK.

## DeleteReason

The `DeleteReason` class represents a reason for deletion, capturing the unique identifier and name of the deletion reason. Below are the details of the `DeleteReason` model:

### Properties

| Variable | Type     | Description                                       | Optional |
| -------- | -------- | ------------------------------------------------- | -------- |
| id       | `int`    | The unique identifier of the reason for deletion. |          |
| name     | `String` | The name or description of the deletion reason.   |          |



================================================
File: feed/Flutter/Data/Models/og_tags.md
================================================
---
sidebar_position: 13
title: OgTags
---

# OgTags

The `OgTags` class represents Open Graph tags. It contains information about the tag's description, image URL, title, and URL. Below are the details of the `OgTags` model:

## Properties

| Variable    | Type     | Description                             | Optional |
| ----------- | -------- | --------------------------------------- | -------- |
| description | `String` | The description of the content.         | ✓        |
| image       | `String` | The URL of the image associated with the content. | ✓        |
| title       | `String` | The title of the content.               | ✓        |
| url         | `String` | The URL of the content.                 | ✓        |


================================================
File: feed/Flutter/Data/Models/post.md
================================================
---
sidebar_position: 1
title: Post
---

# Post Model

The `Post` class represents a post within a community, capturing various attributes and user interactions. This model is fundamental for displaying and managing user-generated content. Below are the details of the `Post` model:

## Properties

| Variable         | Type                              | Description                                                    | Optional |
| ---------------- | --------------------------------- | -------------------------------------------------------------- | -------- |
| id               | `String`                          | The unique identifier of the post.                             |          |
| text             | `String`                          | The text content of the post.                                  |          |
| attachments      | List<[`Attachment`](#attachment)> | List of attachments associated with the post.                  | &#10004; |
| communityId      | `int`                             | The unique identifier of the community where the post is made. |          |
| isPinned         | `bool`                            | Indicates whether the post is pinned.                          |          |
| userId           | `String`                          | The unique identifier of the user who created the post.        |          |
| likeCount        | `int`                             | The count of likes received by the post.                       |          |
| commentCount     | `int`                             | The count of comments received by the post.                    |          |
| isSaved          | `bool`                            | Indicates whether the post is saved by the user.               |          |
| isLiked          | `bool`                            | Indicates whether the post is liked by the user.               |          |
| menuItems        | List<`PopupMenuItemModel`>        | List of menu items associated with the post.                   |          |
| createdAt        | `DateTime`                        | The date and time when the post was created.                   |          |
| updatedAt        | `DateTime`                        | The date and time when the post was last updated.              |          |
| isEdited         | `bool`                            | Indicates whether the post has been edited.                    |          |
| topics           | List<`String`>                    | List of topics associated with the post.                       | &#10004; |
| replies          | List<[`Comment`](./comment.md)    | List of comments as replies to the post.                       | &#10004; |
| isRepost         | `bool`                            | Indicates whether the post is a repost.                        |          |
| isRepostedByUser | `bool`                            | Indicates whether the post is reposted by the user.            |          |
| repostCount      | `int`                             | The count of reposts received by the post.                     |          |
| isDeleted        | `bool`                            | Indicates whether the post is deleted.                         | &#10004; |

## PopupMenuItemModel

The `PopupMenuItemModel` class represents a menu item within the context of a post. It provides information about the title and the unique identifier of the menu item. Below are the details of the `PopupMenuItemModel` model:

### Properties

| Variable | Type     | Description                             | Optional |
| -------- | -------- | --------------------------------------- | -------- |
| title    | `String` | The title of the menu item.             |          |
| id       | `int`    | The unique identifier of the menu item. |          |

## Attachment

The `Attachment` class represents an attachment associated with a post. It includes details about the attachment type and additional metadata. Below are the details of the `Attachment` model:

### Properties

| Variable       | Type                                | Description                                         | Optional |
| -------------- | ----------------------------------- | --------------------------------------------------- | -------- |
| attachmentType | `int`                               | The type of the attachment.                         |          |
| attachmentMeta | [`AttachmentMeta`](#attachmentmeta) | Additional metadata associated with the attachment. |          |

## AttachmentMeta

The `AttachmentMeta` class encapsulates additional metadata associated with an attachment. It provides information about the URL, format, size, duration, page count, Open Graph tags, dimensions, aspect ratio, and custom metadata. Below are the details of the `AttachmentMeta` model:

### Properties

| Variable         | Type                   | Description                                                         | Optional |
| ---------------- | ---------------------- | ------------------------------------------------------------------- | -------- |
| url              | `String`               | The URL of the attachment.                                          | &#10004; |
| path             | `String`               | The local path of the attachment.                                   | &#10004; |
| bytes            | `Uint8List`            | The byte data of the attachment.                                    | &#10004; |
| format           | `String`               | The format or file type of the attachment.                          | &#10004; |
| size             | `int`                  | The size of the attachment in bytes.                                | &#10004; |
| duration         | `int`                  | The duration of the attachment (applicable to videos).              | &#10004; |
| pageCount        | `int`                  | The number of pages in the attachment (applicable to documents).    | &#10004; |
| ogTags           | [`OgTags`](#ogtags)    | Open Graph tags associated with the attachment.                     | &#10004; |
| aspectRatio      | `double`               | The aspect ratio of the attachment.                                 | &#10004; |
| width            | `double`               | The width of the attachment.                                        | &#10004; |
| height           | `double`               | The height of the attachment.                                       | &#10004; |
| meta             | `Map<String, dynamic>` | Custom metadata associated with the attachment.                     | &#10004; |
| entityId         | `String`               | The unique identifier of the entity associated with the attachment. | &#10004; |
| pollQuestion     | `String`               | The poll question associated with the attachment.                   | &#10004; |
| expiryTime       | `int`                  | The expiry time of the attachment.                                  | &#10004; |
| pollOptions      | `List<String>`         | The poll options associated with the attachment.                    | &#10004; |
| multiSelectState | `String`               | The multi-select state of the poll.                                 | &#10004; |
| pollType         | `String`               | The type of the poll.                                               | &#10004; |
| multiSelectNo    | `int`                  | The number of multi-select options allowed.                         | &#10004; |
| isAnonymous      | `bool`                 | Indicates if the poll is anonymous.                                 | &#10004; |
| allowAddOption   | `bool`                 | Indicates if adding options to the poll is allowed.                 | &#10004; |
| thumbnailUrl     | `String`               | The thumbnail URL of the attachment.                                | &#10004; |
| name             | `String`               | Name of the attachment file.                                        | &#10004; |

## OgTags

The `OgTags` class represents Open Graph (OG) tags associated with content, providing metadata that can be used when shared on social media platforms. Below are the details of the `OgTags` model:

### Properties

| Variable    | Type     | Description                                       | Optional |
| ----------- | -------- | ------------------------------------------------- | -------- |
| description | `String` | The description associated with the OG tags.      | &#10004; |
| image       | `String` | The URL of the image associated with the OG tags. | &#10004; |
| title       | `String` | The title associated with the OG tags.            | &#10004; |
| url         | `String` | The URL associated with the OG tags.              | &#10004; |

## PopupMenuItemModel

This model is used to represent the menu items for a post.

### Properties

| **VARIABLE** | **TYPE** | **DESCRIPTION**         | **OPTIONAL** |
| :----------- | :------- | :---------------------- | :----------: |
| **id**       | int      | ID of the menu item.    |              |
| **title**    | `String` | Title of the menu item. |              |



================================================
File: feed/Flutter/Data/Models/topic.md
================================================
---
sidebar_position: 7
title: Topic
---

# Topic Model

The `Topic` class represents a topic within the community, capturing essential attributes such as the name, unique identifier, and its current enabled status. This model is crucial for managing and displaying community-specific topics. Below are the details of the `Topic` model:

## Properties

| Variable        | Type      | Description                                   | Optional |
| --------------- | --------- | --------------------------------------------- | -------- |
| name            | `String`  | The name of the community topic.              |          |
| id              | `String`  | The unique identifier of the community topic. |          |
| isEnabled       | `bool`    | Indicates whether the topic is enabled.       |          |
| priority        | `double?` | The priority of the topic.                    | Yes      |
| parentId        | `String?` | The unique identifier of the parent topic.    | Yes      |
| parentName      | `String?` | The name of the parent topic.                 | Yes      |
| level           | `int?`    | The level of the topic in the hierarchy.      | Yes      |
| isSearchable    | `bool?`   | Indicates if the topic is searchable.         | Yes      |
| widgetId        | `String?` | The unique identifier of the widget.          | Yes      |
| numberOfPosts   | `int?`    | The number of posts under this topic.         | Yes      |
| totalChildCount | `int?`    | The total number of child topics.             | Yes      |



================================================
File: feed/Flutter/Data/Models/user.md
================================================
---
sidebar_position: 5
title: User
---

# User Model

The `User` class represents a user within the community, capturing various attributes and details. Below are the details of the `User` model:

## Properties

| Variable         | Type                              | Description                                                       | Optional |
| ---------------- | --------------------------------- | ----------------------------------------------------------------- | -------- |
| id               | `int`                             | The unique identifier of the user.                                |          |
| name             | `String`                          | The name of the user.                                             |          |
| imageUrl         | `String`                          | The URL of the user's profile image.                              |          |
| isGuest          | `bool`                            | Indicates whether the user is a guest.                            |          |
| userUniqueId     | `String`                          | The unique identifier of the user.                                | &#10004; |
| organisationName | `String`                          | The name of the user's organization.                              | &#10004; |
| sdkClientInfo    | [`SDKClientInfo`](#sdkclientinfo) | Information about the SDK client associated with the user.        | &#10004; |
| updatedAt        | `int`                             | The timestamp when the user was last updated.                     | &#10004; |
| isOwner          | `bool`                            | Indicates whether the user is an owner.                           | &#10004; |
| customTitle      | `String`                          | Custom title assigned to the user.                                | &#10004; |
| memberSince      | `String`                          | The date when the user became a member of the community.          | &#10004; |
| route            | `String`                          | The route associated with the user.                               | &#10004; |
| state            | `int`                             | The state of the user.                                            | &#10004; |
| communityId      | `int`                             | The unique identifier of the community to which the user belongs. | &#10004; |
| createdAt        | `int`                             | The timestamp when the user was created.                          | &#10004; |
| isDeleted        | `bool`                            | Indicates whether the user is deleted.                            | &#10004; |

## UserTag Model

The `UserTag` class represents user tags, providing information about a user in a specific context. Below are the details of the `UserTag` model:

### Properties

| Variable      | Type                              | Description                                      | Optional |
| ------------- | --------------------------------- | ------------------------------------------------ | -------- |
| name          | `String`                          | The name associated with the user tag.           | &#10004; |
| imageUrl      | `String`                          | The URL of the image associated with the user.   | &#10004; |
| customTitle   | `String`                          | The custom title associated with the user tag.   | &#10004; |
| id            | `int`                             | The unique identifier of the user.               | &#10004; |
| isGuest       | `bool`                            | Indicates whether the user is a guest.           | &#10004; |
| userUniqueId  | `String`                          | The unique identifier of the user.               | &#10004; |
| sdkClientInfo | [`SDKClientInfo`](#sdkclientinfo) | SDK client information associated with the user. | &#10004; |

## SDKClientInfo

The SDKClientInfo class represents information about the SDK client, providing details about the version, build number, and user association. Below are the details of the SDKClientInfo model:

### Properties

| Variable     | Type     | Description                           | Optional |
| ------------ | -------- | ------------------------------------- | -------- |
| community    | `int`    | The community identifier for the SDK. |          |
| user         | `int`    | The user identifier for the SDK.      |          |
| userUniqueId | `String` | The unique identifier of the user.    | &#10004; |

## MemberRight

The `MemberRight` class represents the rights assigned to a community member, indicating their privileges and access levels. Below are the details of the `MemberRight` model:

### Properties

| Variable   | Type     | Description                                     | Optional |
| ---------- | -------- | ----------------------------------------------- | -------- |
| id         | `int`    | The unique identifier of the member right.      |          |
| isSelected | `bool`   | Indicates whether the member right is selected. |          |
| state      | `int`    | The state of the member right.                  |          |
| title      | `String` | The title or name of the member right.          |          |

## MemberAction

The `MemberAction` class represents an action that a member can take, capturing the title and route of the action. Below are the details of the `MemberAction` model:

### Properties

| Variable | Type     | Description                                          | Optional |
| -------- | -------- | ---------------------------------------------------- | -------- |
| title    | `String` | The title or name of the member action.              |          |
| route    | `String` | The route or path associated with the member action. |          |

## QuestionAnswer

The `QuestionAnswer` class represents a combination of a question and its corresponding answer. This model is useful for handling scenarios where both question and answer details are needed together. Below are the details of the `QuestionAnswer` model:

### Properties

| Variable | Type                    | Description                                    | Optional |
| -------- | ----------------------- | ---------------------------------------------- | -------- |
| answer   | [`Answer`](#answer)     | The answer associated with the question.       |          |
| question | [`Question`](#question) | The question for which the answer is provided. |          |

## Question

The `Question` class represents a question within a community or a system, capturing various attributes related to the question. Below are the details of the `Question` model:

### Properties

| Variable               | Type     | Description                                                           | Optional |
| ---------------------- | -------- | --------------------------------------------------------------------- | -------- |
| id                     | `String` | The unique identifier of the question.                                | &#10004; |
| questionTitle          | `String` | The title or text of the question.                                    |          |
| state                  | `int`    | The state of the question.                                            |          |
| value                  | `String` | The value associated with the question.                               | &#10004; |
| optional               | `bool`   | Indicates whether the question is optional.                           |          |
| helpText               | `String` | Additional help text or information for the question.                 | &#10004; |
| field                  | `bool`   | Indicates whether the question is a field.                            | &#10004; |
| isCompulsory           | `bool`   | Indicates whether the question is compulsory.                         | &#10004; |
| isHidden               | `bool`   | Indicates whether the question is hidden.                             | &#10004; |
| communityId            | `String` | The unique identifier of the community to which the question belongs. | &#10004; |
| memberId               | `String` | The unique identifier of the member associated with the question.     | &#10004; |
| directoryFields        | `bool`   | Indicates whether the question is part of directory fields.           | &#10004; |
| imageUrl               | `String` | The URL of the image associated with the question.                    | &#10004; |
| canAddOtherOptions     | `bool`   | Indicates whether additional options can be added to the question.    | &#10004; |
| questionChangeState    | `int`    | The change state of the question.                                     | &#10004; |
| tag                    | `String` | The tag associated with the question.                                 | &#10004; |
| rank                   | `int`    | The rank or order of the question.                                    | &#10004; |
| isAnswerEditable       | `bool`   | Indicates whether the answer to the question is editable.             |          |
| dropdownSelectionLimit | `int`    | The limit on the number of selections in a dropdown question.         | &#10004; |

## Answer

The `Answer` class represents an answer provided by a member in response to a specific question within a community or a system. Below are the details of the `Answer` model:

### Properties

| Variable    | Type     | Description                                                           | Optional |
| ----------- | -------- | --------------------------------------------------------------------- | -------- |
| answer      | `String` | The text or content of the answer.                                    |          |
| memberId    | `int`    | The unique identifier of the member providing the answer.             |          |
| questionId  | `int`    | The unique identifier of the associated question.                     |          |
| communityId | `int`    | The unique identifier of the community to which the question belongs. |          |
| imageUrl    | `String` | The URL of an image associated with the answer.                       | &#10004; |



================================================
File: feed/Flutter/Data/Models/vote.md
================================================
---
sidebar_position: 14
title: Vote
---

# Vote

The `Vote` class represents a vote. It contains information about the vote's ID and the list of users who voted. Below are the details of the `Vote` model:

## Properties

| Variable | Type         | Description                   | Optional |
| -------- | ------------ | ----------------------------- | -------- |
| id       | `String`     | The unique identifier of the vote. |          |
| users    | `List<String>` | The list of user IDs who voted. |          |


================================================
File: feed/Flutter/Data/Models/widget.md
================================================
---
sidebar_position: 8
title: Custom Widget
---

# WidgetModel

The `WidgetModel` class represents a widget entity, capturing various attributes and metadata associated with the widget. Below are the details of the `WidgetModel` model:

## Properties

| Variable         | Type                   | Description                                                             | Optional |
| ---------------- | ---------------------- | ----------------------------------------------------------------------- | -------- |
| id               | `String`               | The unique identifier of the widget.                                    |          |
| lmMeta           | Map<String, `dynamic`> | Additional metadata specific to the widget.                             | &#10004; |
| createdAt        | `int`                  | The timestamp when the widget was created.                              |          |
| metadata         | Map<String, `dynamic`> | Metadata associated with the widget.                                    |          |
| parentEntityId   | `String`               | The unique identifier of the parent entity to which the widget belongs. |          |
| parentEntityType | `String`               | The type or entity name of the parent entity.                           |          |
| updatedAt        | `int`                  | The timestamp of the last update to the widget.                         |          |



================================================
File: feed/Flutter/Data/Moderation/_category_.json
================================================
{
  "label": "Moderation",
  "position": 9,
  "link": {
    "type": "generated-index",
    "description": "Documentation for moderation features in Feed"
  }
}



================================================
File: feed/Flutter/Data/Moderation/get_report_tags.md
================================================
---
sidebar_position: 7
title: Get Report Tags
---

# Get Report Tags

The `getReportTags()` function is used to fetch the report tags. It takes a `GetDeleteReasonRequest` as input, which includes the `type` parameter. The function returns a `GetDeleteReasonResponse` as a Future.

## Steps to Get Report Tags

1. Create an instance of `GetDeleteReasonRequest` with the required parameter: `type`.
2. Call the `getReportTags()` function using the instance of the `LMFeedClient` class, passing the request as a parameter.
3. Use the response as per your requirement.

```dart
// Create an instance of GetDeleteReasonRequest
final GetDeleteReasonRequest getDeleteReasonRequest = (GetDeleteReasonRequestBuilder()
                                              ..type(1))
                                              .build();

// Get the response from calling the function
final GetDeleteReasonResponse getDeleteReasonResponse = await lmFeedClient.getReportTags(getDeleteReasonRequest);

// Process the response, as per requirement
if (getDeleteReasonResponse.success) {
  // your function to handle successful retrieval of report tags
  handleGetReportTagsSuccess(getDeleteReasonResponse.reportTags);
} else {
  // your function to handle error message
  handleGetReportTagsError(getDeleteReasonResponse.errorMessage);
}
```

## Models

### GetDeleteReasonRequest

List of parameters for the `GetDeleteReasonRequest` class

| Variable | Type  | Description              | Optional |
| -------- | ----- | ------------------------ | -------- |
| type     | `int` | Type identifier for tags |          |

### GetDeleteReasonResponse

List of parameters for the `GetDeleteReasonResponse` class

| Variable     | Type                                                            | Description                      | Optional |
| ------------ | --------------------------------------------------------------- | -------------------------------- | -------- |
| success      | `bool`                                                          | API success status               |          |
| errorMessage | `String`                                                        | Error message in case of failure | &#10004; |
| reportTags   | List<[`DeleteReason`](../Models/moderation.md#deletereason)> | List of report tags              | &#10004; |



================================================
File: feed/Flutter/Data/Moderation/report.md
================================================
---
sidebar_position: 1
title: Report Post
---

# Post Report

The `postReport()` function is used to report a post. It takes a `PostReportRequest` as input, including the `tagId`, `reason`, `entityId`, `entityCreatorId`, and `entityType`. The function returns a `PostReportResponse` as a Future.

## Steps to Report a Post

1. Create an instance of `PostReportRequest` using `PostReportRequestBuilder` class.
2. Call the `postReport()` function using the instance of the `LMFeedClient` class, passing the request as a parameter.
3. Use the response as per your requirement.

```dart
// Create an instance of PostReportRequest
final PostReportRequest postReportRequest = (PostReportRequestBuilder()
                        ..tagId(1)
                        ..reason('Inappropriate content')
                        ..entityId('post_id_to_report')
                        ..entityCreatorId(creator_id)
                        ..entityType(0)) // Assuming 0 represents a post type
                        .build();

// Get the response from calling the function
final PostReportResponse postReportResponse = await lmFeedClient.postReport(postReportRequest);

// Process the response, as per requirement
if (postReportResponse.success) {
  // your function to handle successful post reporting
  handlePostReportSuccess();
} else {
  // your function to handle error message
  handlePostReportError(postReportResponse.errorMessage);
}
```

## Models

### PostReportRequest

List of parameters for the `PostReportRequest` class

| Variable        | Type     | Description                      | Optional |
| --------------- | -------- | -------------------------------- | -------- |
| tagId           | `int`    | ID of the tag used for reporting |          |
| reason          | `String` | Reason for reporting the post    | &#10004; |
| entityId        | `String` | ID of the post to be reported    |          |
| entityCreatorId | `String` | ID of the creator of the post    |          |
| entityType      | `int`    | Type identifier for the post     |          |

### PostReportResponse

List of parameters for the `PostReportResponse` class

| Variable     | Type     | Description                      | Optional |
| ------------ | -------- | -------------------------------- | -------- |
| success      | `bool`   | API success status               |          |
| errorMessage | `String` | Error message in case of failure | &#10004; |



================================================
File: feed/Flutter/Data/Notification Feed/_category_.json
================================================
{
  "label": "Notification Feed",
  "position": 4,
  "link": {
    "type": "generated-index",
    "description": "Documentation for Notification Feed features"
  }
}



================================================
File: feed/Flutter/Data/Notification Feed/mark_read.md
================================================
---
sidebar_position: 3
title: Mark Read Notification
---

# Mark Read Notification

The `markReadNotification()` function is used to mark a notification as read. It takes a `MarkReadNotificationRequest` as input and returns a `MarkReadNotificationResponse` as a Future.

## Steps to Mark a Notification as Read

1. Build a `MarkReadNotificationRequest` object using the `MarkReadNotificationRequestBuilder` class.
2. Call the `markReadNotification()` function using the instance of the `LMFeedClient` class.
3. Use the response as per your requirement.

   ```dart
    // Build the request object
    MarkReadNotificationRequest markReadNotificationRequest = (MarkReadNotificationRequestBuilder()
        ..activityId("your_activity_id_here"))
        .build();

    // Get the response from calling the function
    final MarkReadNotificationResponse markReadNotificationResponse = await lmFeedClient.markReadNotification(markReadNotificationRequest);

    // Process the response, as per requirement
    if(markReadNotificationResponse.success){
        // your function to handle successful marking of notification as read
        handleMarkReadNotificationSuccess();
    }else{
        // your function to handle error message
        handleMarkReadNotificationError(markReadNotificationResponse.errorMessage);
    }
   ```

## Models

### MarkReadNotificationRequest

List of parameters for the `MarkReadNotificationRequest` class

| Variable   | Type     | Description                                     | Optional |
| ---------- | -------- | ----------------------------------------------- | -------- |
| activityId | `String` | ID of the notification activity to mark as read |          |

### MarkReadNotificationResponse

List of parameters for the `MarkReadNotificationResponse` class

| Variable     | Type     | Description                      | Optional |
| ------------ | -------- | -------------------------------- | -------- |
| success      | `bool`   | API success status               |          |
| errorMessage | `String` | Error message in case of failure | &#10004; |



================================================
File: feed/Flutter/Data/Notification Feed/notification_feed.md
================================================
---
sidebar_position: 1
title: Get Notification feed
---

# Get Notification Feed

The `getNotificationFeed()` function is used to retrieve the user activity feed, including details about notification items, associated users, topics, widgets, and an error message in case of failure.

## Steps to Get Notification Feed

1. Build a `GetNotificationFeedRequest` object using the `GetNotificationFeedRequestBuilder` class.
2. Call the `getNotificationFeed()` function using the instance of the `LMFeedClient` class.
3. Use the response as per your requirement.

   ```dart
    // Build the request object
    GetNotificationFeedRequest notificationFeedRequest = (GetNotificationFeedRequestBuilder()
        ..page(1)
        ..pageSize(10))
        .build();

    // Get the response from calling the function
    final GetNotificationFeedResponse notificationFeedResponse = await lmFeedClient.getNotificationFeed(notificationFeedRequest);

    // Process the response, as per requirement
    if(notificationFeedResponse.success){
        // your function to handle successful retrieval of notification feed
        handleNotificationFeed(notificationFeedResponse);
    }else{
        // your function to handle error message
        handleNotificationFeedError(notificationFeedResponse.errorMessage);
    }
   ```

## Models

### GetNotificationFeedRequest

List of parameters for the `GetNotificationFeedRequest` class

| Variable | Type  | Description                | Optional |
| -------- | ----- | -------------------------- | -------- |
| page     | `int` | Page number for pagination |          |
| pageSize | `int` | Number of items per page   |          |

### GetNotificationFeedResponse

List of parameters for the `GetNotificationFeedResponse` class

| Variable     | Type                                                  | Description                                  | Optional |
| ------------ | ----------------------------------------------------- | -------------------------------------------- | -------- |
| success      | `bool`                                                | API success status                           |          |
| errorMessage | `String`                                              | Error message in case of failure             | &#10004; |
| items        | List<[`NotificationFeedItem`](#notificationfeeditem)> | List of notification items                   | &#10004; |
| users        | Map<String, [`User`](../Models/user.md)>              | Map of users associated with notifications   | &#10004; |
| topics       | Map<String, [`Topic`](../Models/topic.md)>            | Map of topics associated with notifications  | &#10004; |
| widgets      | Map<String, [`WidgetModel`](../Models/widget.md)>     | Map of widgets associated with notifications | &#10004; |



================================================
File: feed/Flutter/Data/Notification Feed/unread_count.md
================================================
---
sidebar_position: 2
title: Unread Notification count
---

# Get Unread Notification Count

The `getUnreadNotificationCount()` function is used to fetch the count of unread notifications. It takes no parameters and returns a `GetUnreadNotificationCountResponse` as a Future.

## Steps to Get Unread Notification Count

1. Call the `getUnreadNotificationCount()` function using the instance of the `LMFeedClient` class.
2. Use the response as per your requirement.

   ```dart
    // Get the response from calling the function
    final GetUnreadNotificationCountResponse unreadNotificationCountResponse = await lmFeedClient.getUnreadNotificationCount();

    // Process the response, as per requirement
    if(unreadNotificationCountResponse.success){
        // your function to handle successful retrieval of unread notification count
        handleUnreadNotificationCountSuccess(unreadNotificationCountResponse.count);
    }else{
        // your function to handle error message
        handleUnreadNotificationCountError(unreadNotificationCountResponse.errorMessage);
    }
   ```

## Models

### GetUnreadNotificationCountResponse

List of parameters for the `GetUnreadNotificationCountResponse` class

| Variable     | Type     | Description                      | Optional |
| ------------ | -------- | -------------------------------- | -------- |
| success      | `bool`   | API success status               |          |
| errorMessage | `String` | Error message in case of failure | &#10004; |
| count        | `int`    | Count of unread notifications    | &#10004; |



================================================
File: feed/Flutter/Data/Notification Feed/user_activity.md
================================================
---
sidebar_position: 4
title: User Activity
---

# Get User Activity

The `getUserActivity()` function is used to fetch the user activity. It takes a `GetUserActivityRequest` as input, which includes the user's UUID, page number, and page size. The function returns a `GetUserActivityResponse` as a Future.

## Steps to Get User Activity

1. Create an instance of `GetUserActivityRequest` using the `GetUserActivityRequestBuilder` class.
2. Call the `getUserActivity()` function using the instance of the `LMFeedClient` class, passing the request as a parameter.
3. Use the response as per your requirement.

```dart
final GetUserActivityRequest userActivityRequest = (GetUserActivityRequestBuilder()
                            ..uuid('user_uuid')
                            ..page(1)
                            ..page(10))
                            .build();

// Get the response from calling the function
final GetUserActivityResponse userActivityResponse = await lmFeedClient.getUserActivity(userActivityRequest);

// Process the response, as per requirement
if(userActivityResponse.success){
    // your function to handle successful retrieval of user activity
    handleUserActivitySuccess();
}else{
    // your function to handle error message
    handleUserActivityError(userActivityResponse.errorMessage);
}
```

## Models

### GetUserActivityRequest

List of parameters for the `GetUserActivityRequest` class

| Variable | Type     | Description                | Optional |
| -------- | -------- | -------------------------- | -------- |
| uuid     | `String` | User's UUID                |          |
| page     | `int`    | Page number for pagination |          |
| pageSize | `int`    | Number of items per page   |          |

### GetUserActivityResponse

List of parameters for the `GetUserActivityResponse` class

| Variable      | Type                                                      | Description                               | Optional |
| ------------- | --------------------------------------------------------- | ----------------------------------------- | -------- |
| success       | `bool`                                                    | API success status                        |          |
| errorMessage  | `String`                                                  | Error message in case of failure          | &#10004; |
| activities    | List<[`UserActivityItem`](../Models/user.mdactivityitem)> | List of user activity items               |          |
| users         | Map<String, [`User`](../Models/user.md)>                  | Map of user UUIDs to User entities        |          |
| topics        | Map<String, [`Topic`](../Models/topic.md)>                | Map of topic IDs to Topic entities        |          |
| widgets       | Map<String, [`WidgetModel`](../Models/widget.md)>         | Map of widget IDs to WidgetModel entities |          |
| repostedPosts | Map<String, [`Post`](../Models/post.md)>                  | Map of reposted post IDs to Post entities |



================================================
File: feed/Flutter/Data/Post/_category_.json
================================================
{
  "label": "Post",
  "position": 2,
  "link": {
    "type": "generated-index",
    "description": "Documentation for Post feature in Feed"
  }
}



================================================
File: feed/Flutter/Data/Post/add_poll_option.md
================================================
---
sidebar_position: 11
title: Add Poll Option
---

# Add Poll Option

The `addPollOption()` function is used to add a new option to an existing poll. It takes an `AddPollOptionRequest` as input, which includes the `pollId` and the `text`. The function returns an `LMResponse<AddPollOptionResponse>` as a Future.

## Steps to Add a Poll Option

1. Create an instance of `AddPollOptionRequest` with the required parameters: `pollId` and `text`.
2. Call the `addPollOption()` function using the instance of the `LMFeedClient` class, passing the request as a parameter.
3. Use the response as per your requirement.

```dart
// Create an instance of AddPollOptionRequest
AddPollOptionRequest request = AddPollOptionRequest()
  ..pollId = "poll_id"
  ..text = "New Option";

// Get the response from calling the function
final LMResponse<AddPollOptionResponse> addPollOptionResponse = await lmFeedClient.addPollOption(request);

// Process the response, as per requirement
if (addPollOptionResponse.success) {
  // your function to handle successful addition of the poll option
  handleAddPollOptionSuccess(addPollOptionResponse.data.widget);
} else {
  // your function to handle error message
  handleAddPollOptionError(addPollOptionResponse.errorMessage);
}
```

## Models

### AddPollOptionRequest

List of parameters for the `AddPollOptionRequest` class

| Variable | Type     | Description                   | Optional |
| -------- | -------- | ----------------------------- | -------- |
| pollId   | `String` | Unique identifier of the poll |          |
| text     | `String` | Text of the new option        |          |

### AddPollOptionResponse

List of parameters for the `AddPollOptionResponse` class

| Variable | Type                                              | Description                               | Optional |
| -------- | ------------------------------------------------- | ----------------------------------------- | -------- |
| widget   | [`WidgetModel`](../Models/widget)                 | The added poll option entity              |          |



================================================
File: feed/Flutter/Data/Post/create_post.md
================================================
---
sidebar_position: 1
title: Create Post
---

# Create a Post

The `addPost()` function is used to create a new post in the LikeMinds feed. It allows users to share content, including text, attachments, topics, and more, facilitating content creation and user-generated interactions.

## Steps to Add a Post

1. Create an instance of [`AddPostRequest`](#addpostrequest) with the required parameters: `text` for post content, `attachments` for any attachments, `feedroomId` for the feed room ID, `topics` for related topics, and `isRepost` for repost status.
2. Call the `addPost()` function using the instance of the `LMFeedClient` class, passing the request as a parameter.
3. Use the [response](#addpostresponse) as per your requirement.

```dart
// Create an instance of AddPostRequest
final AddPostRequest request = (AddPostRequestBuilder()
            ..attachments([/* List of Attachment objects */])
            ..text('Test post from SDK')
            ..topicIds([/* List of Topic IDs */])
            ..isRepost(false))
          .build();

// Get the response from calling the function
final AddPostResponse addPostResponse = await lmFeedClient.addPost(addPostRequest);

// Process the response, as per requirement
if (addPostResponse.success) {
  // your function to handle successful post addition
  handleAddPostSuccess(addPostResponse.post, addPostResponse.user, addPostResponse.topics, addPostResponse.widgets, addPostResponse.repostedPosts);
} else {
  // your function to handle error message
  handleAddPostError(addPostResponse.errorMessage);
}
```

## Additional Features

### Tag a User

To tag a user, use the [getTaggingList()](../Helper/tagging.md) function to fetch the list of users that can be tagged, and use the format `<<[user.name]|route://user_profile/[user.sdkClientInfo.uuid]>>` to embed it inside the text of the post.

### Decode a URL

To decode a URL, use the [decodeUrl()](../Helper/decode_url.md) function to decode a URL and get its OGTags. Use those to add an attachment of type `4`.

### Create a repost

In AddPostRequest, add an attachment of type `8`, and in the `attachment_meta` add `entityId` which will be the post ID of the originial post. And finally, set the `isRepost` boolean as true.

### Add a Topic

Topics are keywords related to a post, they can be considered having the same use case as hashtags. You can add a topic to the post by sending the `topicIds` list in the `AddPostRequest` with the topics you have fetched using the [getTopics()](../Topic/topics.md).

## Models

### AddPostRequest

List of parameters for the `AddPostRequest` class

| Variable    | Type                                               | Description                 | Optional |
| ----------- | -------------------------------------------------- | --------------------------- | -------- |
| text        | `String`                                           | Post content                |          |
| feedroomId  | `int`                                              | Feed room ID                | &#10004; |
| attachments | List<[`Attachment`](../Models/post.md#attachment)> | List of attachments         | &#10004; |
| topicIds    | List<`String`>                                     | List of related topics' IDs | &#10004; |
| isRepost    | `bool`                                             | Repost status               | &#10004; |

### AddPostResponse

List of parameters for the `AddPostResponse` class

| Variable      | Type                                              | Description                               | Optional |
| ------------- | ------------------------------------------------- | ----------------------------------------- | -------- |
| success       | `bool`                                            | API success status                        |          |
| errorMessage  | `String`                                          | Error message in case of failure          | &#10004; |
| post          | [`Post`](../Models/post.md)                       | Added post details                        |          |
| user          | Map<String, [`User`](../Models/user.md)>          | Map of user UUIDs to User entities        |          |
| topics        | Map<String, [`Topic`](../Models/topic.md)>        | Map of topic IDs to Topic entities        |          |
| widgets       | Map<String, [`WidgetModel`](../Models/widget.md)> | Map of widget IDs to WidgetModel entities |          |
| repostedPosts | Map<String, [`Post`](../Models/post.md)>          | Map of reposted post IDs to Post entities |          |
| userTopics    | Map<String, List<String\>>                        | Map of user topics (key: user ID)         | &#10004; |



================================================
File: feed/Flutter/Data/Post/delete_pending_post.md
================================================
---
sidebar_position: 17
title: Delete Pending Post
---

# Delete Pending Post

The `deletePendingPost()` function is used to delete a pending post. It takes a `DeletePendingPostRequest` as input, which includes the `postId`, `deleteReason`, and `isRepost`. The function returns an `LMResponse<void>` response as a Future.

## Steps to Delete a Pending Post

1. Create an instance of `DeletePendingPostRequest` with the required parameters: `postId`, `deleteReason`, and `isRepost`.
2. Call the `deletePendingPost()` function using the instance of the `LMFeedClient` class, passing the request as a parameter.
3. Use the response as per your requirement.

```dart
// Create an instance of DeletePendingPostRequest
DeletePendingPostRequest request = DeletePendingPostRequest(
  postId: "post_id",
  deleteReason: "Reason for deletion",
  isRepost: false
);

// Get the response from calling the function
final LMResponse<void> deletePendingPostResponse = await lmFeedClient.deletePendingPost(request);

// Process the response, as per requirement
if (deletePendingPostResponse.success) {
  // your function to handle successful deletion of the pending post
  handleDeletePendingPostSuccess();
} else {
  // your function to handle error message
  handleDeletePendingPostError(deletePendingPostResponse.errorMessage);
}
```

## Models

### DeletePendingPostRequest

List of parameters for the `DeletePendingPostRequest` class

| Variable     | Type     | Description                   | Optional |
| ------------ | -------- | ----------------------------- | -------- |
| postId       | `String` | Unique identifier of the post |          |
| deleteReason | `String` | Reason for deletion           |          |
| isRepost     | `bool`   | Indicates if it is a repost   |          |



================================================
File: feed/Flutter/Data/Post/delete_post.md
================================================
---
sidebar_position: 4
title: Delete Post
---

# Delete Post

The `deletePost()` function enables users to delete the published post.

:::note
**Community Managers** can also delete other members' posts, but a reason is required.
:::

## Steps to Delete a Post

1. Create an instance of `DeletePostRequest` with the required parameters: `postId` for the post to delete, `deleteReason` for the reason behind deletion, and `isRepost` to indicate if it's a repost.
2. Call the `deletePost()` function using the instance of the `LMFeedClient` class, passing the request as a parameter.
3. Use the response as per your requirement.

```dart
// Create an instance of DeletePostRequest
DeletePostRequest request = (DeletePostRequestBuilder()
            ..deleteReason("reason_for_deletion")
            ..postId("post_id")
            ..isRepost(false)) // send true, if deleting a reposted post
          .build();

// Get the response from calling the function
final DeletePostResponse deletePostResponse = await lmFeedClient.deletePost(deletePostRequest);

// Process the response, as per requirement
if (deletePostResponse.success) {
  // your function to handle successful post deletion
  handleDeletePostSuccess();
} else {
  // your function to handle error message
  handleDeletePostError(deletePostResponse.errorMessage);
}
```

## Models

### DeletePostRequest

List of parameters for the `DeletePostRequest` class

| Variable     | Type     | Description                | Optional |
| ------------ | -------- | -------------------------- | -------- |
| postId       | `String` | ID of the post to delete   |          |
| deleteReason | `String` | Reason for post deletion   |          |
| isRepost     | `bool`   | Indicates if it's a repost | &#10004; |

:::note
`deleteReason` is only required when **Community Manager** deletes other members post.
:::

### DeletePostResponse

List of parameters for the `DeletePostResponse` class

| Variable     | Type     | Description                      | Optional |
| ------------ | -------- | -------------------------------- | -------- |
| success      | `bool`   | API success status               |          |
| errorMessage | `String` | Error message in case of failure | &#10004; |



================================================
File: feed/Flutter/Data/Post/edit_pending_post.md
================================================
---
sidebar_position: 16
title: Edit Pending Post
---

# Edit Pending Post

The `editPendingPost()` function is used to edit a pending post. It takes an `EditPendingPostRequest` as input, which includes the `postId` and other editable fields. The function returns an `LMResponse<EditPendingPostResponse>` as a Future.

## Steps to Edit a Pending Post

1. Create an instance of `EditPendingPostRequest` with the required parameters: `postId` and other editable fields.
2. Call the `editPendingPost()` function using the instance of the `LMFeedClient` class, passing the request as a parameter.
3. Use the response as per your requirement.

```dart
// Create an instance of EditPendingPostRequest
EditPendingPostRequest request = EditPendingPostRequest(
  postId: "post_id",
  postText: "Updated text",
  heading: "Updated heading",
  attachments: [Attachment()],
  topicIds: ["topic1", "topic2"],
  isRepost: true
);

// Get the response from calling the function
final LMResponse<EditPendingPostResponse> editPendingPostResponse = await lmFeedClient.editPendingPost(request);

// Process the response, as per requirement
if (editPendingPostResponse.success) {
  // your function to handle successful edit of the pending post
  handleEditPendingPostSuccess(editPendingPostResponse.data.post);
} else {
  // your function to handle error message
  handleEditPendingPostError(editPendingPostResponse.errorMessage);
}
```

## Models

### EditPendingPostRequest

List of parameters for the `EditPendingPostRequest` class

| Variable    | Type               | Description                   | Optional |
| ----------- | ------------------ | ----------------------------- | -------- |
| postId      | `String`           | Unique identifier of the post |          |
| postText    | `String`           | Updated text content          |          |
| heading     | `String`           | Updated heading               | &#10004; |
| attachments | `List<Attachment>` | List of attachments           | &#10004; |
| topicIds    | `List<String>`     | List of topic IDs             | &#10004; |
| isRepost    | `bool`             | Indicates if it is a repost   | &#10004; |

### EditPendingPostResponse

List of parameters for the `EditPendingPostResponse` class

| Variable      | Type                                         | Description                    | Optional |
| ------------- | -------------------------------------------- | ------------------------------ | -------- |
| post          | [`Post`](../Models/post)                     | The edited pending post entity |          |
| user          | Map<String, [User](../Models/user)>          | Map of users                   |          |
| topics        | Map<String, [Topic](../Models/topic)>        | Map of topics                  |          |
| widgets       | Map<String, [WidgetModel](../Models/widget)> | Map of widgets                 |          |
| repostedPosts | Map<String, [Post](../Models/post)>          | Map of reposted posts          |          |
| userTopics    | Map<String, List<String\>>                   | Map of user topics             | &#10004; |



================================================
File: feed/Flutter/Data/Post/edit_post.md
================================================
---
sidebar_position: 3
title: Edit Post
---

# Edit Post

The `editPost()` function enables users to modify and update the content of a previously published post, ensuring the accuracy and relevance of shared information.

:::note
**Community Managers** can edit other members posts as well.
:::

## Steps to Edit a Post

1. Create an instance of `EditPostRequest` with the required parameters: `postId`, `postText`, `attachments`, `topicIds`, and optional `isRepost`.
2. Call the `editPost()` function using the instance of the `LMFeedClient` class, passing the request as a parameter.
3. Use the response as per your requirement.

```dart
// Create an instance of EditPostRequest
EditPostRequest request = (EditPostRequestBuilder()
            ..postId("post_id")
            ..postText("post_text_editted")
            ..attachments([])
            ..topicIds([])
            ..isRepost(false)) // send true, if editing a reposted post
          .build();

// Get the response from calling the function
final EditPostResponse editPostResponse = await lmFeedClient.editPost(editPostRequest);

// Process the response, as per requirement
if (editPostResponse.success) {
  // your function to handle successful post editing
  handleEditPostSuccess();
} else {
  // your function to handle error message
  handleEditPostError(editPostResponse.errorMessage);
}
```

:::warning
You must send the `text` and `attachments` as it is if you don't want to update them, otherwise the `text` and `attachments` will be set to empty.
:::

## Additional Features

### Tag a User

To tag a user, use the [getTaggingList()](../Helper/tagging.md) function to fetch the list of users that can be tagged, and use the format `<<[user.name]|route://user_profile/[user.sdkClientInfo.uuid]>>` to embed it inside the text of the post.

### Decode a URL

To decode a URL, use the [decodeUrl()](../Helper/decode_url.md) function to decode a URL and get its OGTags. Use those to add an attachment of type `4`.

### Add a Topic

Topics are keywords related to a post, they can be considered having the same use case as hashtags. You can add a topic to the post by sending the `topicIds` list in the `AddPostRequest` with the topics you have fetched using the [getTopics()](../Topic/topics.md).

## Models

### EditPostRequest

List of parameters for the `EditPostRequest` class

| Variable    | Type                                               | Description                       | Optional |
| ----------- | -------------------------------------------------- | --------------------------------- | -------- |
| postId      | `String`                                           | ID of the post to be edited       |          |
| postText    | `String`                                           | New text for the post             |          |
| attachments | List<[`Attachment`](../Models/post.md#attachment)> | List of attachments for the post  |          |
| topicIds    | `List<String>`                                     | List of topic IDs for the post    |          |
| isRepost    | `bool`                                             | Indicates if the post is a repost | &#10004; |

### EditPostResponse

List of parameters for the `EditPostResponse` class

| Variable      | Type                                              | Description                               | Optional |
| ------------- | ------------------------------------------------- | ----------------------------------------- | -------- |
| success       | `bool`                                            | API success status                        |          |
| errorMessage  | `String`                                          | Error message in case of failure          | &#10004; |
| post          | [`Post`](../Models/post.md)                       | Edited post details                       |          |
| user          | Map<String, [`User`](../Models/user.md)>          | Map of user UUIDs to User entities        |          |
| topics        | Map<String, [`Topic`](../Models/topic.md)>        | Map of topic IDs to Topic entities        |          |
| widgets       | Map<String, [`WidgetModel`](../Models/widget.md)> | Map of widget IDs to WidgetModel entities |          |
| repostedPosts | Map<String, [`Post`](../Models/post.md)>          | Map of reposted post IDs to Post entities |          |
| userTopics    | Map<String, List<String\>>                        | Map of user topics (key: user ID)         | &#10004; |



================================================
File: feed/Flutter/Data/Post/fetch_post.md
================================================
---
sidebar_position: 2
title: Fetch Post
---

# Fetch Post

The `getPost()` function is used to fetch a post. It takes a `GetPostRequest` as input, which includes the `postId`, `page`, and `pageSize`. The function returns a `GetPostResponse` as a Future.

## Steps to Get a Post

1. Create an instance of `GetPostRequest` with the required parameters: `postId`, `page`, and `pageSize`.
2. Call the `getPost()` function using the instance of the `LMFeedClient` class, passing the request as a parameter.
3. Use the response as per your requirement.

```dart
// Create an instance of GetPostRequest
GetPostRequest request = (GetPostRequestBuilder()
            ..page(1)
            ..pageSize(10)
            ..postId("post_id"))
          .build();

// Get the response from calling the function
final GetPostResponse getPostResponse = await lmFeedClient.getPost(getPostRequest);

// Process the response, as per requirement
if (getPostResponse.success) {
  // your function to handle successful retrieval of the post
  handleGetPostSuccess(getPostResponse.post, getPostResponse.users, getPostResponse.topics, getPostResponse.widgets, getPostResponse.repostedPosts);
} else {
  // your function to handle error message
  handleGetPostError(getPostResponse.errorMessage);
}
```

## Models

### GetPostRequest

List of parameters for the `GetPostRequest` class

| Variable | Type     | Description                   | Optional |
| -------- | -------- | ----------------------------- | -------- |
| postId   | `String` | Unique identifier of the post |          |
| page     | `int`    | Page number for pagination    |          |
| pageSize | `int`    | Number of items per page      |          |

### GetPostResponse

List of parameters for the `GetPostResponse` class

| Variable      | Type                                              | Description                               | Optional |
| ------------- | ------------------------------------------------- | ----------------------------------------- | -------- |
| success       | `bool`                                            | API success status                        |          |
| errorMessage  | `String`                                          | Error message in case of failure          | &#10004; |
| post          | [`Post`](../Models/post.md)                       | The fetched post entity                   |          |
| users         | Map<String, [`User`](../Models/user.md)>          | Map of user UUIDs to User entities        |          |
| topics        | Map<String, [`Topic`](../Models/topic.md)>        | Map of topic IDs to Topic entities        |          |
| widgets       | Map<String, [`WidgetModel`](../Models/widget.md)> | Map of widget IDs to WidgetModel entities |          |
| repostedPosts | Map<String, [`Post`](../Models/post.md)>          | Map of post IDs to reposted Post entities |          |
| userTopics    | Map<String, List<String\>>                        | Map of user topics (key: user ID)         | &#10004; |



================================================
File: feed/Flutter/Data/Post/fetch_post_likes.md
================================================
---
sidebar_position: 8
title: Fetch Post Likes
---

# Fetch Post Likes

The `getPostLikes()` function allows users to retrieve information about the number of likes received by a specific post. By utilizing this functionality, developers can display the total number of likes on a post and provide users with social validation and engagement metrics.

## Steps to Get Post Likes

1. Create an instance of `GetPostLikesRequest` with the required parameters: `postId` for the post to retrieve likes, and optionally, `page` and `pageSize` for pagination.
2. Call the `getPostLikes()` function using the instance of the `LMFeedClient` class, passing the request as a parameter.
3. Use the response as per your requirement.

```dart
// Create an instance of GetPostLikesRequest
GetPostLikesRequest request = (GetPostLikesRequestBuilder()
            ..page(1)
            ..pageSize(10)
            ..postId("post_id"))
          .build();

// Get the response from calling the function
final GetPostLikesResponse postLikesResponse = await lmFeedClient.getPostLikes(postLikesRequest);

// Process the response, as per requirement
if (postLikesResponse.success) {
  // your function to handle successful retrieval of post likes
  handlePostLikesSuccess(postLikesResponse.likes, postLikesResponse.totalCount, postLikesResponse.users);
} else {
  // your function to handle error message
  handlePostLikesError(postLikesResponse.errorMessage);
}
```

## Models

### GetPostLikesRequest

List of parameters for the `GetPostLikesRequest` class

| Variable | Type     | Description                      | Optional |
| -------- | -------- | -------------------------------- | -------- |
| postId   | `String` | ID of the post to retrieve likes |          |
| page     | `int`    | Page number for pagination       | &#10004; |
| pageSize | `int`    | Number of items per page         | &#10004; |

### GetPostLikesResponse

List of parameters for the `GetPostLikesResponse` class

| Variable     | Type                                     | Description                        | Optional |
| ------------ | ---------------------------------------- | ---------------------------------- | -------- |
| success      | `bool`                                   | API success status                 |          |
| errorMessage | `String`                                 | Error message in case of failure   | &#10004; |
| likes        | List<[`Like`](../Models/like.md)>        | List of likes for the post         |          |
| totalCount   | `int`                                    | Total count of likes for the post  |          |
| users        | Map<String, [`User`](../Models/user.md)> | Map of user UUIDs to User entities |          |



================================================
File: feed/Flutter/Data/Post/get_all_pending_posts.md
================================================
---
sidebar_position: 15
title: Get All Pending Posts
---

# Get All Pending Posts

The `getAllPendingPosts()` function is used to fetch all pending posts. It takes a `GetAllPendingPostsRequest` as input, which includes pagination parameters and a `uuid`. The function returns an `LMResponse<GetAllPendingPostsResponse>` as a Future.

## Steps to Get All Pending Posts

1. Create an instance of `GetAllPendingPostsRequest` with the required parameters: `page`, `pageSize`, and `uuid`.
2. Call the `getAllPendingPosts()` function using the instance of the `LMFeedClient` class, passing the request as a parameter.
3. Use the response as per your requirement.

```dart
// Create an instance of GetAllPendingPostsRequest
GetAllPendingPostsRequest request = GetAllPendingPostsRequest(
  page: 1,
  pageSize: 10,
  uuid: "unique_identifier"
);

// Get the response from calling the function
final LMResponse<GetAllPendingPostsResponse> getAllPendingPostsResponse = await lmFeedClient.getAllPendingPosts(request);

// Process the response, as per requirement
if (getAllPendingPostsResponse.success) {
  // your function to handle successful retrieval of all pending posts
  handleGetAllPendingPostsSuccess(getAllPendingPostsResponse.data.posts);
} else {
  // your function to handle error message
  handleGetAllPendingPostsError(getAllPendingPostsResponse.errorMessage);
}
```

## Models

### GetAllPendingPostsRequest

List of parameters for the `GetAllPendingPostsRequest` class

| Variable | Type     | Description                | Optional |
| -------- | -------- | -------------------------- | -------- |
| page     | `int`    | Page number for pagination |          |
| pageSize | `int`    | Number of items per page   |          |
| uuid     | `String` | Unique identifier          |          |

### GetAllPendingPostsResponse

List of parameters for the `GetAllPendingPostsResponse` class

| Variable         | Type                                              | Description                               | Optional |
| ---------------- | ------------------------------------------------- | ----------------------------------------- | -------- |
| posts            | List<[Post](../Models/post)>                      | List of fetched pending post entities     |          |
| totalCount       | `int`                                             | Total count of pending posts              |          |
| users            | Map<String, [User](../Models/user)>               | Map of users                              |          |
| topics           | Map<String, [Topic](../Models/topic)>             | Map of topics                             |          |
| widgets          | Map<String, [WidgetModel](../Models/widget)>      | Map of widgets                            |          |
| repostedPosts    | Map<String, [Post](../Models/post)>               | Map of reposted posts                     |          |
| userTopics       | Map<String, List<String\>>                         | Map of user topics                        | &#10004; |
| filteredComments | Map<String, [Comment](../Models/comment)>         | Map of filtered comments                  | &#10004; |



================================================
File: feed/Flutter/Data/Post/get_pending_post.md
================================================
---
sidebar_position: 14
title: Get Pending Post
---

# Get Pending Post

The `getPendingPost()` function is used to fetch a pending post. It takes a `GetPendingPostRequest` as input, which includes the `postId`. The function returns an `LMResponse<GetPendingPostResponse>` as a Future.

## Steps to Get a Pending Post

1. Create an instance of `GetPendingPostRequest` with the required parameter: `postId`.
2. Call the `getPendingPost()` function using the instance of the `LMFeedClient` class, passing the request as a parameter.
3. Use the response as per your requirement.

```dart
// Create an instance of GetPendingPostRequest
GetPendingPostRequest request = GetPendingPostRequest(
  postId: "post_id"
);

// Get the response from calling the function
final LMResponse<GetPendingPostResponse> getPendingPostResponse = await lmFeedClient.getPendingPost(request);

// Process the response, as per requirement
if (getPendingPostResponse.success) {
  // your function to handle successful retrieval of the pending post
  handleGetPendingPostSuccess(getPendingPostResponse.data);
} else {
  // your function to handle error message
  handleGetPendingPostError(getPendingPostResponse.errorMessage);
}
```

## Models

### GetPendingPostRequest

List of parameters for the `GetPendingPostRequest` class

| Variable | Type     | Description                   | Optional |
| -------- | -------- | ----------------------------- | -------- |
| postId   | `String` | Unique identifier of the post |          |

### GetPendingPostResponse

List of parameters for the `GetPendingPostResponse` class

| Variable      | Type                                         | Description                     | Optional |
| ------------- | -------------------------------------------- | ------------------------------- | -------- |
| post          | [Post](../Models/post)                       | The fetched pending post entity | &#10004; |
| users         | Map<String, [User](../Models/user)>          | Map of users                    | &#10004; |
| topics        | Map<String, [Topic](../Models/topic)>        | Map of topics                   | &#10004; |
| widgets       | Map<String, [WidgetModel](../Models/widget)> | Map of widgets                  | &#10004; |
| repostedPosts | Map<String, [Post](../Models/post)>          | Map of reposted posts           | &#10004; |
| userTopics    | Map<String, List<String\>>                   | Map of user topics              | &#10004; |



================================================
File: feed/Flutter/Data/Post/get_poll_votes.md
================================================
---
sidebar_position: 12
title: Get Poll Votes
---

# Get Poll Votes

The `getPollVotes()` function is used to fetch the votes for a poll. It takes a `GetPollVotesRequest` as input, which includes the `pollId`, `votes`, `page`, and `pageSize`. The function returns an `LMResponse<GetPollVotesResponse>` as a Future.

## Steps to Get Poll Votes

1. Create an instance of `GetPollVotesRequest` with the required parameters: `pollId` and `votes`. Optionally, you can also include `page` and `pageSize`.
2. Call the `getPollVotes()` function using the instance of the `LMFeedClient` class, passing the request as a parameter.
3. Use the response as per your requirement.

```dart
// Create an instance of GetPollVotesRequest
GetPollVotesRequest request = GetPollVotesRequest()
  ..pollId = "poll_id"
  ..votes = ["vote1", "vote2"]
  ..page = 1
  ..pageSize = 10;

// Get the response from calling the function
final LMResponse<GetPollVotesResponse> getPollVotesResponse = await lmFeedClient.getPollVotes(request);

// Process the response, as per requirement
if (getPollVotesResponse.success) {
  // your function to handle successful retrieval of poll votes
  handleGetPollVotesSuccess(getPollVotesResponse.data.votes);
} else {
  // your function to handle error message
  handleGetPollVotesError(getPollVotesResponse.errorMessage);
}
```

## Models

### GetPollVotesRequest

List of parameters for the `GetPollVotesRequest` class

| Variable | Type           | Description                   | Optional |
| -------- | -------------- | ----------------------------- | -------- |
| pollId   | `String`       | Unique identifier of the poll |          |
| votes    | `List<String>` | List of votes                 |          |
| page     | `int`          | Page number for pagination    | &#10004; |
| pageSize | `int`          | Number of items per page      | &#10004; |

### GetPollVotesResponse

List of parameters for the `GetPollVotesResponse` class

| Variable   | Type                                              | Description        | Optional |
| ---------- | ------------------------------------------------- | ------------------ | -------- |
| topics     | Map<String, [Topic](../Models/topic)>           | Map of topics      |          |
| userTopics | Map<String, List<String\>>                       | Map of user topics | &#10004; |
| users      | Map<String, [User](../Models/user)>             | Map of users       |          |
| widgets    | Map<String, [WidgetModel](../Models/widget)>    | Map of widgets     |          |
| votes      | List<[Vote](../Models/vote)>                    | List of poll votes |          |



================================================
File: feed/Flutter/Data/Post/like_post.md
================================================
---
sidebar_position: 5
title: Like Post
---

# Like Post

The `likePost()` function enables users to express their appreciation for posts by other members. With just a simple tap, users can indicate their interest and support for specific content on their feed.

## Steps to Like a Post

1. Create an instance of `LikePostRequest` with the required parameter: `postId` for the post to be liked.
2. Call the `likePost()` function using the instance of the `LMFeedClient` class, passing the request as a parameter.
3. Use the response as per your requirement.

```dart
// Create an instance of LikePostRequest
ikePostRequest request = (LikePostRequestBuilder()
    ..postId("post_id"))
    .build();

// Get the response from calling the function
final LikePostResponse likePostResponse = await lmFeedClient.likePost(likePostRequest);

// Process the response, as per requirement
if (likePostResponse.success) {
  // your function to handle successful post liking
  handleLikePostSuccess(likePostResponse.likes);
} else {
  // your function to handle error message
  handleLikePostError(likePostResponse.errorMessage);
}
```

## Models

### LikePostRequest

List of parameters for the `LikePostRequest` class

| Variable | Type     | Description                | Optional |
| -------- | -------- | -------------------------- | -------- |
| postId   | `String` | ID of the post to be liked |          |

### LikePostResponse

List of parameters for the `LikePostResponse` class

| Variable     | Type     | Description                      | Optional |
| ------------ | -------- | -------------------------------- | -------- |
| success      | `bool`   | API success status               |          |
| errorMessage | `String` | Error message in case of failure | &#10004; |



================================================
File: feed/Flutter/Data/Post/pin_post.md
================================================
---
sidebar_position: 7
title: Pin Post
---

# Pin Post

The `pinPost()` function allows users to conveniently "pin" posts, granting them the ability to highlight and prioritize important content on their feed. This feature ensures that selected posts remain prominently displayed at the top of the feed for improved visibility and easy access.

## Steps to Pin a Post

1. Create an instance of `PinPostRequest` with the required parameter: `postId` for the post to be pinned.
2. Call the `pinPost()` function using the instance of the `LMFeedClient` class, passing the request as a parameter.
3. Use the response as per your requirement.

```dart
// Create an instance of PinPostRequest
PinPostRequest request = (PinPostRequestBuilder()
    ..postId("post_id"))
    .build();

// Get the response from calling the function
final PinPostResponse pinPostResponse = await lmFeedClient.pinPost(pinPostRequest);

// Process the response, as per requirement
if (pinPostResponse.success) {
  // your function to handle successful post pinning
  handlePinPostSuccess();
} else {
  // your function to handle error message
  handlePinPostError(pinPostResponse.errorMessage);
}
```

## Models

### PinPostRequest

List of parameters for the `PinPostRequest` class

| Variable | Type     | Description                 | Optional |
| -------- | -------- | --------------------------- | -------- |
| postId   | `String` | ID of the post to be pinned |          |

### PinPostResponse

List of parameters for the `PinPostResponse` class

| Variable     | Type     | Description                      | Optional |
| ------------ | -------- | -------------------------------- | -------- |
| success      | `bool`   | API success status               |          |
| errorMessage | `String` | Error message in case of failure | &#10004; |



================================================
File: feed/Flutter/Data/Post/post_seen.md
================================================
---
sidebar_position: 9
title: Post Seen
slug: /flutter/data/feed/post_seen
---

# Post Seen

The `postSeen()` function is used to mark a list of posts as seen.

## Steps to Post Seen

1. Build a `PostSeenRequest` object using the `PostSeenRequestBuilder` class.

2. Call the `postSeen()` function using an instance of the appropriate class or repository.

3. Use the response ([`LMResponse<void>`](../Models/lm_response.md)) as needed.

```dart
// Build the request object
final PostSeenRequest postSeenRequest = (PostSeenRequestBuilder()
..seenPostIDs(["post-id-1", "post-id-2", "post-id-3"]))
.build();

// Get the response from calling the function
final LMResponse<void> postSeenResponse = await feedRepository.postSeen(postSeenRequest);

// Process the response, as per requirement
if (postSeenResponse.success) {
// Your function to handle successful marking of posts as seen
handlePostSeenSuccess(postSeenResponse);
} else {
// Your function to handle error message
handlePostSeenError(postSeenResponse.errorMessage);
}
```

## Models

### PostSeenRequest

The `PostSeenRequest` class represents a request to mark posts as seen.

List of parameters for the `PostSeenRequest` class:

| Variable      | Type           | Description                             | Optional |
| ------------- | -------------- | --------------------------------------- | -------- |
| `seenPostIDs` | `List<String>` | A list of post IDs that have been seen. |          |



================================================
File: feed/Flutter/Data/Post/save_post.md
================================================
---
sidebar_position: 6
title: Save Post
---

The `savePost()` function allows users to save posts for layer. You can integrate it in your Flutter app to enhance user experience by allowing them to bookmark and revisit their favorite posts at their convenience. Enable seamless content curation, empowering users to organize and access valuable information with ease.

## Steps to Save a Post

1. Create an instance of `SavePostRequest` with the required parameter: `postId` for the post to be saved.
2. Call the `savePost()` function using the instance of the `LMFeedClient` class, passing the request as a parameter.
3. Use the response as per your requirement.

```dart
// Create an instance of SavePostRequest
SavePostRequest request = (SavePostRequestBuilder()
    ..postId("post_id"))
    .build();

// Get the response from calling the function
final SavePostResponse savePostResponse = await lmFeedClient.savePost(savePostRequest);

// Process the response, as per requirement
if (savePostResponse.success) {
  // your function to handle successful post saving
  handleSavePostSuccess();
} else {
  // your function to handle error message
  handleSavePostError(savePostResponse.errorMessage);
}
```

## Models

### SavePostRequest

List of parameters for the `SavePostRequest` class

| Variable | Type     | Description                | Optional |
| -------- | -------- | -------------------------- | -------- |
| postId   | `String` | ID of the post to be saved |          |

### SavePostResponse

List of parameters for the `SavePostResponse` class

| Variable     | Type     | Description                      | Optional |
| ------------ | -------- | -------------------------------- | -------- |
| success      | `bool`   | API success status               |          |
| errorMessage | `String` | Error message in case of failure | &#10004; |



================================================
File: feed/Flutter/Data/Post/search_post.md
================================================
---
sidebar_position: 10
title: Search Post
---

# Search a Post

The `searchPosts()` function is used to search posts based on various parameters such as page, page size, search term, and search type. It returns a `SearchPostResponse` object containing the results of the search.

## Steps to Search Posts

1. Create an instance of [`SearchPostRequest`](#searchpostrequest) with the required parameters: `search` for the search term, `page` for pagination, `pageSize` for the number of results per page, and `searchType` for the type of search.
2. Call the `searchPosts()` function using the instance of the `SearchPostRequest` class.
3. Use the [SearchPostResponse](#searchpostresponse) as per your requirement.

```dart
// Create an instance of SearchPostRequest
final SearchPostRequest request = (SearchPostRequestBuilder()
            ..page(1)
            ..pageSize(10)
            ..search('YOUR_SEARCH_TERM')
            ..searchType('SEARCH_TYPE'))
          .build();

// Get the response from calling the function
final SearchPostResponse searchPostResponse = await lmFeedClient.searchPosts(request);

// Process the response, as per requirement
if (searchPostResponse.success) {
  // your function to handle successful search
  handleSearchSuccess(searchPostResponse.posts);
} else {
  // your function to handle error message
  handleSearchError(searchPostResponse.errorMessage);
}
```

## Additional Features

### Search Types

The `searchType` parameter in the `SearchPostRequest` class allows you to specify the type of search to perform. The available search types are:

- `text`: Search based on the text content of the post.
- `heading`: Search based on the heading of the post.

## Models

### SearchPostRequest

| Variable   | Type      | Description                                | Optional |
| ---------- | --------- | ------------------------------------------ | -------- |
| page       | `int?`    | The page number to fetch.                  | &#10004; |
| pageSize   | `int?`    | The number of items per page.              | &#10004; |
| search     | `String?` | The search term used to query posts.       | &#10004; |
| searchType | `String?` | The type of search to perform (e.g., text) | &#10004; |

### SearchPostResponse

| Variable      | Type                                              | Description                               | Optional |
| ------------- | ------------------------------------------------- | ----------------------------------------- | -------- |
| success       | `bool`                                            | API success status                        |          |
| errorMessage  | `String?`                                         | Error message in case of failure          | &#10004; |
| posts         | List<[`Post`](../Models/post.md)>                 | List of posts returned by the search      | &#10004; |
| repostedPosts | Map<String, [`Post`](../Models/post.md)>          | Map of reposted post IDs to Post entities | &#10004; |
| topics        | Map<String, [`Topic`](../Models/topic.md)>        | Map of topic IDs to Topic entities        | &#10004; |
| users         | Map<String, [`User`](../Models/user.md)>          | Map of user UUIDs to User entities        | &#10004; |
| widgets       | Map<String, [`WidgetModel`](../Models/widget.md)> | Map of widget IDs to WidgetModel entities | &#10004; |
| userTopics    | `Map<String, List<String>>`                       | Map of user-specific topics               | &#10004; |



================================================
File: feed/Flutter/Data/Post/submit_poll_vote.md
================================================
---
sidebar_position: 13
title: Submit Poll Vote
---

# Submit Poll Vote

The `submitPollVote()` function is used to submit a vote for a poll. It takes a `SubmitPollVoteRequest` as input, which includes the `pollId` and the `votes`. The function returns an `LMResponse<void>` response as a Future.

## Steps to Submit a Poll Vote

1. Create an instance of `SubmitPollVoteRequest` with the required parameters: `pollId` and `votes`.
2. Call the `submitPollVote()` function using the instance of the `LMFeedClient` class, passing the request as a parameter.
3. Use the response as per your requirement.

```dart
// Create an instance of SubmitPollVoteRequest
SubmitPollVoteRequest request = SubmitPollVoteRequest(
  pollId: "poll_id",
  votes: ["vote1", "vote2"]
);

// Get the response from calling the function
final LMResponse<void> submitPollVoteResponse = await lmFeedClient.submitPollVote(request);

// Process the response, as per requirement
if (submitPollVoteResponse.success) {
  // your function to handle successful submission of the poll vote
  handleSubmitPollVoteSuccess();
} else {
  // your function to handle error message
  handleSubmitPollVoteError(submitPollVoteResponse.errorMessage);
}
```

## Models

### SubmitPollVoteRequest

List of parameters for the `SubmitPollVoteRequest` class

| Variable | Type           | Description                   | Optional |
| -------- | -------------- | ----------------------------- | -------- |
| pollId   | `String`       | Unique identifier of the poll |          |
| votes    | `List<String>` | List of votes                 |          |



================================================
File: feed/Flutter/Data/Topic/_category_.json
================================================
{
    "label": "Topics",
    "position": 5,
    "link": {
        "type": "generated-index",
        "description": "Documentation for Topic features"
    }
}



================================================
File: feed/Flutter/Data/Topic/get_user_topics.md
================================================
---
sidebar_position: 2
title: Get User Topics
---

# Get User Topics

The `getUserTopics()` function is used to fetch a list of topics which a user have followed.

## Steps to Get Topics

1. Build a `GetUserTopicsRequest` object using the `GetUserTopicsRequestBuilder` class.
2. Call the `getUserTopics()` function using the instance of the `LMFeedClient` class.
3. Use the response as per your requirement.

:::note
`isEnabled` key is nullable, if you want to fetch enabled topics send `isEnabled` = `true`. For disabled topics send `isEnabled` = `false` and to fetch all the existing topics send send `isEnabled` = `null`
:::

```dart
 // Build the request object
 GetUserTopicsRequest request = (GetUserTopicsRequestBuilder()
     ..uuids(["YOUR_USER_ID"])
     )
     .build();

 // Get the response from calling the function
 final GetUserTopicsResponse response = await lmFeedClient.getUserTopics(request);

 // Process the response, as per requirement
 if(response.success){
     // your function to handle successful retrieval of topics
     handleTopics(response.topics);
 }else{
     // your function to handle error message
     handleTopicsError(response.errorMessage);
 }
```

## Models

### GetUserTopicsRequest

List of parameters for the `GetTopicsRequest` class

| Variable | Type           | Description                                        | Optional |
| -------- | -------------- | -------------------------------------------------- | -------- |
| uuids    | `List<String>` | List of user id who's followed topic to be fetched |          |

### GetUserTopicsResponse

List of parameters for the `GetUserTopicsResponse` class

| Variable     | Type                                             | Description                                | Optional |
| ------------ | ------------------------------------------------ | ------------------------------------------ | -------- |
| success      | bool                                             | API success status                         |          |
| errorMessage | String?                                          | Error message in case of failure           | &#10004; |
| userTopics   | Map<String, List<String\>>?                      | Map of user IDs to their associated topics | &#10004; |
| topics       | Map<String, [Topic](../Models/topic.md)>?        | Map of topic IDs to Topic entities         | &#10004; |
| users        | Map<String, [User](../Models/user.md)>?          | Map of user IDs to User entities           | &#10004; |
| widgets      | Map<String, [WidgetModel](../Models/widget.md)>? | Map of widget IDs to WidgetModel entities  | &#10004; |



================================================
File: feed/Flutter/Data/Topic/topics.md
================================================
---
sidebar_position: 1
title: Get Topics
---

# Get Topics

The `getTopics()` function is used to fetch a list of topics, which can be utilized for creating posts or other interactions within the community.

## Steps to Get Topics

1. Build a `GetTopicsRequest` object using the `GetTopicsRequestBuilder` class.
2. Call the `getTopics()` function using the instance of the `LMFeedClient` class.
3. Use the response as per your requirement.

:::note
`isEnabled` key is nullable, if you want to fetch enabled topics send `isEnabled` = `true`. For disabled topics send `isEnabled` = `false` and to fetch all the existing topics send send `isEnabled` = `null`
:::

```dart
 // Build the request object
 GetTopicsRequest request = (GetTopicsRequestBuilder()
     ..isEnabled(true)
     ..page(1)
     ..pageSize(10)
     ..search("example")
     ..searchType("type")
     )
     .build();

 // Get the response from calling the function
 final GetTopicsResponse response = await lmFeedClient.getTopics(request);

 // Process the response, as per requirement
 if(response.success){
     // your function to handle successful retrieval of topics
     handleTopics(response.topics);
 }else{
     // your function to handle error message
     handleTopicsError(response.errorMessage);
 }
```

:::tip
Fetching topics is essential for creating posts and engaging with the community. You can use the retrieved topics to provide users with relevant content and discussions.
:::

## Models

### GetTopicsRequest

List of parameters for the `GetTopicsRequest` class

| Variable   | Type           | Description                                                    | Optional |
| ---------- | -------------- | -------------------------------------------------------------- | -------- |
| isEnabled  | `bool`         | Flag indicating whether topics are enabled                     | &#10004; |
| page       | `int`          | Page number for pagination                                     |          |
| pageSize   | `int`          | Number of items per page                                       |          |
| search     | `String`       | Search query for filtering topics                              | &#10004; |
| searchType | `String`       | Type of search query                                           | &#10004; |
| parentIds  | `List<String>` | A list of parent topic IDs that this topic is associated with. | &#10004; |
| orderBy    | `List<String>` | Specifies the order in which topics should be sorted.          | &#10004; |

### GetTopicsResponse

List of parameters for the `GetTopicsResponse` class

| Variable     | Type                                              | Description                                     | Optional |
| ------------ | ------------------------------------------------- | ----------------------------------------------- | -------- |
| success      | `bool`                                            | API success status                              |          |
| errorMessage | `String`                                          | Error message in case of failure                | &#10004; |
| topics       | List<[`Topic`](../Models/topic.md)>               | List of topic models                            | &#10004; |
| widgets      | Map<String, [`WidgetModel`](../Models/widget.md)> | Map of widget IDs to WidgetModel entities       |
| childTopics  | Map<String,List< [`Topic`](../Models/topic.md)>>  | Map of parent topic IDs to List of child topics |



================================================
File: feed/Flutter/Data/Topic/update_user_topics.md
================================================
---
sidebar_position: 3
title: Update User Topics
---

# Update User Topics

The `updateUserTopics()` function is used to update the topics associated with a specific user.

## Steps to Update User Topics

1. Build an `UpdateUserTopicsRequest` object using the `UpdateUserTopicsRequestBuilder` class.
2. Call the `updateUserTopics()` function using an instance of the `LMFeedClient` class.
3. Use the response to confirm if the topics were updated successfully.

:::note
The `topicsId` field in the request is a `Map<String, bool>`. Set the value as `true` to add the topic and `false` to remove the topic.
:::

```dart
// Build the request object
UpdateUserTopicsRequest request = (UpdateUserTopicsRequestBuilder()
  ..topicsId({"topic_id_1": true, "topic_id_2": false})
  ..uuid("YOUR_USER_ID"))
  .build();

// Get the response from calling the function
final UpdateUserTopicsResponse response =
    await lmFeedClient.updateUserTopics(request);

// Process the response, as per your requirement
if (response.success) {
  // Handle success scenario
  handleUpdateSuccess();
} else {
  // Handle error scenario
  handleUpdateError(response.errorMessage);
}
```

## Models

### UpdateUserTopicsRequest

List of parameters for the `UpdateUserTopicsRequest` class

| Variable | Type                | Description                                                | Optional |
| -------- | ------------------- | ---------------------------------------------------------- | -------- |
| topicsId | `Map<String, bool>` | Map of topic IDs with boolean values indicating add/remove |          |
| uuid     | `String`            | User ID whose topics are to be updated                     |          |

### UpdateUserTopicsResponse

List of parameters for the `UpdateUserTopicsResponse` class

| Variable     | Type      | Description                      | Optional |
| ------------ | --------- | -------------------------------- | -------- |
| success      | `bool`    | API success status               |          |
| errorMessage | `String?` | Error message in case of failure | &#10004; |

This documentation ensures that you understand how to correctly update user topics using the `updateUserTopics` function, providing a clear guide on how to structure requests and handle responses.



================================================
File: feed/Flutter/Data/User/_category_.json
================================================
{
    "label": "User",
    "position": 7,
    "link": {
        "type": "generated-index",
        "description": "Documentation for User features"
    }
}



================================================
File: feed/Flutter/Data/User/edit_profile.md
================================================
---
sidebar_position: 3
title: Edit Profile
---

# Edit User Profile

To modify the user profile information in the LikeMinds Feed, use the `editProfile()` function.

## Steps to Edit User Profile

1. Build an `EditProfileRequest` object using the `EditProfileRequestBuilder` class.
2. Call the `editProfile()` function using the instance of the `LMFeedClient` class.
3. Use the response as per your requirement.

   ```dart
    // Provide user details for editing the profile
    String userUniqueId = "user_unique_id_here";
    String? name = "new_user_name";
    String? imageUrl = "new_user_profile_image_url";

    // Build the request object
    EditProfileRequest request = (EditProfileRequestBuilder()
                                  ..userUniqueId(userUniqueId)
                                  ..name(name)
                                  ..imageUrl(imageUrl))
                                  .build();

    // Get the response from calling the function
    final EditProfileResponse response = await lmFeedClient.editProfile(request);

    // Process the response, as per requirement
    if(response.success){
        // your function to handle successful profile edit
        handleSuccessfulEdit(response);
    } else {
        // your function to handle error message
        handleEditError(response.errorMessage);
    }
   ```

## Models

### EditProfileRequest

List of parameters for the `EditProfileRequest` class

| Variable              | Type                                                    | Description                                 | Optional |
| --------------------- | ------------------------------------------------------- | ------------------------------------------- | -------- |
| name                  | `String?`                                                | New name of the user                        | &#10004; |
| imageUrl              | `String?`                                                | New URL of the user's profile image         | &#10004; |
| userUniqueId          | `String?`                                                | Unique ID of the user                       |          |
| questionCommunityJoin | List<[`QuestionCommunityJoin`](#questioncommunityjoin)>? | List of question and community associations | &#10004; |
| metadata              | `Map<String, dynamic>?`                                 | Custom data to be sent for user             | &#10004; |

### EditProfileResponse

List of parameters for the `EditProfileResponse` class

| Variable     | Type     | Description                      | Optional |
| ------------ | -------- | -------------------------------- | -------- |
| errorMessage | `String?` | Error message in case of failure | &#10004; |
| success      | `bool`   | API success status               |          |

### QuestionCommunityJoin

List of parameters for the `QuestionCommunityJoin` class

| Variable   | Type      | Description                              | Optional |
| ---------- | --------- | ---------------------------------------- | -------- |
| questionId | `int?`    | Question id associated with the user     | &#10004; |
| answer     | `String?` | Answer string associated to the question | &#10004; |



================================================
File: feed/Flutter/Data/User/get_blocked_users.md
================================================
---
sidebar_position: 6
title: Get Blocked Users
---

# Get Blocked Users

The `getBlockedUsers()` function retrieves a list of users that have been blocked by a specific user. It utilizes the `GetBlockedUsersRequest` model to specify the user whose blocked list is being requested and returns a `LMResponse<GetBlockedUsersResponse>`.

## Steps to Get Blocked Users List

1. Build a `GetBlockedUsersRequest` object using the `GetBlockedUsersRequestBuilder` class.
2. Call the `getBlockedUsers()` function using an instance of the `LMFeedClient` class.
3. Use the response [`(LMResponse<GetBlockedUsersResponse>)`](../Models/lm_response.md) as per your requirement.

```dart
// Build the request object
// USER_UUID: ID of the user blocked list is being fetched for
GetBlockedUsersRequest request = (GetBlockedUsersRequestBuilder()
      ..userUUID("USER_UUID")) // Replace with the actual user UUID
    .build();

// Get the response from calling the function
LMResponse<GetBlockedUsersResponse> response = await client.getBlockedUsers(request);

// Process the response, as per requirement
if (response.success) {
    // Your function to handle successful retrieval of blocked users
    handleBlockedUsers(response.data);
} else {
    // Your function to handle error message
    handleError(response.errorMessage);
}
```

### Get Blocked User State

To check if a user is blocked, consider the following code snippet

```dart
// Build the request object
// USER_UUID: ID of the user blocked list is being fetched for
GetBlockedUsersRequest request = (GetBlockedUsersRequestBuilder()
    ..userUUID("USER_UUID"))  // Replace with the actual user UUID
    .build();

LMResponse<GetBlockedUsersResponse> response =
    await client.getBlockedUsers(request);

List<User> blockedUsers = response.data?.blockedUsers ?? [];

// BLOCKED_USER_ID: ID of the user being searched in the blocked list
int index = blockedUsers
    .indexWhere((user) => user.sdkClientInfo.uuid == "BLOCKED_USER_ID");  // Replace with the actual user UUID

if(index == -1){
    // user if not in the blocked users list
}else{
    // user if in the blocked users list
}
```

## Models

### GetBlockedUsersRequest

The `GetBlockedUsersRequest` class represents the parameters required to request the blocked users list. Below are the details of the `GetBlockedUsersRequest` model:

| Variable | Type     | Description                                                                      | Optional |
| -------- | -------- | -------------------------------------------------------------------------------- | -------- |
| userUUID | `String` | The unique identifier (UUID) of the user for whom the blocked list is requested. | No       |

### GetBlockedUsersResponse

This response model encapsulates the success status and the list of blocked users returned by the API.

| Variable     | Type                              | Description           | Optional |
| ------------ | --------------------------------- | --------------------- | -------- |
| blockedUsers | List<[`User`](../Models/user.md)> | List of blocked users | Yes      |

---



================================================
File: feed/Flutter/Data/User/get_profile.md
================================================
---
sidebar_position: 2
title: Get Profile
---

# Get User Profile

To retrieve the user profile information in the LikeMinds Feed, use the `getProfile()` function.

## Steps to Get User Profile

1. Build a `GetProfileRequest` object using the `GetProfileRequestBuilder` class.
2. Call the `getProfile()` function using the instance of the `LMFeedClient` class.
3. Use the response as per your requirement.

   ```dart
    // Provide user details for fetching the profile
    String userUniqueId = "user_unique_id_here";

    // Build the request object
    GetProfileRequest request = (GetProfileRequestBuilder()
                                    ..userUniqueId(userUniqueId))
                                    .build();

    // Get the response from calling the function
    final GetProfileResponse response = await lmFeedClient.getProfile(request);

    // Process the response, as per requirement
    if(response.success){
        // your function to process user profile
        processUserProfile(response);
    }else{
        // your function to process error message
        processError(response.errorMessage);
    }
   ```

:::tip
Fetching user profile provides detailed information about a specific user in the LikeMinds Feed.
:::

## Models

### GetProfileRequest

List of parameters for the `GetProfileRequest` class

| Variable     | Type     | Description           | Optional |
| ------------ | -------- | --------------------- | -------- |
| userUniqueId | `String` | Unique ID of the user | &#10004; |

### GetProfileResponse

List of parameters for the `GetProfileResponse` class

| Variable       | Type                                            | Description                           | Optional |
| -------------- | ----------------------------------------------- | ------------------------------------- | -------- |
| success        | `bool`                                          | API success status                    |          |
| errorMessage   | `String`                                        | Error message in case of failure      | &#10004; |
| communityName  | `String`                                        | Name of the community                 | &#10004; |
| member         | [`User`](../Models/user.md)                     | Details of the member                 | &#10004; |
| menu           | List<[`MemberAction`](#member-action)>          | List of member actions                | &#10004; |
| questionAnswer | List<[`QuestionAnswer`](#question-answer)>      | List of question answers              | &#10004; |
| widgets        | Map<String, [WidgetModel](../Models/widget.md)> | Map of widget models (key: widget ID) | &#10004; |



================================================
File: feed/Flutter/Data/User/get_user_feed_meta.md
================================================
---
sidebar_position: 2
title: Get User Feed Meta
---

# Get User Feed Meta

To retrieve the user feed meta information in the LikeMinds Feed, use the `getUserFeedMeta()` function.

## Steps to Get User Feed Meta

1. Build a `GetUserFeedMetaRequest` object.
2. Call the `getUserFeedMeta()` function using the instance of the `LMFeedClient` class.
3. Use the response as per your requirement.

   ```dart
    // Provide user details for fetching the feed meta
    String userUniqueId = "user_unique_id_here";

    // Build the request object
    GetUserFeedMetaRequest request = GetUserFeedMetaRequest(uuid: userUniqueId);

    // Get the response from calling the function
    final GetUserFeedMetaResponse response = await lmFeedClient.getUserFeedMeta(request);

    // Process the response, as per requirement
    if(response.success){
        // your function to process user feed meta
        processUserFeedMeta(response);
    }else{
        // your function to process error message
        processError(response.errorMessage);
    }
   ```

:::tip
Fetching user feed meta provides detailed information about a specific user's feed in the LikeMinds Feed.
:::

## Models

### GetUserFeedMetaRequest

List of parameters for the `GetUserFeedMetaRequest` class

| Variable | Type     | Description           | Optional |
| -------- | -------- | --------------------- | -------- |
| uuid     | `String` | Unique ID of the user |          |

### GetUserFeedMetaResponse

List of parameters for the `GetUserFeedMetaResponse` class

| Variable         | Type                                            | Description                           | Optional |
| ---------------- | ----------------------------------------------- | ------------------------------------- | -------- |
| success          | `bool`                                          | API success status                    |          |
| errorMessage     | `String`                                        | Error message in case of failure      | &#10004; |
| commentsCount    | `int`                                           | Count of comments                     | &#10004; |
| postsCount       | `int`                                           | Count of posts                        | &#10004; |
| pendingPostCount | `int`                                           | Count of pending posts                | &#10004; |
| users            | Map<String, [User](../Models/user.md)>          | Map of user details (key: user ID)    | &#10004; |
| widgets          | Map<String, [WidgetModel](../Models/widget.md)> | Map of widget models (key: widget ID) | &#10004; |
| userTopics       | Map<String, List<String\>>                      | Map of user topics                    | &#10004; |
| topics           | Map<String, [Topic](../Models/topic.md)>        | Map of topics                         | &#10004; |



================================================
File: feed/Flutter/Data/User/initiate_user.md
================================================
---
sidebar_position: 1
title: Initiate User
---

# Initiate User

To start using the LikeMinds Feed and enable personalized experiences for your users, you need to initiate them within the system. This process associates a user in your application with a user in the LikeMinds Feed, allowing for seamless integration and personalized recommendations.

## Steps to Initiate User Session

1. Build an `InitiateUserRequest` object using the `InitiateUserRequestBuilder` class.
2. Call the `initiateUser()` function using the instance of the `LMFeedClient` class.
3. Use the response as per your requirement.

   ```dart
   // Provide user details for initiating the session
   String userName = "user_name_here";
   String userId = "user_id_here";
   String imageUrl = "user_profile_image_url_here";

   // Build the request object
   InitiateUserRequest request = (InitiateUserRequestBuilder()
           ..userName(userName)
           ..userId(userId)
           ..imageUrl(imageUrl))
         .build();

    // Get the response from calling the function
    final InitiateUserResponse response = await lmFeedClient.initiateUser(request);

    // Process the response, as per requirement
    if(response.success){
        // your function to process post liked action
        processInitiateUserSuccess(response);
    }else{
        // your function to process error message
        processError(response.errorMessage);
    }
   ```

:::tip
Initiating a user session allows users to access the LikeMinds community, either as registered users or guests.
:::

## Models

### InitiateUserRequest

List of parameters for the `InitiateUserRequest` class

| Variable | Type     | Description                     | Optional |
| -------- | -------- | ------------------------------- | -------- |
| userName | `String` | User name                       | &#10004; |
| userId   | `String` | User ID                         | &#10004; |
| imageUrl | `String` | URL of the user's profile image | &#10004; |
| apiKey   | `String` | API key for authentication      | &#10004; |

### InitiateUserResponse

List of parameters for the `InitiateUserResponse` class

| Variable       | Type                                | Description                                 | Optional |
| -------------- | ----------------------------------- | ------------------------------------------- | -------- |
| success        | `bool`                              | API success status                          |          |
| appAccess      | `bool`                              | Indicates if the user has access to the app | &#10004; |
| user           | [`User`](../Models/user.md)         | Details of the initiated user               | &#10004; |
| community      | [`Community`](#community)           | Details of the community                    | &#10004; |
| logoutResponse | [`LogoutResponse`](#logoutresponse) | Details of the logout response              | &#10004; |
| accessToken    | `String`                            | Access token for authentication             | &#10004; |
| refreshToken   | `String`                            | Refresh token for authentication            | &#10004; |
| errorMessage   | `String`                            | Error message in case of failure            | &#10004; |



================================================
File: feed/Flutter/Data/User/logout.md
================================================
---
sidebar_position: 3
title: Logout User
---

# Logout User

To securely terminate a user session and log the user out of the LikeMinds Feed, use the `logout()` function.

## Steps to Logout User

1. Build a `LogoutRequest` object using the `LogoutRequestBuilder` class.
2. Call the `logout()` function using the instance of the `LMFeedClient` class.
3. Use the response as per your requirement.

   ```dart
   // Provide refresh token and device ID for logging out the user
   String? refreshToken = "refresh_token_here";
   String? deviceId = "device_id_here";

   // Build the request object
   LogoutRequest request = (LogoutRequestBuilder()
           ..refreshToken(refreshToken)
           ..deviceId(deviceId))
         .build();

    // Get the response from calling the function
    final LogoutResponse response = await lmFeedClient.logout(request);

    // Process the response, as per requirement
    if(response.success){
        // your function to process user logout
        processUserLogout(response);
    }else{
        // your function to process error message
        processError(response.errorMessage);
    }
   ```

:::tip
Logging out a user ensures the termination of the current session and provides a secure user experience.
:::

## Models

### LogoutRequest

List of parameters for the `LogoutRequest` class

| Variable     | Type     | Description                      | Optional |
| ------------ | -------- | -------------------------------- | -------- |
| refreshToken | `String` | Refresh token for authentication | &#10004; |
| deviceId     | `String` | Unique identifier for the device | &#10004; |

### LogoutResponse

List of parameters for the `LogoutResponse` class

| Variable     | Type     | Description                      | Optional |
| ------------ | -------- | -------------------------------- | -------- |
| success      | `bool`   | API success status               |          |
| errorMessage | `String` | Error message in case of failure | &#10004; |



================================================
File: feed/Flutter/Data/User/member_state.md
================================================
---
sidebar_position: 1
title: Get Member State
---

# Get Member State

To retrieve the current state of a member in the LikeMinds Feed, use the `getMemberState()` function.

## Steps to Get Member State

1. Call the `getMemberState()` function using the instance of the `LMFeedClient` class.
2. Use the response as per your requirement.

   ```dart
    // Get the response from calling the function
    final MemberStateResponse response = await lmFeedClient.getMemberState();

    // Process the response, as per requirement
    if(response.success){
        // your function to process member state
        processMemberState(response);
    }else{
        // your function to process error message
        processError(response.errorMessage);
    }
   ```

:::tip
Fetching member state provides information about the current state of a member in the LikeMinds Feed.
:::

## Models

### MemberStateResponse

List of parameters for the `MemberStateResponse` class

| Variable     | Type                                 | Description                               | Optional |
| ------------ | ------------------------------------ | ----------------------------------------- | -------- |
| success      | `bool`                               | API success status                        |          |
| errorMessage | `String`                             | Error message in case of failure          | &#10004; |
| createdAt    | `String`                             | Date and time when the member was created | &#10004; |
| editRequired | `bool`                               | Indicates if member edit is required      | &#10004; |
| member       | [`User`](../Models/user.md)          | Details of the member                     | &#10004; |
| memberRights | List<[`MemberRight`](#member-right)> | List of member rights                     | &#10004; |
| state        | `int`                                | Current state of the member               | &#10004; |



================================================
File: feed/Flutter/Data/User/refresh_user.md
================================================
---
sidebar_position: 2
title: Refresh User
---

# Refresh User

To keep the user session active and ensure uninterrupted access to the LikeMinds Feed, you can refresh the user's authentication tokens using the `refreshUser()` function.

## Steps to Refresh User Session

1. Build a `RefreshRequest` object using the `RefreshRequestBuilder` class.
2. Call the `refreshUser()` function using the instance of the `LMFeedClient` class.
3. Use the response as per your requirement.

   ```dart
   // Provide refresh token for renewing the user session
   String refreshToken = "refresh_token_here";

   // Build the request object
   RefreshRequest refreshRequest = (RefreshRequestBuilder()..refreshToken(refreshToken)).build();

    // Get the response from calling the function
    final RefreshResponse response = await lmFeedClient.refreshUser(refreshRequest);

    // Process the response, as per requirement
    if(response.success){
        // your function to process refreshed user session
        processRefreshedUserSession(response);
    }else{
        // your function to process error message
        processError(response.errorMessage);
    }
   ```

:::tip
Refreshing a user session ensures continuous access to the LikeMinds Feed without requiring the user to log in again.
:::

## Models

### RefreshRequest

List of parameters for the `RefreshRequest` class

| Variable     | Type     | Description                      | Optional |
| ------------ | -------- | -------------------------------- | -------- |
| refreshToken | `String` | Refresh token for authentication | &#10004; |

### RefreshResponse

List of parameters for the `RefreshResponse` class

| Variable     | Type     | Description                      | Optional |
| ------------ | -------- | -------------------------------- | -------- |
| success      | `bool`   | API success status               |          |
| errorMessage | `String` | Error message in case of failure | &#10004; |
| accessToken  | `String` | Access token for authentication  | &#10004; |
| refreshToken | `String` | Refresh token for authentication | &#10004; |



================================================
File: feed/Flutter/Data/User/register_device.md
================================================
---
sidebar_position: 10
title: Register Device
---

# Register Device for Notifications

To receive push notifications, you need to register a device using the `registerDevice()` function.

## Steps to Register a Device

1. Build a `RegisterDeviceRequest` object using the `RegisterDeviceRequestBuilder` class.
2. Call the `registerDevice()` function using the instance of the `LMFeedClient` class.
3. Use the response as per your requirement.

   ```dart
    // Provide device details for registration
    String token = "device_token_here";
    String deviceId = "device_id_here";
    int memberId = 123; // replace with actual member ID

    // Build the request object
    RegisterDeviceRequest request = (RegisterDeviceRequestBuilder()
      ..token(token)
      ..deviceId(deviceId)
      ..memberId(memberId))
    .build();

    // Get the response from calling the function
    final RegisterDeviceResponse response = await lmFeedClient.registerDevice(request);

    // Process the response, as per requirement
    if(response.success){
        // your function to handle successful device registration
        handleDeviceRegistration(response);
    }else{
        // your function to handle error message
        handleRegistrationError(response.errorMessage);
    }
   ```

:::tip
Registering a device allows it to receive push notifications from the LikeMinds Feed.
:::

## Models

### RegisterDeviceRequest

List of parameters for the `RegisterDeviceRequest` class

| Variable | Type     | Description                          | Optional |
| -------- | -------- | ------------------------------------ | -------- |
| token    | `String` | Device token for notifications       |          |
| deviceId | `String` | Unique ID of the registered device   |          |
| memberId | `int`    | Member ID associated with the device |          |

### RegisterDeviceResponse

List of parameters for the `RegisterDeviceResponse` class

| Variable     | Type     | Description                      | Optional |
| ------------ | -------- | -------------------------------- | -------- |
| errorMessage | `String` | Error message in case of failure | &#10004; |
| success      | `bool`   | API success status               |          |



================================================
File: feed/Flutter/Data/User/toggle_block.md
================================================
---
sidebar_position: 5
title: Toggle Block
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Toggle Block

The `toggleBlock()` function is used to block or unblock a user based on the parameters provided in the `BlockUserRequest`. It returns an [`LMResponse`](../Models/lm_response.md).

## Steps to Block or Unblock a User

1. Build a `BlockUserRequest` object using the `BlockUserRequestBuilder` class.
2. Call the `toggleBlock()` function using an instance of the `LMFeedClient` class.
3. Use the response [`LMResponse`](../Models/lm_response.md) as per your requirement.

<Tabs>
<TabItem value="Block-User" label="Block User">

```dart
// Build the request object
final BlockUserRequest blockUserRequest = (BlockUserRequestBuilder()
    ..uuid("USER_UUID_HERE")  // Replace with the actual user UUID
    ..shouldBlock(true))  // pass true to block a user
    .build();

// Get the response from calling the function
final LMResponse<void> blockUserResponse = await lmFeedClient.toggleBlock(blockUserRequest);

// Process the response, as per requirement
if (blockUserResponse.success) {
    // Your function to handle successful block action
    handleBlockSuccess();
} else {
    // Your function to handle error message
    handleBlockError(blockUserResponse.errorMessage);
}

```

</TabItem>
<TabItem value="Unblock-User" label="Unblock User">

```dart
// Build the request object to unblock a user
final BlockUserRequest unBlockUserRequest = (BlockUserRequestBuilder()
    ..uuid("USER_UUID_HERE")  // Replace with the actual user UUID
    ..shouldBlock(false))  // pass false to unblock a user
    .build();

// Get the response from calling the function
final LMResponse<void> unBlockUserResponse = await lmFeedClient.toggleBlock(unBlockUserRequest);

// Process the response, as per requirement
if (unBlockUserResponse.success) {
    // Your function to handle successful unblock action
    handleUnblockSuccess();
} else {
    // Your function to handle error message
    handleUnblockError(unBlockUserResponse.errorMessage);
}

```

</TabItem>
</Tabs>

:::info
To check if a user is blocked or not, refer to this [Get Blocked User](./get_blocked_users.md)
:::

## Models

### BlockUserRequest

The `BlockUserRequest` class represents the parameters required to block or unblock a user. Below are the details of the `BlockUserRequest` model:

| Variable    | Type     | Description                                   | Optional |
| ----------- | -------- | --------------------------------------------- | -------- |
| uuid        | `String` | The unique identifier (UUID) of the user.     | No       |
| shouldBlock | `bool`   | `true` to block the user, `false` to unblock. | No       |



================================================
File: feed/Flutter/Data/User/validate_user.md
================================================
---
sidebar_position: 1
title: Validate User
---

# Validate User

To start using the LikeMinds Feed and enable personalized experiences for your users, you need to validate them within the system. This process associates a user in your application with a user in the LikeMinds Feed, allowing for seamless integration and personalized recommendations.

## Steps to Validate User Session

1. Build a `ValidateUserRequest` object using the `ValidateUserRequestBuilder` class.
2. Call the `validateUser()` function using the instance of the `LMFeedClient` class.
3. Use the response as per your requirement.

   ```dart
   // Provide user details for initiating the session
   String accessToken = "access_token_here";
   String refreshToken = "refresh_token_here";

   // Build the request object
   ValidateUserRequest request = (ValidateUserRequestBuilder()
           ..accessToken(accessToken)
           ..refreshToken(refreshToken))
         .build();

    // Get the response from calling the function
    final ValidateUserResponse response = await lmFeedClient.validateUser(request);

    // Process the response, as per requirement
    if(response.success){
        // your function to process post liked action
        processValidateUserSuccess(response);
    }else{
        // your function to process error message
        processError(response.errorMessage);
    }
   ```

:::tip
Initiating a user session allows users to access the LikeMinds community, either as registered users or guests.
:::

## Models

### ValidateUserRequest

List of parameters for the `ValidateUserRequest` class

| Variable     | Type     | Description                | Optional |
| ------------ | -------- | -------------------------- | -------- |
| accessToken  | `String` | Access token for validation |          |
| refreshToken | `String` | Refresh token for validation|          |

### ValidateUserResponse

List of parameters for the `ValidateUserResponse` class

| Variable       | Type                      | Description                                 | Optional |
| -------------- | ------------------------- | ------------------------------------------- | -------- |
| success        | `bool`                    | API success status                          |          |
| errorMessage   | `String`                  | Error message in case of failure            | &#10004; |
| user           | [`User`](../Models/user.md) | Details of the validated user               | &#10004; |
| community      | [`Community`](#community) | Details of the community                    | &#10004; |
| appAccess      | `bool`                    | Indicates if the user has access to the app | &#10004; |



================================================
File: feed/Flutter/Data/Widget/_category_.json
================================================
{
    "label": "Widget",
    "position": 10,
    "link": {
        "type": "generated-index",
        "description": "Documentation for Custom Widget features"
    }
}



================================================
File: feed/Flutter/Data/Widget/get_widgets.md
================================================
---
sidebar_position: 1
title: Get Widgets
---

# Get Widgets

The `getWidgets()` function is used to fetch widgets based on specified parameters.

## Steps to Get Widgets

1. Build a `GetWidgetRequest` object using the `GetWidgetRequestBuilder` class.
2. Call the `getWidgets()` function using the instance of the `LMFeedClient` class.
3. Use the response as per your requirement.

   ```dart
    // Specify the parameters for fetching widgets
    int page = 1;
    int pageSize = 10;
    String searchKey = "category";
    String searchValue = "news";

    // Build the request object
    GetWidgetRequest request = (GetWidgetRequestBuilder()
      ..page(page)
      ..pageSize(pageSize)
      ..searchKey(searchKey)
      ..searchValue(searchValue))
      .build();

    // Get the response from calling the function
    final GetWidgetResponse response = await lmFeedClient.getWidgets(request);

    // Process the response, as per requirement
    if(response.success){
        // your function to handle successful retrieval of widgets
        handleWidgets(response.widgets);
    }else{
        // your function to handle error message
        handleWidgetsError(response.errorMessage);
    }
   ```

:::tip
Fetching widgets allows you to display dynamic content in your application, enhancing user engagement. Custom widgets allow you fetch custom data from the backend to render any custom views.
:::

## Models

### GetWidgetRequest

List of parameters for the `GetWidgetRequest` class

| Variable    | Type     | Description                 | Optional |
| ----------- | -------- | --------------------------- | -------- |
| page        | `int`    | Page number for pagination  | &#10004; |
| pageSize    | `int`    | Number of items per page    | &#10004; |
| searchKey   | `String` | Key for filtering widgets   | &#10004; |
| searchValue | `String` | Value for filtering widgets | &#10004; |

### GetWidgetResponse

List of parameters for the `GetWidgetResponse` class

| Variable     | Type                                       | Description                      | Optional |
| ------------ | ------------------------------------------ | -------------------------------- | -------- |
| success      | `bool`                                     | API success status               |          |
| errorMessage | `String`                                   | Error message in case of failure | &#10004; |
| widgets      | List<[`WidgetModel`](./Models/widget.md)> | List of widget models            | &#10004; |



================================================
File: feed/Flutter/UI/_category_.json
================================================
{
  "label": "UI",
  "position": 4,
  "link": {
    "type": "generated-index",
    "description": "Flutter Documentation for LikeMinds Feed UI SDK"
  }
}



================================================
File: feed/Flutter/UI/typedef.md
================================================
---
position: 6
title: Typedef for Widget Builders
slug: /flutter/core/guide/typedef-for-builders
---

# Typedef for Widget Builders

## Introduction

This document provides an overview of the builder typedefs used for creating various customizable widgets in the LikeMinds feed. Each typedef defines a builder function that returns a widget and is designed to handle specific parts of the feed UI, such as headers, footers, media, comments, and more.

### 1. `LMFeedPostHeaderBuilder`

Description: Builder function to create the post header, typically displaying the user image, name, time, and menu button.

- Parameters:
  - BuildContext
  - [LMFeedPostHeader](./Post/header.md)
  - LMPostViewData
- Return Type: [Widget](https://api.flutter.dev/flutter/widgets/Widget-class.html)

### 2. `LMFeedPostFooterBuilder`

Description: Builder function to create the post footer, typically containing like, comment, share, and save buttons.

- Parameters:
  - BuildContext
  - [LMFeedPostFooter](./Post/footer.md)
  - LMPostViewData
- Return Type: [Widget](https://api.flutter.dev/flutter/widgets/Widget-class.html)

### 3. `LMFeedPostMenuBuilder`

Description: Builder function to create the post menu, providing options like edit, delete, report, and pin.

- Parameters:
  - BuildContext
  - [LMFeedMenu](./Post/menu.md)
  - LMPostViewData
- Return Type: [Widget](https://api.flutter.dev/flutter/widgets/Widget-class.html)

### 4. `LMFeedPostTopicBuilder`

Description: Builder function to create the post topic widget.

- Parameters:
  - BuildContext
  - [LMFeedPostTopic](./Post/topic.md)
  - LMPostViewData
- Return Type: [Widget](https://api.flutter.dev/flutter/widgets/Widget-class.html)

### 5. `LMFeedPostMediaBuilder`

Description: Builder function to create the post media widget.

- Parameters:
  - BuildContext
  - [LMFeedPostMedia](./Post/media.md)
  - LMPostViewData
- Return Type: [Widget](https://api.flutter.dev/flutter/widgets/Widget-class.html)

### 6. `LMFeedPostContentBuilder`

Description: Builder function to create the main content of the post.

- Parameters:
  - BuildContext
  - [LMFeedPostContent](./Post/content.md)
  - LMPostViewData
- Return Type: [Widget](https://api.flutter.dev/flutter/widgets/Widget-class.html)

### 7. `LMFeedPostReviewBannerBuilder`

Description: Builder function to create a review banner for the post.

- Parameters:
  - BuildContext
  - LMFeedPostReviewBanner
  - LMPostViewData
- Return Type: [Widget](https://api.flutter.dev/flutter/widgets/Widget-class.html)

### 8. `LMFeedPostWidgetBuilder`

Description: Builder function to create the complete post widget.

- Parameters:
  - BuildContext
  - [LMFeedPostWidget](./Post/post_widget.md)
  - LMPostViewData
- Return Type: [Widget](https://api.flutter.dev/flutter/widgets/Widget-class.html)

### 9. `LMFeedImageBuilder`

Description: Builder function to create an image widget.

- Parameters:
  - [LMFeedImage](./Media/image.md)
- Return Type: [Widget](https://api.flutter.dev/flutter/widgets/Widget-class.html)

### 10. `LMFeedVideoBuilder`

Description: Builder function to create a video widget.

- Parameters:
  - [LMFeedVideo](./Media/video.md)
- Return Type: [Widget](https://api.flutter.dev/flutter/widgets/Widget-class.html)

### 11. `LMFeedPollBuilder`

Description: Builder function to create a poll widget.

- Parameters:
  - BuildContext
  - [LMFeedPoll](./Media/poll.md)
- Return Type: [Widget](https://api.flutter.dev/flutter/widgets/Widget-class.html)

### 12. `LMFeedCarouselIndicatorBuilder`

Description: Builder function to create a carousel indicator widget.

- Parameters:
  - BuildContext
  - int (current index)
  - int (total count)
  - Widget (indicator)
- Return Type: [Widget](https://api.flutter.dev/flutter/widgets/Widget-class.html)

### 13. `LMFeedOnPostTap`

Description: Callback to handle interactions with the post.

- Parameters:
  - BuildContext
  - LMPostViewData
- Return Type: void

### 14. `LMFeedPostAppBarBuilder`

Description: Builder function to create the post app bar.

- Parameters:
  - BuildContext
  - [LMFeedAppBar](./Fundamental/Extras/appbar.md)
- Return Type: PreferredSizeWidget

### 15. `LMFeedPostCommentBuilder`

Description: Builder function to create the post comment widget.

- Parameters:
  - BuildContext
  - [LMFeedCommentWidget](./Comment/comment_widget.md)
  - LMPostViewData
- Return Type: [Widget](https://api.flutter.dev/flutter/widgets/Widget-class.html)

### 16. `LMFeedTopicBarBuilder`

Description: Builder function to create the topic bar widget.

- Parameters:
  - [LMFeedTopicBar](./Topic/topic_bar.md)
- Return Type: [Widget](https://api.flutter.dev/flutter/widgets/Widget-class.html)

### 17. `LMFeedErrorHandler`

Description: Callback to handle errors within the feed.

- Parameters:
  - String (error message)
  - StackTrace
- Return Type: Function

### 18. `LMFeedOnTagTap`

Description: Callback to handle tag taps in the feed.

- Parameters:
  - String (tag)
- Return Type: void

### 19. `LMFeedButtonBuilder`

Description: Builder function to create a button widget.

- Parameters:
  - [LMFeedButton](./Fundamental/button.md)
- Return Type: [Widget](https://api.flutter.dev/flutter/widgets/Widget-class.html)

### 20. `LMFeedRoomTileBuilder`

Description: Builder function to create a room tile widget.

- Parameters:
  - BuildContext
  - LMFeedRoomViewData
  - [LMFeedTile](./Fundamental/Tiles/tile.md)
- Return Type: [Widget](https://api.flutter.dev/flutter/widgets/Widget-class.html)

### 21. `LMFeedTextBuilder`

Description: Builder function to create a text widget.

- Parameters:
  - BuildContext
  - [LMFeedText](./Fundamental/text.md)
- Return Type: [Widget](https://api.flutter.dev/flutter/widgets/Widget-class.html)

### 22. `LMFeedProfilePictureBuilder`

Description: Builder function to create the profile picture widget.

- Parameters:
  - BuildContext
  - [LMFeedProfilePicture](./Fundamental/Extras/profile.md)
- Return Type: [Widget](https://api.flutter.dev/flutter/widgets/Widget-class.html)

### 23. `LMFeedContextBuilder`

Description: Builder function to create the feed context widget.

- Parameters:
  - BuildContext
- Return Type: [Widget](https://api.flutter.dev/flutter/widgets/Widget-class.html)

### 24. `LMFeedLoaderBuilder`

Description: Builder function to create the loader widget.

- Parameters:
  - BuildContext
  - [LMFeedLoader](./Fundamental/Extras/loader.md)
- Return Type: [Widget](https://api.flutter.dev/flutter/widgets/Widget-class.html)

### 25. `LMFeedContextWidgetBuilder`

Description: Builder function to create new widget

- Parameters:
  - BuildContext
- Return Type: [Widget](https://api.flutter.dev/flutter/widgets/Widget-class.html)



================================================
File: feed/Flutter/UI/Comment/__category__.json
================================================
{
    "label": "Comment",
    "position": 2,
    "link": {
      "type": "generated-index",
      "description": "Documentation for post UI widgets"
    }
}



================================================
File: feed/Flutter/UI/Comment/comment_widget.md
================================================
---
sidebar_position: 1
title: LMFeedCommentWidget
---

# LMFeedCommentWidget

`LMFeedCommentWidget` is a widget that represents a comment in a feed. It displays information about the user who posted the comment, the comment text, and provides options for liking, replying, and showing replies to the comment. The widget is highly customizable, allowing you to modify its appearance and behavior.

<br></br>

<p align="center">
  <img src="/img/flutter/ui/LMFeedComment.webp" alt="LMFeedCommentWidget" width="500"></img>
</p>

The `LMFeedCommentWidget` is a part of the `likeminds_feed_flutter_ui` package. It is designed to be used within a feed or comment section to display individual comments and their associated actions.

## Properties

- `user` (`LMUserViewData`) - Required

The user data associated with the comment. This is a **required** parameter.

- `comment` (`LMCommentViewData`) - Required

The comment data to be displayed. This is a **required** parameter.

- `lmFeedMenuAction` (`LMFeedMenuAction`) - Required

The menu actions associated with the comment. This is a **required** parameter.

- `onTagTap` (`Function(String)`) - Required

A callback function that is called when a tag in the comment text is tapped. It takes the tapped tag as a parameter. This is a **required** parameter.

- `profilePicture` (`LMFeedProfilePicture?`)

A custom profile picture widget for the user. If not provided, the default profile picture will be used. This is an optional parameter.

- `titleText` (`LMFeedText?`)

A custom title text widget for the comment. If not provided, the user's name will be displayed as the title. This is an optional parameter.

- `subtitleText` (`LMFeedText?`)

A custom subtitle text widget for the comment. This is an optional parameter.

- `menu` (`Widget Function(LMFeedMenu)?`)

A builder function that takes an `LMFeedMenu` and returns a custom menu widget for the comment. This is an optional parameter.

- `likeButtonBuilder` (`Widget Function(LMFeedButton)?`)

A builder function that takes an `LMFeedButton` and returns a custom like button widget for the comment. This is an optional parameter.

- `replyButtonBuilder` (`Widget Function(LMFeedButton)?`)

A builder function that takes an `LMFeedButton` and returns a custom reply button widget for the comment. This is an optional parameter.

- `showRepliesButtonBuilder` (`Widget Function(LMFeedButton)?`)

A builder function that takes an `LMFeedButton` and returns a custom "show replies" button widget for the comment. This is an optional parameter.

- `likeButton` (`LMFeedButton?`)

A custom like button widget for the comment. If not provided, the default like button will be used. This is an optional parameter.

- `replyButton` (`LMFeedButton?`)

A custom reply button widget for the comment. If not provided, the default reply button will be used. This is an optional parameter.

- `showRepliesButton` (`LMFeedButton?`)

A custom "show replies" button widget for the comment. If not provided, the default "show replies" button will be used. This is an optional parameter.

- `buttonSeparator` (`Widget?`)

A custom separator widget between the action buttons. If not provided, a default separator will be used. This is an optional parameter.

- `style` (`LMFeedCommentStyle?`)

The style configuration for the comment widget. It allows customization of various aspects of the comment's appearance. This is an optional parameter.

## Styling

The `LMFeedCommentStyle` class allows you to customize the appearance of the `LMFeedCommentWidget`.

### Customization variables

| Property                 | Type              | Description                                       | Required | Default |
| ------------------------ | ----------------- | ------------------------------------------------- | -------- | ------- |
| `textStyle`              | TextStyle         | The text style for the comment text.              |          |         |
| `linkStyle`              | TextStyle         | The text style for links within the comment text. |          |         |
| `actionsPadding`         | EdgeInsets        | The padding for the action buttons.               |          |         |
| `backgroundColor`        | Color             | The background color of the comment widget.       |          |         |
| `contentBackgroundColor` | Color             | The background color of the comment text content. |          |         |
| `margin`                 | EdgeInsets        | The margin around the comment widget.             |          |         |
| `borderRadius`           | BorderRadius      | The border radius of the comment widget.          |          |         |
| `width`                  | double            | The width of the comment widget.                  |          |         |
| `boxShadow`              | List\<BoxShadow\> | The box shadow for the comment widget.            |          |         |
| `padding`                | EdgeInsets        | The padding of the comment widget.                |          |         |
| `likeButtonStyle`        | LMFeedButtonStyle | The style for the like button.                    |          |         |
| `replyButtonStyle`       | LMFeedButtonStyle | The style for the reply button.                   |          |         |
| `showRepliesButtonStyle` | LMFeedButtonStyle | The style for the "show replies" button.          |          |         |
| `showReplyButton`        | bool              | Whether to show the reply button.                 |          | true    |
| `showRepliesButton`      | bool              | Whether to show the "show replies" button.        |          | true    |
| `showProfilePicture`     | bool              | Whether to show the profile picture.              |          | true    |
| `profilePicturePadding`  | EdgeInsets        | The padding for the profile picture.              |          |         |
| `titlePadding`           | EdgeInsets        | The padding for the title text.                   |          |         |
| `subtitlePadding`        | EdgeInsets        | The padding for the subtitle text.                |          |         |
| `showTimestamp`          | bool              | Whether to show the timestamp of the comment.     |          | true    |

You can create an instance of `LMFeedCommentStyle` and pass it to the `LMFeedCommentWidget` to customize its appearance.

## Usage Example

```dart
LMFeedCommentWidget(
  user: LMUserViewData(
    id: 'your-user-id',
    ...
  ),
  comment: LMCommentViewData(
    id: 'your-comment-id',
    ...
  ),
  lmFeedMenuAction: LMFeedMenuAction(
    onCommentEdit: () {
      // Handle comment edit action
    },
    onCommentDelete: () {
      // Handle comment delete action
    },
  ),
  onTagTap: (tag) {
    // Handle tag tap
    print('Tapped tag: $tag');
  },
  // change the user profile 
  profilePicture: LMFeedProfilePicture(
        fallbackText: userViewData.name, // replace with user name
        imageUrl: userViewData.imageUrl, // replace with user image url
      ),
  style: LMFeedCommentStyle(
    backgroundColor: Colors.white,
    padding: EdgeInsets.all(16),
    textStyle: TextStyle(fontSize: 16),
    linkStyle: TextStyle(color: Colors.blue),
    showReplyButton: true,
    showRepliesButton: true,
  ),
)
```

In this example, an `LMFeedCommentWidget` is created with the required `user` and `comment` data. The `lmFeedMenuAction` property is used to specify the actions for editing and deleting the comment. The `onTagTap` callback is provided to handle taps on tags within the comment text. The appearance of the comment widget is customized using the `LMFeedCommentStyle` class, specifying the background color, padding, text styles, and visibility of reply and "show replies" buttons.



================================================
File: feed/Flutter/UI/Fundamental/__category__.json
================================================
{
  "label": "Fundamentals",
  "position": 5,
  "link": {
    "type": "generated-index",
    "description": "Documentation for Fundamental UI widgets"
  }
}
 


================================================
File: feed/Flutter/UI/Fundamental/button.md
================================================
---
sidebar_position: 3
title: LMFeedButton
---

# LMFeedButton

`LMFeedButton` is a customizable widget designed for displaying buttons within the Flutter UI library. It provides various styling options and supports both active and inactive states. The button can display text, icons, or a combination of both, and offers flexibility in their placement and appearance.

<br></br>

<p align="center">
  <img src="/img/flutter/ui/LMFeedButton.webp" alt="LMFeedButton"></img>
</p>

The `LMFeedButton` widget allows developers to create buttons with a consistent look and feel throughout their application. It supports different types of buttons, such as like, comment, share, save, and repost buttons, with predefined styles. Additionally, developers can customize the appearance and behavior of the button to suit their needs.

## Properties

- `isActive` (bool)

A required parameter that determines whether the button is in an active or inactive state.

- `style` (LMFeedButtonStyle)

An optional style class that allows customization of the button's appearance, such as padding, background color, border, height, width, icon placement, and more.

- `text` (LMFeedText)

An optional `LMFeedText` widget that represents the text to be displayed in the button.

- `onTap` (Function())

A required callback function that is invoked when the button is tapped.

- `activeText` (LMFeedText)

An optional `LMFeedText` widget that represents the text to be displayed in the button when it is in the active state.

- `onTextTap` (VoidCallback)

An optional callback function that is invoked when the text in the button is tapped.

## Styling

The `LMFeedButtonStyle` class provides a way to define the visual style of the button. It includes properties for padding, background color, border, border radius, height, width, icon placement, alignment, margin, and more.

### Customization variables

| Property            | Type                      | Description                                     | Required | Default                         |
| ------------------- | ------------------------- | ----------------------------------------------- | -------- | ------------------------------- |
| `padding`           | EdgeInsets                | Padding of the button                           |          | EdgeInsets.all(4)               |
| `backgroundColor`   | Color                     | Background color of the button                  |          | Colors.transparent              |
| `border`            | Border                    | Border of the button                            |          |                                 |
| `borderRadius`      | double                    | Border radius of the button container           |          | 8.0                             |
| `height`            | double                    | Height of the button                            |          | 28.0                            |
| `width`             | double                    | Width of the button                             |          |                                 |
| `placement`         | LMFeedIconButtonPlacement | Placement of the icon in the button             |          | LMFeedIconButtonPlacement.start |
| `mainAxisAlignment` | MainAxisAlignment         | Main axis alignment for button's icon and text  |          |                                 |
| `margin`            | double                    | Margin between the text and icon                |          | 4.0                             |
| `showText`          | bool                      | Whether to show text in the button              |          | true                            |
| `icon`              | LMFeedIcon                | Icon to be displayed in the button              |          |                                 |
| `activeIcon`        | LMFeedIcon                | Icon to be displayed in the active button state |          |                                 |
| `textPadding`       | EdgeInsets                | Padding for the text in the button              |          | EdgeInsets.zero                 |

## Usage Example

```dart
LMFeedButton(
  isActive: true,
  text: LMFeedText(
    text: 'Like',
    style: LMFeedTextStyle(
      textStyle: TextStyle(
        color: Colors.red,
        fontWeight: FontWeight.bold,
      ),
    ),
  ),
  activeText: LMFeedText(
    text: 'Liked',
    style: LMFeedTextStyle(
      textStyle: TextStyle(
        color: Colors.red,
        fontWeight: FontWeight.bold,
      ),
    ),
  ),
  style: LMFeedButtonStyle(
    icon: LMFeedIcon(
      type: LMFeedIconType.icon,
      icon: Icons.favorite,
      style: LMFeedIconStyle(
        color: Colors.red,
      ),
    ),
    activeIcon: LMFeedIcon(
      type: LMFeedIconType.icon,
      icon: Icons.favorite,
      style: LMFeedIconStyle(
        color: Colors.red,
      ),
    ),
  ),
  onTap: () {
    // Handle button tap
  },
),
```

This example creates an active `LMFeedButton` with a "Like" text and a heart icon. The button is styled with a red color for both the text and the icon. When tapped, it triggers the `onTap` callback function, allowing you to handle the button's action.



================================================
File: feed/Flutter/UI/Fundamental/icon.md
================================================
---
sidebar_position: 2
title: LMFeedIcon
---

# LMFeedIcon

`LMFeedIcon` is a versatile widget designed for displaying icons within the Flutter UI library. It supports three types of icons: Material Design icons, PNG images, and SVG images. Additionally, it offers extensive customization options through the `LMFeedIconStyle` class.

<br></br>

<p align="center">
  <img src="/img/flutter/ui/LMFeedIcon.webp" alt="LMFeedIcon"></img>
</p>

The `LMFeedIcon` widget provides a unified interface for displaying icons of various formats, including Material Design icons, PNG images, and SVG images. It allows developers to easily incorporate icons into their user interfaces while maintaining a consistent appearance and behavior throughout the application.

## Properties

- `type` (LMFeedIconType)

An enum value that specifies the type of icon to be displayed. The available options are:

- `LMFeedIconType.icon`: For Material Design icons
- `LMFeedIconType.svg`: For SVG images
- `LMFeedIconType.webp`: For PNG images

- `icon` (IconData)

The `IconData` representing the Material Design icon to be displayed. This property is required when `type` is set to `LMFeedIconType.icon`.

- `assetPath` (String)

The asset path for the PNG or SVG image to be displayed. This property is required when `type` is set to `LMFeedIconType.webp` or `LMFeedIconType.svg`.

- `style` (LMFeedIconStyle)

An optional style class that allows customization of the icon's appearance, such as color, size, background color, padding, and more.

## Styling

The `LMFeedIconStyle` class provides a way to define the visual style of the icon. It includes properties for icon color, size, background color, padding, border radius, and more.

### Customization variables

| Property          | Type   | Description                                      | Required | Default        |
| ----------------- | ------ | ------------------------------------------------ | -------- | -------------- |
| `color`           | Color  | Color of the icon (not applicable for PNG icons) |          |                |
| `size`            | double | Square size of the icon                          |          | 24.0           |
| `boxSize`         | double | Square size of the box surrounding the icon      |          |                |
| `boxBorder`       | double | Weight of the border around the box              |          |                |
| `boxBorderRadius` | double | Radius of the box around the icon                |          |                |
| `boxPadding`      | double | Padding around the icon with respect to the box  |          | 0.0            |
| `backgroundColor` | Color  | Color of the box or background color of the icon |          |                |
| `fit`             | BoxFit | How the icon should be fit inside the box        |          | BoxFit.contain |

## Usage Example

```dart
LMFeedIcon(
  type: LMFeedIconType.icon,
  icon: Icons.favorite,
  style: LMFeedIconStyle(
    color: Colors.red,
    size: 32,
    boxSize: 48,
    boxBorderRadius: 8,
    backgroundColor: Colors.grey.withOpacity(0.2),
  ),
),
```

This example creates a `LMFeedIcon` widget displaying a Material Design icon (`Icons.favorite`). The icon is styled with a red color, a size of 32 pixels, and is placed inside a box with a size of 48 pixels, a border radius of 8 pixels, and a semi-transparent grey background color.



================================================
File: feed/Flutter/UI/Fundamental/text.md
================================================
---
sidebar_position: 1
title: LMFeedText
---

# LMFeedText

`LMFeedText` is a widget designed for displaying customizable text within the Flutter UI library. It offers extensive styling options and interactivity, such as tap actions.

<br></br>

<p align="center">
  <img src="/img/flutter/ui/LMFeedText.webp" alt="LMFeedText"></img>
</p>

The `LMFeedText` widget is utilized to display text with customizable styling and behavior. It supports text alignment, overflow, maximum lines, and tap actions, making it versatile for various UI components.

## Properties

- `text` (String)

The text content to be displayed.

- `style` (LMFeedTextStyle)

An optional style class to customize the appearance of the text, including font size, color, weight, and more.

- `onTap` (Function())

An optional callback function that is invoked when the text is tapped. This can be used to add interactivity to the text.

## Styling

The `LMFeedTextStyle` class provides a way to define the visual style of the text. It includes properties for text alignment, overflow behavior, maximum lines, and the text style itself. It also has `copyWith()` functionality to allow reusability of styles throughout the feed.

### Customization variables

| Property     | Type         | Description                                      | Required | Default  |
| ------------ | ------------ | ------------------------------------------------ | -------- | -------- |
| `selectable` | bool         | Determines if the text is selectable.            |          | false    |
| `maxLines`   | int          | Maximum number of lines for the text.            |          | 1        |
| `overflow`   | TextOverflow | Overflow behavior for the text.                  |          | ellipsis |
| `textAlign`  | TextAlign    | Alignment of the text.                           |          | start    |
| `textStyle`  | TextStyle    | Flutter text style for font size, color, weight. |          |          |

## Usage Example

```dart
LMFeedText(
    text: "Tap me!",
    style: LMFeedTextStyle(
        textStyle: TextStyle(
            color: Colors.blue,
            fontWeight: FontWeight.bold,
            fontSize: 16,
        ),
        maxLines: 2,
        overflow: TextOverflow.ellipsis,
    ),
    onTap: () {
    // Custom logic for tap action
    },
),
```

This example demonstrates how to create a `LMFeedText` widget with custom styling and a tap action. The text "Tap me!" is styled with a bold, blue font and is limited to two lines with ellipsis overflow. When tapped, it triggers a custom logic defined in the `onTap` callback.



================================================
File: feed/Flutter/UI/Fundamental/Extras/__category__.json
================================================
{
  "label": "Extras",
  "position": 8,
  "link": {
    "type": "generated-index",
    "description": "Documentation for Fundamental UI widgets"
  }
}



================================================
File: feed/Flutter/UI/Fundamental/Extras/appbar.md
================================================
---
sidebar_position: 3
title: LMFeedAppBar
---

# LMFeedAppBar

`LMFeedAppBar` is a highly customizable widget designed for displaying app bars within the Flutter UI library. It supports various configurations, including leading and trailing widgets, titles, back button callbacks, and styling options.

<br></br>

<p align="center">
  <img src="/img/flutter/ui/LMFeedAppBar.webp" alt="LMFeedAppbar"></img>
</p>

The `LMFeedAppBar` widget provides a flexible app bar implementation that can be tailored to meet the specific needs of your application. It allows you to customize the appearance and behavior of the app bar, including the background color, border, shadow, padding, and more.

## Properties

- `leading` (Widget)

An optional widget to be displayed at the leading edge of the app bar, typically used for displaying a back button or other navigation controls.

- `trailing` (List<`Widget`>)

An optional list of widgets to be displayed at the trailing edge of the app bar, typically used for displaying action buttons or other controls.

- `title` (Widget)

An optional widget to be displayed as the title of the app bar.

- `backButtonCallback` (Function)

An optional callback function that is invoked when the back button is pressed. If not provided, the default behavior is to navigate back in the app's navigation stack.

- `style` (LMFeedAppBarStyle)

An optional style class that allows customization of the app bar's appearance, such as background color, border, shadow, padding, and more.

## Styling

The `LMFeedAppBarStyle` class provides a way to define the visual style of the app bar. It includes properties for background color, height, width, border, padding, margin, shadow, and title alignment.

### Customization variables

| Property          | Type              | Description                        | Required | Default                                               |
| ----------------- | ----------------- | ---------------------------------- | -------- | ----------------------------------------------------- |
| `backgroundColor` | Color             | Background color of the app bar    |          |                                                       |
| `height`          | double            | Height of the app bar              |          |                                                       |
| `width`           | double            | Width of the app bar               |          |                                                       |
| `border`          | Border            | Border of the app bar              |          |                                                       |
| `padding`         | EdgeInsets        | Padding of the app bar             |          | EdgeInsets.symmetric(horizontal: 12.0, vertical: 4.0) |
| `margin`          | EdgeInsets        | Margin of the app bar              |          | EdgeInsets.zero                                       |
| `shadow`          | List\<BoxShadow\> | Shadow of the app bar              |          |                                                       |
| `centerTitle`     | bool              | Whether to center the title or not |          | false                                                 |

## Usage Example

```dart
LMFeedAppBar(
  leading: LMFeedButton(
    style: LMFeedButtonStyle(
      icon: LMFeedIcon(
        type: LMFeedIconType.icon,
        icon: Icons.menu,
      ),
    ),
    onTap: () {
      // Handle menu button tap
    },
  ),
  title: LMFeedText(
    text: 'My App',
    style: LMFeedTextStyle(
      textStyle: TextStyle(
        fontWeight: FontWeight.bold,
        fontSize: 18,
      ),
    ),
  ),
  trailing: [
    LMFeedButton(
      style: LMFeedButtonStyle(
        icon: LMFeedIcon(
          type: LMFeedIconType.icon,
          icon: Icons.search,
        ),
      ),
      onTap: () {
        // Handle search button tap
      },
    ),
  ],
  style: LMFeedAppBarStyle(
    backgroundColor: Colors.blue,
    height: 56,
    padding: const EdgeInsets.symmetric(horizontal: 16),
    shadow: [
      BoxShadow(
        color: Colors.grey.withOpacity(0.5),
        spreadRadius: 2,
        blurRadius: 4,
        offset: const Offset(0, 2),
      ),
    ],
  ),
),
```

This example creates an `LMFeedAppBar` with a leading menu button, a title "My App", and a trailing search button. The app bar is styled with a blue background color, a height of 56 pixels, horizontal padding of 16 pixels, and a drop shadow. When the menu button is tapped, it triggers the `onTap` callback function, allowing you to handle the menu action.



================================================
File: feed/Flutter/UI/Fundamental/Extras/floating_button.md
================================================
---
sidebar_position: 4
title: LMFeedFloatingActionButton
---

# LMFeedFloatingActionButton

`LMFeedFloatingActionButton` is a customizable widget designed for displaying a floating action button within the Flutter UI library. It supports both collapsed and expanded states, allowing for the display of text alongside the button icon in the expanded state.

<br></br>

<p align="center">
  <img src="/img/flutter/ui/LMFeedFloatingActionButton.webp" alt="LMFeedFloatingActionButton"></img>
</p>

The `LMFeedFloatingActionButton` widget provides a flexible and configurable floating action button that can be used in various parts of your application. It allows you to customize the appearance and behavior of the button, including its background color, icon, and animation properties.

## Properties

- `isCollapsed` (bool)

A boolean value that determines whether the floating action button should be displayed in a collapsed or expanded state. When collapsed, only the icon is shown. When expanded, both the icon and text are displayed.

- `text` (String)

An optional string representing the text to be displayed alongside the button icon in the expanded state.

- `onTap` (VoidCallback)

An optional callback function that is invoked when the floating action button is tapped.

## Styling

The `LMFeedFloatingActionButtonStyle` class provides a way to define the visual style and behavior of the floating action button. It includes properties for background color, icon, collapsed and expanded dimensions, text visibility, and animation properties.

### Customization variables

| Property            | Type       | Description                                                    | Required | Default |
| ------------------- | ---------- | -------------------------------------------------------------- | -------- | ------- |
| backgroundColor     | Color      | Background color of the floating action button                 |          |         |
| collapsedHeight     | double     | Height of the button in the collapsed state                    |          |         |
| collapsedWidth      | double     | Width of the button in the collapsed state                     |          |         |
| expandedHeight      | double     | Height of the button in the expanded state                     |          |         |
| expandedWidth       | double     | Width of the button in the expanded state                      |          |         |
| icon                | LMFeedIcon | Icon to be displayed in the floating action button             |          |         |
| showTextOnCollapsed | bool       | Whether to show text when the button is in the collapsed state |          |         |
| showTextOnExpanded  | bool       | Whether to show text when the button is in the expanded state  |          |         |
| animationDuration   | Duration   | Duration of the animation when transitioning between states    |          |         |
| animationCurve      | Curve      | Curve to be used for the animation when transitioning          |          |         |

## Usage Example

```dart
LMFeedFloatingActionButton(
  isCollapsed: false,
  text: 'Create Post',
  onTap: () {
    // Handle button tap
  },
  style: LMFeedFloatingActionButtonStyle(
    backgroundColor: Colors.blue,
    icon: LMFeedIcon(
      type: LMFeedIconType.icon,
      icon: Icons.edit,
      style: LMFeedIconStyle(
        color: Colors.white,
      ),
    ),
    expandedHeight: 48,
    expandedWidth: 200,
    showTextOnExpanded: true,
  ),
),
```

This example creates an expanded `LMFeedFloatingActionButton` with the text "Create Post" and an edit icon. The button is styled with a blue background color, and the icon is displayed in white. The expanded height and width are set to 48 and 200, respectively, and the text is shown in the expanded state. When tapped, it triggers the `onTap` callback function, allowing you to handle the button's action.



================================================
File: feed/Flutter/UI/Fundamental/Extras/loader.md
================================================
---
sidebar_position: 1
title: LMFeedLoader
---

# LMFeedLoader

`LMFeedLoader` is a simple widget designed to display a circular progress indicator within the Flutter UI library. It provides a loading indicator that can be customized with different colors and styles.

<br></br>

<p align="center">
  <img src="/img/flutter/ui/LMFeedLoader.webp" alt="LMFeedLoader" width="300"></img>
</p>

The `LMFeedLoader` widget is used to indicate that some process or data loading is in progress. It can be easily integrated into your application's UI to provide visual feedback to the user during loading operations.

## Properties

- `isPrimary` (bool)

A boolean value that determines whether the loader should use the primary color defined in the `LMFeedTheme` or a fallback color (white). If set to `true`, the loader will use the primary color; otherwise, it will use the fallback color.

- `color` (Color)

An optional `Color` value that overrides the default color of the loader. If provided, this color will be used instead of the primary or fallback color.

## Styling

The `LMFeedLoader` widget does not have a dedicated styling class. However, you can customize the appearance of the loader by providing the desired `color` or setting the `isPrimary` property to choose between the primary color or a fallback color.

## Usage Example

```dart
// Using the primary color
LMFeedLoader(
  isPrimary: true,
),

// Using a custom color
LMFeedLoader(
  isPrimary: false,
  color: Colors.blue,
),
```

In the first example, the `LMFeedLoader` is displayed using the primary color defined in the `LMFeedTheme`. In the second example, a custom blue color is used for the loader.



================================================
File: feed/Flutter/UI/Fundamental/Extras/profile.md
================================================
---
sidebar_position: 2
title: LMFeedProfilePicture
---

# LMFeedProfilePicture

`LMFeedProfilePicture` is a customizable widget designed for displaying profile pictures within the Flutter UI library. It supports displaying images from a URL or displaying initials as a fallback when an image is not available. Additionally, it provides various styling options and tap functionality.

<br></br>

<p align="center">
  <img src="/img/flutter/ui/LMFeedProfilePicture.webp" alt="LMFeedProfilePicture" width="200"></img>
</p>

The `LMFeedProfilePicture` widget offers a flexible way to display profile pictures or initials in a consistent and visually appealing manner throughout your application. It allows you to customize the appearance of the profile picture, including size, border radius, border width, background color, and text style for initials.

## Properties

- `imageUrl` (String)

An optional URL string representing the image to be displayed as the profile picture.

- `fallbackText` (String)

A required string that will be used to display initials as a fallback when an image is not available.

- `onTap` (Function())

An optional callback function that is invoked when the profile picture is tapped.

- `style` (LMFeedProfilePictureStyle)

An optional style class that allows customization of the profile picture's appearance, such as size, border radius, border width, background color, and text style for initials.

## Styling

The `LMFeedProfilePictureStyle` class provides a way to define the visual style of the profile picture. It includes properties for size, border radius, border width, background color, box shape, and text style for initials.

### Customization variables

| Property            | Type            | Description                                            | Required | Default         |
| ------------------- | --------------- | ------------------------------------------------------ | -------- | --------------- |
| `size`              | double          | Size of the profile picture (height and width)         |          | 48.0            |
| `fallbackTextStyle` | LMFeedTextStyle | Text style for initials when an image is not available |          |                 |
| `borderRadius`      | double          | Border radius of the profile picture                   |          | 24.0            |
| `border`            | double          | Border width of the profile picture                    |          |                 |
| `backgroundColor`   | Color           | Background color of the profile picture                |          |                 |
| `boxShape`          | BoxShape        | Shape of the profile picture container                 |          | BoxShape.circle |

## Usage Example

```dart
LMFeedProfilePicture(
  imageUrl: 'https://example.com/profile.jpg',
  fallbackText: 'John Doe',
  onTap: () {
    // Handle profile picture tap
  },
  style: LMFeedProfilePictureStyle(
    size: 64,
    borderRadius: 32,
    border: 2,
    backgroundColor: Colors.grey.shade300,
    fallbackTextStyle: LMFeedTextStyle(
      textStyle: TextStyle(
        color: Colors.black,
        fontSize: 32,
        fontWeight: FontWeight.bold,
      ),
    ),
  ),
),
```

This example creates an `LMFeedProfilePicture` widget that displays an image from the provided URL. If the image is not available, it will display the initials "JD" (for "John Doe") as a fallback. The profile picture is styled with a size of 64 pixels, a border radius of 32 pixels, a border width of 2 pixels, and a light grey background color. The initials are displayed with a black color, a font size of 32 pixels, and bold font weight. When tapped, it triggers the `onTap` callback function, allowing you to handle the profile picture's action.



================================================
File: feed/Flutter/UI/Fundamental/Tiles/__category__.json
================================================
{
  "label": "Tiles",
  "position": 8,
  "link": {
    "type": "generated-index",
    "description": "Documentation for Fundamental UI widgets"
  }
}



================================================
File: feed/Flutter/UI/Fundamental/Tiles/tile.md
================================================
---
sidebar_position: 1
title: LMFeedTile
---

# LMFeedTile

`LMFeedTile` is a customizable widget designed for displaying tiles within the Flutter UI library. It provides a flexible layout for displaying various content elements, such as leading, title, subtitle, and trailing widgets, along with support for tap actions and styling options.

<br></br>

<p align="center">
  <img src="/img/flutter/ui/LMFeedTile.webp" alt="LMFeedTile"></img>
</p>

The `LMFeedTile` widget is a versatile component that can be used to create list items, cards, or any other type of tile-based UI element. It allows you to customize the appearance and behavior of the tile, including background color, border, border radius, padding, and more.

## Properties

- `onTap` (VoidCallback)

An optional callback function that is invoked when the tile is tapped.

- `style` (LMFeedTileStyle)

An optional style class that allows customization of the tile's appearance, such as background color, border, border radius, padding, and more.

- `leading` (Widget)

An optional widget to be displayed at the leading edge of the tile, typically used for displaying an icon, image, or other content.

- `title` (Widget)

An optional widget to be displayed as the title of the tile.

- `subtitle` (Widget)

An optional widget to be displayed as the subtitle of the tile.

- `trailing` (Widget)

An optional widget to be displayed at the trailing edge of the tile, typically used for displaying action buttons or other controls.

## Styling

The `LMFeedTileStyle` class provides a way to define the visual style of the tile. It includes properties for background color, border, border radius, main axis alignment, padding, height, width, and margin.

### Customization variables

| Property            | Type              | Description                                     | Required | Default                 |
| ------------------- | ----------------- | ----------------------------------------------- | -------- | ----------------------- |
| `backgroundColor`   | Color             | Background color of the tile                    |          |                         |
| `border`            | Border            | Border of the tile                              |          |                         |
| `borderRadius`      | double            | Border radius of the tile                       |          |                         |
| `mainAxisAlignment` | MainAxisAlignment | Main axis alignment for the row inside the tile |          | MainAxisAlignment.start |
| `padding`           | EdgeInsets        | Padding from exterior bounds (borders)          |          | EdgeInsets.all(12)      |
| `height`            | double            | Height of the tile                              |          |                         |
| `width`             | double            | Width of the tile                               |          | double.infinity         |
| `margin`            | double            | Margin between tiles                            |          | 12.0                    |

## Usage Example

```dart
LMFeedTile(
  onTap: () {
    // Handle tile tap
  },
  style: LMFeedTileStyle(
    backgroundColor: Colors.grey.withOpacity(0.2),
    borderRadius: 8,
    padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
  ),
  leading: LMFeedIcon(
    type: LMFeedIconType.icon,
    icon: Icons.account_circle,
    style: LMFeedIconStyle(
      size: 48,
      color: Colors.blue,
    ),
  ),
  title: LMFeedText(
    text: 'John Doe',
    style: LMFeedTextStyle(
      textStyle: TextStyle(
        fontWeight: FontWeight.bold,
        fontSize: 16,
      ),
    ),
  ),
  subtitle: LMFeedText(
    text: 'Software Engineer',
    style: LMFeedTextStyle(
      textStyle: TextStyle(
        color: Colors.grey,
        fontSize: 14,
      ),
    ),
  ),
  trailing: LMFeedButton(
    style: LMFeedButtonStyle(
      icon: LMFeedIcon(
        type: LMFeedIconType.icon,
        icon: Icons.chevron_right,
      ),
    ),
  ),
),
```

This example creates an `LMFeedTile` with a leading profile icon, a title displaying "John Doe", a subtitle displaying "Software Engineer", and a trailing chevron icon button. The tile is styled with a semi-transparent grey background color, a border radius of 8 pixels, and horizontal padding of 16 pixels. When tapped, it triggers the `onTap` callback function, allowing you to handle the tile's action.



================================================
File: feed/Flutter/UI/Fundamental/Tiles/user_tile.md
================================================
---
sidebar_position: 2
title: LMFeedUserTile
---

# LMFeedUserTile

`LMFeedUserTile` is a customised widget that extends the `LMFeedTile` widget, designed for displaying user information within the Flutter UI library. It provides a consistent and customizable layout for displaying user details such as profile picture, name, and subtitle (e.g., username or other information).

<br></br>

<p align="center">
  <img src="/img/flutter/ui/LMFeedUserTile.webp" alt="LMFeedUserTile"></img>
</p>

The `LMFeedUserTile` widget leverages the `LMFeedTile` widget to create a user-centric tile component. It automatically renders the user's profile picture, name, and an optional subtitle based on the provided `LMUserViewData` object. Additionally, it allows for customization of the tile's appearance and behavior through various styling options and callbacks.

## Properties

- `user` (LMUserViewData)

A required `LMUserViewData` object that contains the user's information, such as their name, image URL, and other relevant data.

- `onTap` (VoidCallback)

An optional callback function that is invoked when the user tile is tapped.

- `style` (LMFeedTileStyle)

An optional style class that allows customization of the tile's appearance, such as background color, border, border radius, padding, and more.

- `title` (Widget)

An optional widget to be displayed as the title of the user tile. If not provided, the user's name from the `LMUserViewData` object will be displayed.

- `subtitle` (Widget)

An optional widget to be displayed as the subtitle of the user tile. If not provided, the user's username (derived from their name) will be displayed.

## Styling

The `LMFeedUserTile` widget inherits the styling capabilities from the `LMFeedTile` widget. You can customize the appearance of the user tile by providing a `LMFeedTileStyle` object to the `style` property.

Additionally, the `LMFeedUserTile` widget applies its own default styling to the profile picture and text components based on the current `LMFeedThemeData`.

## Usage Example

```dart
LMFeedUserTile(
  user: LMUserViewData(
    name: 'John Doe',
    imageUrl: 'https://example.com/profile.jpg',
    // Additional user data
  ),
  onTap: () {
    // Handle user tile tap
  },
  style: LMFeedTileStyle(
    backgroundColor: Colors.grey.shade200,
    borderRadius: 8,
  ),
),
```

This example creates an `LMFeedUserTile` widget with the user's name and profile picture. The tile is styled with a light grey background color and a border radius of 8 pixels. When tapped, it triggers the `onTap` callback function, allowing you to handle the user tile's action.



================================================
File: feed/Flutter/UI/Media/_category_.json
================================================
{
  "label": "Media",
  "position": 4,
  "link": {
    "type": "generated-index",
    "description": "Flutter Documentation for Media widgets of LikeMinds Feed UI SDK"
  }
}



================================================
File: feed/Flutter/UI/Media/carousel.md
================================================
---
sidebar_position: 13
title: LMFeedCarousel
---

# LMFeedCarousel

`LMFeedCarousel` is a widget that displays a carousel of media items (images or videos) within a feed post. It allows users to swipe through multiple media attachments associated with a post. The widget provides customization options for styling the carousel and handling media-related events.

<br></br>

<p align="center">
  <img src="/img/flutter/ui/LMFeedCarousel.webp" alt="LMFeedCarousel" width="300"></img>
</p>

The `LMFeedCarousel` widget is part of the `likeminds_feed_flutter_ui` package. It is designed to be used within an `LMFeedPostWidget` to display a carousel of media items associated with a post.

## Properties

- `attachments` (`List<LMAttachmentViewData>`) - Required

The list of media attachments to be displayed in the carousel. This is a **required** parameter.

- `postId` (`String`) - Required

The unique identifier of the post associated with the carousel. This is a **required** parameter.

- `imageItem` (`LMFeedImage`)

A custom image widget to be used for displaying image attachments in the carousel. This is an optional parameter.

- `videoItem` (`LMFeedVideo`)

A custom video widget to be used for displaying video attachments in the carousel. This is an optional parameter.

- `imageBuilder` (`Widget Function(LMFeedImage)`)

A builder function that takes an `LMFeedImage` widget and returns a custom widget for displaying image attachments in the carousel. This is an optional parameter.

- `videoBuilder` (`Widget Function(LMFeedVideo)`)

A builder function that takes an `LMFeedVideo` widget and returns a custom widget for displaying video attachments in the carousel. This is an optional parameter.

- `videoStyle` (`LMFeedPostVideoStyle`)

The style configuration for video attachments in the carousel. This is an optional parameter.

- `imageStyle` (`LMFeedPostImageStyle`)

The style configuration for image attachments in the carousel. This is an optional parameter.

- `style` (`LMFeedPostCarouselStyle`)

The style configuration for the carousel itself. It allows customization of the carousel's appearance and behavior. This is an optional parameter.

- `onError` (`Function(String, StackTrace)`)

A callback function that is invoked when an error occurs while loading or displaying media attachments in the carousel. It takes the error message and stack trace as parameters. This is an optional parameter.

- `onMediaTap` (`VoidCallback`)

A callback function that is invoked when a media item in the carousel is tapped. This is an optional parameter.

## Styling

The `LMFeedPostCarouselStyle` class allows you to customize the appearance and behavior of the `LMFeedCarousel` widget.

### Customization variables

| Property                 | Type              | Description                                        | Required | Default |
| ------------------------ | ----------------- | -------------------------------------------------- | -------- | ------- |
| `carouselOptions`        | CarouselOptions   | The options for configuring the carousel behavior. |          |         |
| `activeIndicatorColor`   | Color             | The color of the active indicator dot.             |          |         |
| `inActiveIndicatorColor` | Color             | The color of the inactive indicator dots.          |          |         |
| `indicatorHeight`        | double            | The height of the indicator dots.                  |          |         |
| `indicatorWidth`         | double            | The width of the indicator dots.                   |          |         |
| `indicatorMargin`        | EdgeInsets        | The margin around the indicator dots.              |          |         |
| `indicatorPadding`       | EdgeInsets        | The padding within the indicator dots.             |          |         |
| `indicatorBorderRadius`  | BorderRadius      | The border radius of the indicator dots.           |          |         |
| `showIndicator`          | bool              | Whether to show the indicator dots.                |          |         |
| `carouselHeight`         | double            | The height of the carousel container.              |          |         |
| `carouselWidth`          | double            | The width of the carousel container.               |          |         |
| `carouselBorderRadius`   | BorderRadius      | The border radius of the carousel container.       |          |         |
| `carouselBorder`         | Border            | The border of the carousel container.              |          |         |
| `carouselMargin`         | EdgeInsets        | The margin around the carousel container.          |          |         |
| `carouselPadding`        | EdgeInsets        | The padding within the carousel container.         |          |         |
| `carouselShadow`         | List\<BoxShadow\> | The box shadow for the carousel container.         |          |         |

You can create an instance of `LMFeedPostCarouselStyle` and pass it to the `LMFeedCarousel` widget to customize its appearance and behavior.

## Usage Example

```dart
LMFeedCarousel(
  attachments: [
    LMAttachmentViewData(
      attachmentType: 1,
      attachmentMeta: LMAttachmentMeta(
        url: 'your-attachment-url',
      ),
    ),
    LMAttachmentViewData(
      attachmentType: 2,
      attachmentMeta: LMAttachmentMeta(
        url: 'your-attachment-url',
      ),
    ),
    LMAttachmentViewData(
      attachmentType: 1,
      attachmentMeta: LMAttachmentMeta(
        url: 'your-attachment-url',
      ),
    ),
  ],
  postId: 'your-post-id',
  imageStyle: LMFeedPostImageStyle(
    // Customize image style
  ),
  videoStyle: LMFeedPostVideoStyle(
    // Customize video style
  ),
  style: LMFeedPostCarouselStyle(
    carouselOptions: CarouselOptions(
      autoPlay: true,
      enableInfiniteScroll: false,
      viewportFraction: 1.0,
    ),
    activeIndicatorColor: Colors.blue,
    inActiveIndicatorColor: Colors.grey,
    indicatorHeight: 10,
    indicatorWidth: 10,
    showIndicator: true,
    carouselHeight: 300,
    carouselBorderRadius: BorderRadius.circular(8),
    carouselMargin: EdgeInsets.symmetric(vertical: 16),
    carouselPadding: EdgeInsets.all(8),
    carouselShadow: [
      BoxShadow(
        color: Colors.black.withOpacity(0.2),
        blurRadius: 4,
        offset: Offset(0, 2),
      ),
    ],
  ),
  onError: (error, stackTrace) {
    // Handle media loading error
    print('Error loading media: $error');
  },
  onMediaTap: () {
    // Handle media tap
    print('Media item tapped');
  },
)
```

In this example, an `LMFeedCarousel` widget is created with a list of `attachments` containing both image and video attachments. The `postId` is provided to identify the associated post. The `imageStyle` and `videoStyle` properties are used to customize the appearance of image and video attachments within the carousel. The `style` property is used to customize the appearance and behavior of the carousel itself, specifying options such as auto-play, indicator colors, indicator size, carousel height, border radius, margin, padding, and box shadow. The `onError` callback is provided to handle any errors that occur while loading media attachments, and the `onMediaTap` callback is invoked when a media item in the carousel is tapped.



================================================
File: feed/Flutter/UI/Media/document.md
================================================
---
sidebar_position: 3
title: LMFeedDocument
---

# LMFeedDocument

`LMFeedDocument` is a widget that displays a document preview within a feed post. It shows the document's title, file type, and size. The widget provides customization options for styling the document preview and handling tap events.

<br></br>

<p align="center">
  <img src="/img/flutter/ui/LMFeedDocument.webp" alt="LMFeedDocument" width="400"></img>
</p>

The `LMFeedDocument` widget is part of the `likeminds_feed_flutter_ui` package. It is designed to be used within an `LMFeedPostWidget` to display document previews associated with a post.

## Properties

- `onTap` (`Function()`)

A callback function that is invoked when the document preview is tapped. This is an optional parameter.

- `documentFile` (`File`)

The file object representing the document. Either `documentFile` or `documentUrl` must be provided.

- `documentUrl` (`String`)

The URL of the document. Either `documentFile` or `documentUrl` must be provided.

- `type` (`String`)

The file type of the document. This is an optional parameter with a default value of `'pdf'`.

- `size` (`String`)

The size of the document. This is an optional parameter.

- `title` (`LMFeedText`)

A custom title text widget for the document preview. This is an optional parameter.

- `subtitle` (`LMFeedText`)

A custom subtitle text widget for the document preview. This is an optional parameter.

- `onRemove` (`Function`)

A callback function that is invoked when the remove button is tapped. This is an optional parameter.

- `style` (`LMFeedPostDocumentStyle`)

The style configuration for the document preview. It allows customization of the document preview's appearance and behavior. This is an optional parameter.

## Styling

The `LMFeedPostDocumentStyle` class allows you to customize the appearance and behavior of the `LMFeedDocument` widget.

### Customization variables

| Property          | Type            | Description                                                       | Required | Default               |
| ----------------- | --------------- | ----------------------------------------------------------------- | -------- | --------------------- |
| `height`          | double          | The height of the document preview container.                     |          | 72                    |
| `width`           | double          | The width of the document preview container.                      |          | Screen width - 40     |
| `borderRadius`    | double          | The border radius of the document preview container.              |          | 8                     |
| `borderSize`      | double          | The border size of the document preview container.                |          | 1                     |
| `borderColor`     | Color           | The border color of the document preview container.               |          | Colors.grey           |
| `textColor`       | Color           | The color of the text in the document preview.                    |          | Colors.grey.shade700  |
| `documentIcon`    | Widget          | The icon widget representing the document type.                   |          | PDF icon              |
| `removeIcon`      | LMFeedIcon      | The icon widget for the remove button.                            |          | Close icon            |
| `showBorder`      | bool            | Whether to show the border around the document preview container. |          | true                  |
| `backgroundColor` | Color           | The background color of the document preview container.           |          |                       |
| `titleStyle`      | LMFeedTextStyle | The text style for the document title.                            |          |                       |
| `subtitleStyle`   | LMFeedTextStyle | The text style for the document subtitle.                         |          |                       |
| `padding`         | EdgeInsets      | The padding of the document preview container.                    |          | 16                    |
| `margin`          | EdgeInsets      | The margin of the document preview container.                     |          | Vertical padding of 8 |

You can create an instance of `LMFeedPostDocumentStyle` and pass it to the `LMFeedDocument` widget to customize its appearance and behavior.

## Usage Example

```dart
LMFeedDocument(
  documentUrl: 'https://example.com/document.pdf',
  type: 'pdf',
  size: '2.5 MB',
  onTap: () {
    // Handle document tap
  },
  title: LMFeedText(
    text: 'Example Document',
    style: LMFeedTextStyle(
      textStyle: TextStyle(
        color: Colors.black,
        fontSize: 16,
        fontWeight: FontWeight.bold,
      ),
    ),
  ),
  subtitle: LMFeedText(
    text: 'PDF · 2.5 MB',
    style: LMFeedTextStyle(
      textStyle: TextStyle(
        color: Colors.grey,
        fontSize: 14,
      ),
    ),
  ),
  onRemove: () {
    // Handle remove button tap
  },
  style: LMFeedPostDocumentStyle(
    height: 80,
    width: 300,
    borderRadius: 12,
    borderSize: 2,
    borderColor: Colors.blue,
    textColor: Colors.black,
    documentIcon: Icon(Icons.picture_as_pdf, color: Colors.red),
    removeIcon: LMFeedIcon(
      type: LMFeedIconType.icon,
      icon: Icons.delete,
      style: LMFeedIconStyle(color: Colors.red),
    ),
    backgroundColor: Colors.white,
    titleStyle: LMFeedTextStyle(
      textStyle: TextStyle(
        color: Colors.black,
        fontSize: 16,
        fontWeight: FontWeight.bold,
      ),
    ),
    subtitleStyle: LMFeedTextStyle(
      textStyle: TextStyle(
        color: Colors.grey,
        fontSize: 14,
      ),
    ),
    padding: EdgeInsets.all(12),
    margin: EdgeInsets.symmetric(vertical: 8),
  ),
)
```

In this example, an `LMFeedDocument` widget is created with the `documentUrl` property set to the URL of the document. The `type` and `size` properties specify the file type and size of the document. The `onTap` callback is provided to handle taps on the document preview. Custom `title` and `subtitle` widgets are used to display the document's title and subtitle. The `onRemove` callback is invoked when the remove button is tapped. The appearance of the document preview is customized using the `LMFeedPostDocumentStyle` class, specifying various properties such as height, width, border radius, border size, border color, text color, document icon, remove icon, background color, title style, subtitle style, padding, and margin.



================================================
File: feed/Flutter/UI/Media/image.md
================================================
---
sidebar_position: 1
title: LMFeedImage
---

# LMFeedImage

`LMFeedImage` is a widget that displays an image within a feed post. It supports loading images from a URL or a local file. The widget provides customization options for styling the image, handling errors, and responding to tap events.

<br></br>

<p align="center">
  <img src="/img/flutter/ui/LMFeedImage.webp" alt="LMFeedImage" width="300"></img>
</p>

The `LMFeedImage` widget is part of the `likeminds_feed_flutter_ui` package. It is designed to be used within an `LMFeedPostWidget` to display images associated with a post.

## Properties

- `imageUrl` (`String`)

The URL of the image to be displayed. Either `imageUrl` or `imageFile` must be provided.

- `imageFile` (`File`)

The local file representing the image to be displayed. Either `imageUrl` or `imageFile` must be provided.

- `onError` (`Function(String, StackTrace)`)

A callback function that is invoked when an error occurs while loading the image. It takes the error message and stack trace as parameters. This is an optional parameter.

- `style` (`LMFeedPostImageStyle`)

The style configuration for the image. It allows customization of the image's appearance and behavior. This is an optional parameter.

- `onMediaTap` (`VoidCallback`)

A callback function that is invoked when the image is tapped. This is an optional parameter.

## Styling

The `LMFeedPostImageStyle` class allows you to customize the appearance and behavior of the `LMFeedImage` widget.

### Customization variables

| Property        | Type         | Description                                                    | Required | Default |
| --------------- | ------------ | -------------------------------------------------------------- | -------- | ------- |
| `height`        | double       | The height of the image.                                       |          |         |
| `width`         | double       | The width of the image.                                        |          |         |
| `aspectRatio`   | double       | The aspect ratio of the image.                                 |          |         |
| `borderRadius`  | BorderRadius | The border radius of the image.                                |          |         |
| `borderColor`   | Color        | The border color of the image.                                 |          |         |
| `loaderWidget`  | Widget       | The widget to be displayed while the image is loading.         |          |         |
| `errorWidget`   | Widget       | The widget to be displayed when an error occurs.               |          |         |
| `shimmerWidget` | Widget       | The shimmer widget to be displayed while the image is loading. |          |         |
| `boxFit`        | BoxFit       | How the image should be inscribed into the layout bounds.      |          |         |

You can create an instance of `LMFeedPostImageStyle` and pass it to the `LMFeedImage` widget to customize its appearance and behavior.

## Usage Example

```dart
LMFeedImage(
  imageUrl: 'https://example.com/image.jpg',
  onError: (error, stackTrace) {
    // Handle error
    print('Error loading image: $error');
  },
  style: LMFeedPostImageStyle(
    height: 200,
    width: double.infinity,
    borderRadius: BorderRadius.circular(8),
    borderColor: Colors.grey,
    loaderWidget: CircularProgressIndicator(),
    errorWidget: Icon(Icons.error),
    shimmerWidget: LMPostMediaShimmer(),
    boxFit: BoxFit.cover,
  ),
  onMediaTap: () {
    // Handle image tap
    print('Image tapped');
  },
)
```

In this example, an `LMFeedImage` widget is created with the `imageUrl` property set to the URL of the image to be displayed. The `onError` callback is provided to handle any errors that occur while loading the image. The appearance and behavior of the image are customized using the `LMFeedPostImageStyle` class, specifying the height, width, border radius, border color, loader widget, error widget, shimmer widget, and box fit. The `onMediaTap` callback is used to handle taps on the image.



================================================
File: feed/Flutter/UI/Media/link.md
================================================
---
sidebar_position: 4
title: LMFeedLinkPreview
---

# LMFeedLinkPreview

`LMFeedLinkPreview` is a widget that displays a preview of a link within a feed post. It shows the link's heading, description, URL, and an associated image. The widget provides customization options for styling the link preview and handling tap events.

<br></br>

<p align="center">
  <img src="/img/flutter/ui/LMFeedLinkPreview.webp" alt="LMFeedLinkPreview" width="300"></img>
</p>

The `LMFeedLinkPreview` widget is part of the `likeminds_feed_flutter_ui` package. It is designed to be used within an `LMFeedPostWidget` to display link previews associated with a post.

## Properties

- `linkModel` (`LMMediaModel`)

The data model containing the link preview information. This is an optional parameter.

- `attachment` (`LMAttachmentViewData`)

The attachment data associated with the link preview. This is an optional parameter.

- `onTap` (`VoidCallback`)

A callback function that is invoked when the link preview is tapped. This is an optional parameter.

- `imageUrl` (`String`)

The URL of the image to be displayed in the link preview. This is an optional parameter.

- `title` (`LMFeedText`)

A custom title text widget for the link preview. This is an optional parameter.

- `subtitle` (`LMFeedText`)

A custom subtitle text widget for the link preview. This is an optional parameter.

- `url` (`LMFeedText`)

A custom URL text widget for the link preview. This is an optional parameter.

- `onError` (`Function(String, StackTrace)`)

A callback function that is invoked when an error occurs while loading the link preview. It takes the error message and stack trace as parameters. This is an optional parameter.

- `style` (`LMFeedPostLinkPreviewStyle`)

The style configuration for the link preview. It allows customization of the link preview's appearance and behavior. This is an optional parameter.

## Styling

The `LMFeedPostLinkPreviewStyle` class allows you to customize the appearance and behavior of the `LMFeedLinkPreview` widget.

### Customization variables

| Property          | Type            | Description                                         | Required | Default      |
| ----------------- | --------------- | --------------------------------------------------- | -------- | ------------ |
| `width`           | double          | The width of the link preview container.            |          | Screen width |
| `height`          | double          | The height of the link preview container.           |          |              |
| `imageHeight`     | double          | The height of the image in the link preview.        |          |              |
| `backgroundColor` | Color           | The background color of the link preview container. |          |              |
| `borderRadius`    | BorderRadius    | The border radius of the link preview container.    |          | 8.0          |
| `padding`         | EdgeInsets      | The padding of the link preview container.          |          |              |
| `margin`          | EdgeInsets      | The margin of the link preview container.           |          |              |
| `showLinkUrl`     | bool            | Whether to show the link URL in the preview.        |          | false        |
| `border`          | Border          | The border of the link preview container.           |          |              |
| `errorWidget`     | Widget          | The widget to be displayed when an error occurs.    |          |              |
| `titleStyle`      | LMFeedTextStyle | The text style for the link preview title.          |          |              |
| `subtitleStyle`   | LMFeedTextStyle | The text style for the link preview subtitle.       |          |              |
| `linkStyle`       | LMFeedTextStyle | The text style for the link URL.                    |          |              |

You can create an instance of `LMFeedPostLinkPreviewStyle` and pass it to the `LMFeedLinkPreview` widget to customize its appearance and behavior.

## Usage Example

```dart
LMFeedLinkPreview(
  linkModel: LMMediaModel(
    ogTags: OgTags(
      title: 'Example Link',
      description: 'This is an example link preview',
      image: 'https://example.com/image.jpg',
      url: 'https://example.com',
    ),
  ),
  onTap: () {
    // Handle link preview tap
  },
  style: LMFeedPostLinkPreviewStyle(
    width: 300,
    height: 200,
    backgroundColor: Colors.white,
    borderRadius: BorderRadius.circular(12),
    padding: EdgeInsets.all(16),
    showLinkUrl: true,
    titleStyle: LMFeedTextStyle(
      textStyle: TextStyle(
        color: Colors.black,
        fontSize: 18,
        fontWeight: FontWeight.bold,
      ),
    ),
    subtitleStyle: LMFeedTextStyle(
      textStyle: TextStyle(
        color: Colors.grey,
        fontSize: 14,
      ),
    ),
    linkStyle: LMFeedTextStyle(
      textStyle: TextStyle(
        color: Colors.blue,
        fontSize: 12,
      ),
    ),
  ),
)
```

In this example, an `LMFeedLinkPreview` widget is created with the `linkModel` property set to an instance of `LMMediaModel` containing the link preview information. The `onTap` callback is provided to handle taps on the link preview. The appearance of the link preview is customized using the `LMFeedPostLinkPreviewStyle` class, specifying the width, height, background color, border radius, padding, and whether to show the link URL. The title, subtitle, and link styles are also customized using the `LMFeedTextStyle` class.



================================================
File: feed/Flutter/UI/Media/poll.md
================================================
---
sidebar_position: 5
title: LMFeedPoll
---

# LMFeedPoll

`LMFeedPoll` is a widget that displays a poll within a feed post. The widget provides customization options for styling the poll, handling errors, and responding to tap events.


<p align="center">
  <img src="/img/flutter/ui/LMFeedPoll.webp" alt="LMFeedImage" width="300"></img>
</p>

The `LMFeedPoll` widget is part of the `likeminds_feed_flutter_ui` package. It is designed to be used within an `LMFeedPostWidget` to display poll associated with a post.

## Properties

- `attachmentMeta` (`LMAttachmentMetaViewData`)

  Poll Data. This is required parameter.

- `rebuildPollWidget` (`ValueNotifier<bool>?`)

  Used to rebuild the poll widget on user interaction. This is an optional parameter.

- `onCancel` (`VoidCallback?`)

  A callback function that is invoked when user tap on cancel button. This is an optional parameter.

- `onEdit` (`Function(LMAttachmentMetaViewData)?`)

  A callback function that is invoked when user tap on edit poll button. This is an optional parameter.

- `onEditVote` (`Function(LMAttachmentMetaViewData)?`)

  A callback function that is invoked when user tap on edit vote button. This is an optional parameter.

- `style` (`LMFeedPollStyle?`)

  The style configuration for the Poll. It allows customization of the poll's appearance and behavior. This is an optional parameter.

- `onOptionSelect` (`void Function(LMPollOptionViewData)?`)

  A callback function that is invoked when user tap on any option. This is an optional parameter.

- `showSubmitButton` (`bool`)

  A Boolean to show the submit button. This is an optional parameter with default value `false`

- `showEditVoteButton` (`bool`)

  A Boolean to show the edit vote button. This is an optional parameter with default value `false`

- `showAddOptionButton` (`bool`)

  A Boolean to show the edit vote button. This is an optional parameter with default value `false`

- `isVoteEditing` (`bool`)

  A Boolean to notify is vote editing. This is an optional parameter with default value `false`

- `showTick` (`bool Function(LMPollOptionViewData optionViewData)?`)

  A Boolean to show tick icon on option. This is an optional parameter.

- `timeLeft` (`String?`)

  Indicates time left for the poll to end. This is an optional parameter.

- `onAddOptionSubmit` (`void Function(String option)?`)

  A callback function that is invoked when a new option is added. This is an optional parameter.

- `onVoteClick` (`Function(LMPollOptionViewData)?`)

  A callback function that is invoked when user tap on vote text. This is an optional parameter.

- `selectedOption` (`List<String>`)

  List of selected option when submitting the poll votes. This is an optional parameter with default value `[]`

- `onSubmit` (`Function(List<String> selectedOption)?`)

  A callback function that is invoked when user tap submit button. This is an optional parameter.

- `onSubtextTap` (`VoidCallback?`)

  A callback function that is invoked when user tap subtext. This is an optional parameter.

- `pollSelectionText` (`String?`)

  Poll selection text. This is an optional parameter.

- `pollQuestionBuilder` (`Widget Function(BuildContext)?`)

  Builder for the poll question widget. This is an optional parameter.

- `pollActionBuilder` (`Widget Function(BuildContext)?`)

  Builder for the poll action widget. This is an optional parameter.

- `pollOptionBuilder` (`Widget Function(BuildContext)?`)

  Builder for the poll option widget. This is an optional parameter.

- `pollSelectionTextBuilder` (`Widget Function(BuildContext)?`)

  Builder for the poll selection text widget. This is an optional parameter.

- `addOptionButtonBuilder` (`LMFeedButtonBuilder?`)

  Builder for the add option button. This is an optional parameter.

- `submitButtonBuilder` (`LMFeedButtonBuilder?`)

  Builder for the submit button. This is an optional parameter.

- `subTextBuilder` (`Widget Function(BuildContext)?`)

  Builder for the subtext. This is an optional parameter.

- `onSameOptionAdded` (`VoidCallback?`)

  A callback function that is invoked when same option is added twice. This is an optional parameter.

- `isMultiChoicePoll` (`bool?`)

  A Boolean to show if the poll is multi choice. This is an optional parameter.

## Styling

The `LMFeedPollStyle` class allows you to customize the appearance and behavior of the `LMFeedPoll` widget.

### Customization variables

| Property                   | Type                   | Description                                    | Required |
| -------------------------- | ---------------------- | ---------------------------------------------- | -------- |
| `pollQuestionStyle`        | TextStyle?             | TextStyle for poll question text               |          |
| `pollQuestionExpandedText` | String?                | Expanded Text for poll question                |          |
| `pollInfoStyles`           | LMFeedTextStyle?       | Text Style for poll info text                  |          |
| `pollAnswerStyle`          | LMFeedTextStyle?       | Text Style for poll answer text                |          |
| `timeStampStyle`           | LMFeedTextStyle?       | Text Style for time stamp text                 |          |
| `percentageStyle`          | LMFeedTextStyle?       | Text Style for percentage text                 |          |
| `editPollOptionsStyles`    | LMFeedTextStyle?       | Text Style for edit poll options text          |          |
| `submitPollTextStyle`      | LMFeedTextStyle?       | Text Style for submit poll text                |          |
| `submitPollButtonStyle`    | LMFeedButtonStyle?     | LMFeedButtonStyle for submit poll button style |          |
| `pollOptionStyle`          | LMFeedPollOptionStyle? | LMPollOptionStyle for poll option style        |          |

You can create an instance of `LMFeedPollStyle` and pass it to the `LMFeedPoll` widget to customize its appearance and behavior.

The `LMFeedPollOptionStyle` class allows you to customize the appearance and behavior of the `LMFeedPollOption` widget.

| Property                        | Type             | Description                                  | Required |
| ------------------------------- | ---------------- | -------------------------------------------- | -------- |
| `pollOptionSelectedColor`       | Color?           | Color for poll option selected color         |          |
| `pollOptionOtherColor`          | Color?           | Color for poll option other color            |          |
| `pollOptionSelectedTickColor`   | Color?           | Color for tick in poll option selected       |          |
| `pollOptionSelectedBorderColor` | Color?           | Color for border of selected poll option     |          |
| `pollOptionSelectedTextColor`   | Color?           | Color for text color of selected poll option |          |
| `pollOptionOtherTextColor`      | Color?           | Color for text color of other poll option    |          |
| `votesCountStyles`              | LMFeedTextStyle? | Text Style for votes count text              |          |
| `pollOptionTextStyle`           | LMFeedTextStyle? | Text Style for poll option text              |          |
| `pollOptionDecoration`          | BoxDecoration?   | BoxDecoration for poll option decoration     |          |

## Usage Example

```dart
 LMFeedPoll(
  attachmentMeta: attachmentMeta,
  style: LMFeedPollStyle(
      margin: const EdgeInsets.symmetric(
        vertical: 8,
      ),
      backgroundColor: Colors.white,
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(8),
        border: Border.all(
          color: Colors.grey,
        ),
      ),
      pollOptionStyle: LMFeedPollOptionStyle(
      pollOptionSelectedColor:
          LikeMindsTheme.primaryColor.withOpacity(0.2),
      pollOptionOtherColor:
          const Color.fromRGBO(230, 235, 245, 1),
    ),
  ),
);
```

In this example, an `LMFeedPoll` widget is created with the `attachmentMeta`, with basic styles.



================================================
File: feed/Flutter/UI/Media/video.md
================================================
---
sidebar_position: 2
title: LMFeedVideo
---

# LMFeedVideo

`LMFeedVideo` is a widget that displays a video within a feed post. It supports playing videos from a URL or a local file. The widget provides customization options for styling the video player, handling playback controls, and responding to media events.

<br></br>

<p align="center">
  <img src="/img/flutter/ui/LMFeedVideo.webp" alt="LMFeedVideo" width="400"></img>
</p>

The `LMFeedVideo` widget is part of the `likeminds_feed_flutter_ui` package. It is designed to be used within an `LMFeedPostWidget` to display videos associated with a post.

## Properties

- `postId` (`String`) - Required

The unique identifier of the post associated with the video. This is a **required** parameter.

- `videoUrl` (`String`)

The URL of the video to be played. Either `videoUrl` or `videoFile` must be provided.

- `videoFile` (`File`)

The local file representing the video to be played. Either `videoUrl` or `videoFile` must be provided.

- `playButton` (`LMFeedButton`)

A custom button widget for the play action. This is an optional parameter.

- `pauseButton` (`LMFeedButton`)

A custom button widget for the pause action. This is an optional parameter.

- `muteButton` (`LMFeedButton`)

A custom button widget for the mute action. This is an optional parameter.

- `isMute` (`bool`)

A flag indicating whether the video should be initially muted. This is an optional parameter with a default value of `true`.

- `style` (`LMFeedPostVideoStyle`)

The style configuration for the video player. It allows customization of the video player's appearance and behavior. This is an optional parameter.

- `onMediaTap` (`VoidCallback`)

A callback function that is invoked when the video is tapped. This is an optional parameter.

- `autoPlay` (`bool`)

A flag indicating whether the video should automatically start playing. This is an optional parameter with a default value of `false`.

## Styling

The `LMFeedPostVideoStyle` class allows you to customize the appearance and behavior of the `LMFeedVideo` widget.

### Customization variables

| Property             | Type         | Description                                                    | Required | Default      |
| -------------------- | ------------ | -------------------------------------------------------------- | -------- | ------------ |
| `height`             | double       | The height of the video player.                                |          |              |
| `width`              | double       | The width of the video player.                                 |          |              |
| `aspectRatio`        | double       | The aspect ratio of the video player.                          |          | 16:9         |
| `borderRadius`       | BorderRadius | The border radius of the video player.                         |          | 0            |
| `borderColor`        | Color        | The border color of the video player.                          |          |              |
| `borderWidth`        | double       | The border width of the video player.                          |          |              |
| `boxFit`             | BoxFit       | How the video should be inscribed into the layout bounds.      |          | BoxFit.cover |
| `seekBarColor`       | Color        | The color of the seek bar.                                     |          |              |
| `seekBarBufferColor` | Color        | The color of the seek bar buffer.                              |          |              |
| `progressTextStyle`  | TextStyle    | The text style for the progress text.                          |          |              |
| `loaderWidget`       | Widget       | The widget to be displayed while the video is loading.         |          |              |
| `errorWidget`        | Widget       | The widget to be displayed when an error occurs.               |          |              |
| `shimmerWidget`      | Widget       | The shimmer widget to be displayed while the video is loading. |          |              |
| `playButton`         | LMFeedButton | The custom play button widget.                                 |          |              |
| `pauseButton`        | LMFeedButton | The custom pause button widget.                                |          |              |
| `muteButton`         | LMFeedButton | The custom mute button widget.                                 |          |              |
| `showControls`       | bool         | Whether to show the default video controls.                    |          |              |
| `autoPlay`           | bool         | Whether to automatically start playing the video.              |          |              |
| `looping`            | bool         | Whether to loop the video playback.                            |          |              |
| `allowFullScreen`    | bool         | Whether to allow entering full-screen mode.                    |          |              |
| `allowMuting`        | bool         | Whether to allow muting the video.                             |          |              |

You can create an instance of `LMFeedPostVideoStyle` and pass it to the `LMFeedVideo` widget to customize its appearance and behavior.

## Usage Example

```dart
LMFeedVideo(
  postId: 'post123',
  videoUrl: 'https://example.com/video.mp4',
  playButton: LMFeedButton(
    icon: Icon(Icons.play_arrow),
    onTap: () {
      // Handle play button tap
    },
  ),
  pauseButton: LMFeedButton(
    icon: Icon(Icons.pause),
    onTap: () {
      // Handle pause button tap
    },
  ),
  muteButton: LMFeedButton(
    icon: Icon(Icons.volume_off),
    onTap: () {
      // Handle mute button tap
    },
  ),
  isMute: false,
  style: LMFeedPostVideoStyle(
    height: 200,
    width: double.infinity,
    aspectRatio: 16 / 9,
    borderRadius: BorderRadius.circular(8),
    borderColor: Colors.grey,
    seekBarColor: Colors.blue,
    loaderWidget: CircularProgressIndicator(),
    errorWidget: Icon(Icons.error),
    shimmerWidget: LMPostMediaShimmer(),
    showControls: true,
    autoPlay: true,
    looping: false,
    allowFullScreen: true,
    allowMuting: true,
  ),
  onMediaTap: () {
    // Handle video tap
  },
  autoPlay: false,
)
```

In this example, an `LMFeedVideo` widget is created with the `postId` and `videoUrl` properties set to identify the post and provide the video URL. Custom play, pause, and mute buttons are provided using the `playButton`, `pauseButton`, and `muteButton` properties. The `isMute` property is set to `false` to unmute the video initially. The appearance and behavior of the video player are customized using the `LMFeedPostVideoStyle` class, specifying various properties such as height, width, aspect ratio, border radius, border color, seek bar color, loader widget, error widget, shimmer widget, and control options. The `onMediaTap` callback is used to handle taps on the video, and the `autoPlay` property is set to `false` to prevent automatic playback.



================================================
File: feed/Flutter/UI/Post/__category__.json
================================================
{
  "label": "Post",
  "position": 1,
  "link": {
    "type": "generated-index",
    "description": "Documentation for Post UI widgets"
  }
}



================================================
File: feed/Flutter/UI/Post/content.md
================================================
---
sidebar_position: 4
title: LMFeedPostContent
---

# LMFeedPostContent

`LMFeedPostContent` is a widget that represents the content section of a post in a feed. It displays the text content of the post and provides options for expanding or collapsing long text, highlighting tags, and customizing the appearance of the text.

<br></br>

<p align="center">
  <img src="/img/flutter/ui/LMFeedPostContent.webp" alt="LMFeedPostContent" width="300"></img>
</p>

The `LMFeedPostContent` widget is a part of the `likeminds_feed_flutter_ui` package. It is designed to be used within an `LMFeedPostWidget` to display the text content of a post in a consistent and customizable manner.

## Properties

- `text` (`String`)

The text content of the post. This is an optional parameter. If not provided, the text will be obtained from the `InheritedPostProvider`.

- `onTagTap` (`Function(String)`)

A callback function that is called when a tag in the post content is tapped. It receives the tapped tag as a parameter. This is an optional parameter.

- `expanded` (`bool`)

A flag to control whether the text should be initially expanded or collapsed. This is an optional parameter with a default value of `false`.

- `style` (`LMFeedPostContentStyle`)

An instance of `LMFeedPostContentStyle` to customize the appearance of the post content. This is an optional parameter.

## Styling

The `LMFeedPostContentStyle` class allows you to customize the appearance of the `LMFeedPostContent`.

### Customization variables

| Property          | Type       | Description                                                           | Required | Default    |
| ----------------- | ---------- | --------------------------------------------------------------------- | -------- | ---------- |
| `textStyle`       | TextStyle  | The text style for the post content.                                  |          |            |
| `linkStyle`       | TextStyle  | The text style for links and tags in the post content.                |          |            |
| `expandTextStyle` | TextStyle  | The text style for the "see more" text when the content is collapsed. |          |            |
| `textAlign`       | TextAlign  | The alignment of the text content.                                    |          |            |
| `expandText`      | String     | The text to display for expanding the collapsed content.              |          | "see more" |
| `animation`       | bool       | Whether to apply animation when expanding or collapsing the content.  |          | true       |
| `visibleLines`    | int        | The number of lines to show when the content is collapsed.            |          | 4          |
| `width`           | double     | The width of the post content container.                              |          |            |
| `height`          | double     | The height of the post content container.                             |          |            |
| `padding`         | EdgeInsets | The padding of the post content container.                            |          |            |
| `margin`          | EdgeInsets | The margin of the post content container.                             |          |            |

You can create an instance of `LMFeedPostContentStyle` and pass it to the `LMFeedPostContent` to customize its appearance.

## Usage Example

```dart
LMFeedPostContent(
  text: "This is a sample post. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed euismod,  a sit amet aliquam lacinia, nisl nisl aliquam nisl, nec aliquam nisl nisl sit amet nisl.",
  onTagTap: (tag) {
    // Handle tag tap
    print("Tapped tag: $tag");
  },
  expanded: false,
  style: LMFeedPostContentStyle(
    textStyle: TextStyle(
      color: Colors.black,
      fontSize: 16,
      fontWeight: FontWeight.normal,
    ),
    linkStyle: TextStyle(
      color: Colors.blue,
      fontSize: 16,
      fontWeight: FontWeight.bold,
    ),
    expandTextStyle: TextStyle(
      color: Colors.grey,
      fontSize: 14,
      fontWeight: FontWeight.normal,
    ),
    textAlign: TextAlign.left,
    expandText: "Read more",
    animation: true,
    visibleLines: 3,
    padding: EdgeInsets.all(16),
  ),
)
```

In this example, an `LMFeedPostContent` is created with a sample text content. The `onTagTap` callback is used to handle taps on tags within the content. The `expanded` flag is set to `false` to initially collapse the content. The appearance of the content is customized using `LMFeedPostContentStyle`, specifying the text styles, alignment, expand text, animation, visible lines, and padding.



================================================
File: feed/Flutter/UI/Post/footer.md
================================================
---
sidebar_position: 3
title: LMFeedPostFooter
---

# LMFeedPostFooter

`LMFeedPostFooter` is a widget that represents the footer section of a post in a feed. It contains various buttons for user interaction, such as like, comment, save, share, and repost. The footer can be customized to show or hide specific buttons and to modify their appearance and behavior.

<br></br>

<p align="center">
  <img src="/img/flutter/ui/LMFeedPostFooter.webp" alt="LMFeedPostFooter" width="500"></img>
</p>

The `LMFeedPostFooter` widget is a part of the `likeminds_feed_flutter_ui` package. It is designed to be used within an `LMFeedPostWidget` to provide a consistent and customizable footer for each post in the feed.

## Properties

- `postFooterStyle` (`LMFeedPostFooterStyle`)

An instance of `LMFeedPostFooterStyle` to customize the appearance of the post footer. This is an optional parameter.

- `likeButtonBuilder` (`Widget Function(LMFeedButton)`)

A builder function that takes an `LMFeedButton` and returns a custom widget for the like button. This is an optional parameter.

- `commentButtonBuilder` (`Widget Function(LMFeedButton)`)

A builder function that takes an `LMFeedButton` and returns a custom widget for the comment button. This is an optional parameter.

- `saveButtonBuilder` (`Widget Function(LMFeedButton)`)

A builder function that takes an `LMFeedButton` and returns a custom widget for the save button. This is an optional parameter.

- `shareButtonBuilder` (`Widget Function(LMFeedButton)`)

A builder function that takes an `LMFeedButton` and returns a custom widget for the share button. This is an optional parameter.

- `repostButtonBuilder` (`Widget Function(LMFeedButton)`)

A builder function that takes an `LMFeedButton` and returns a custom widget for the repost button. This is an optional parameter.

- `likeButton` (`LMFeedButton`)

An instance of `LMFeedButton` to be used as the like button. This is an optional parameter.

- `commentButton` (`LMFeedButton`)

An instance of `LMFeedButton` to be used as the comment button. This is an optional parameter.

- `saveButton` (`LMFeedButton`)

An instance of `LMFeedButton` to be used as the save button. This is an optional parameter.

- `shareButton` (`LMFeedButton`)

An instance of `LMFeedButton` to be used as the share button. This is an optional parameter.

- `repostButton` (`LMFeedButton`)

An instance of `LMFeedButton` to be used as the repost button. This is an optional parameter.

- `showRepostButton` (`bool`)

A flag to control whether the repost button should be shown. This is an optional parameter with a default value of `false`.

## Styling

The `LMFeedPostFooterStyle` class allows you to customize the appearance of the `LMFeedPostFooter`.

### Customization variables

| Property             | Type              | Description                                      | Required | Default |
| -------------------- | ----------------- | ------------------------------------------------ | -------- | ------- |
| `showSaveButton`     | bool              | Whether to show the save button.                 |          | true    |
| `showLikeButton`     | bool              | Whether to show the like button.                 |          | true    |
| `showCommentButton`  | bool              | Whether to show the comment button.              |          | true    |
| `showShareButton`    | bool              | Whether to show the share button.                |          | true    |
| `showRepostButton`   | bool              | Whether to show the repost button.               |          | false   |
| `width`              | double            | The width of the post footer.                    |          |         |
| `height`             | double            | The height of the post footer.                   |          |         |
| `padding`            | EdgeInsets        | The padding of the post footer.                  |          |         |
| `margin`             | EdgeInsets        | The margin of the post footer.                   |          |         |
| `alignment`          | MainAxisAlignment | The alignment of the buttons in the post footer. |          |         |
| `likeButtonStyle`    | LMFeedButtonStyle | The style for the like button.                   |          |         |
| `commentButtonStyle` | LMFeedButtonStyle | The style for the comment button.                |          |         |
| `saveButtonStyle`    | LMFeedButtonStyle | The style for the save button.                   |          |         |
| `shareButtonStyle`   | LMFeedButtonStyle | The style for the share button.                  |          |         |
| `repostButtonStyle`  | LMFeedButtonStyle | The style for the repost button.                 |          |         |

You can create an instance of `LMFeedPostFooterStyle` and pass it to the `LMFeedPostFooter` to customize its appearance.

## Usage Example

```dart
LMFeedPostFooter(
  postFooterStyle: LMFeedPostFooterStyle(
    showLikeButton: true,
    showCommentButton: true,
    showShareButton: true,
    showSaveButton: true,
    showRepostButton: true,
    likeButtonStyle: LMFeedButtonStyle(
      icon: LMFeedIcon(
        type: LMFeedIconType.svg,
        assetPath: 'assets/icons/like.svg',
      ),
      activeIcon: LMFeedIcon(
        type: LMFeedIconType.svg,
        assetPath: 'assets/icons/like_active.svg',
      ),
    ),
    commentButtonStyle: LMFeedButtonStyle(
      icon: LMFeedIcon(
        type: LMFeedIconType.svg,
        assetPath: 'assets/icons/comment.svg',
      ),
    ),
    shareButtonStyle: LMFeedButtonStyle(
      icon: LMFeedIcon(
        type: LMFeedIconType.svg,
        assetPath: 'assets/icons/share.svg',
      ),
    ),
    saveButtonStyle: LMFeedButtonStyle(
      icon: LMFeedIcon(
        type: LMFeedIconType.svg,
        assetPath: 'assets/icons/save.svg',
      ),
      activeIcon: LMFeedIcon(
        type: LMFeedIconType.svg,
        assetPath: 'assets/icons/save_active.svg',
      ),
    ),
    repostButtonStyle: LMFeedButtonStyle(
      icon: LMFeedIcon(
        type: LMFeedIconType.svg,
        assetPath: 'assets/icons/repost.svg',
      ),
    ),
    alignment: MainAxisAlignment.spaceBetween,
    padding: EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
  ),
)
```

In this example, an `LMFeedPostFooter` is created with custom button styles and configurations. The `postFooterStyle` property is used to specify the visibility of each button, their respective styles, and the overall alignment and padding of the footer.



================================================
File: feed/Flutter/UI/Post/header.md
================================================
---
sidebar_position: 2
title: LMFeedPostHeader
---

# LMFeedPostHeader

`LMFeedPostHeader` is a widget that represents the header section of a post in a feed. It displays information about the user who created the post, such as their profile picture, name, custom title, and the time when the post was created. The header also includes options for editing the post and accessing a menu.

<br></br>

<p align="center">
  <img src="/img/flutter/ui/LMFeedPostHeader.webp" alt="LMFeedPostHeader" width="500"></img>
</p>

The `LMFeedPostHeader` widget is a part of the `likeminds_feed_flutter_ui` package. It is designed to be used within an `LMFeedPostWidget` to provide a consistent and customizable header for each post in the feed.

## Properties

- `user` (`LMUserViewData`) - Required

The data for the user associated with the post. This is a **required** parameter.

- `postViewData` (`LMPostViewData`) - Required

The data for the post being displayed. This is a **required** parameter.

- `isFeed` (`bool`) - Required

A flag indicating whether the post is being displayed in a feed or not. This is a **required** parameter.

- `titleText` (`LMFeedText`)

The text widget for the user's name in the header. This is an optional parameter.

- `customTitle` (`LMFeedText`)

The text widget for the user's custom title. This is an optional parameter.

- `subText` (`LMFeedText`)

Additional text to be displayed below the user's name. This is an optional parameter.

- `subTextSeparator` (`Widget`)

A widget to separate the `subText` from other elements in the header. This is an optional parameter.

- `editedText` (`LMFeedText`)

The text widget to indicate if the post has been edited. This is an optional parameter.

- `createdAt` (`LMFeedText`)

The text widget to display the time when the post was created. This is an optional parameter.

- `onProfileTap` (`Function()`)

A callback function that is called when the user's profile is tapped. This is an optional parameter.

- `profilePicture` (`Widget`)

A custom widget for the user's profile picture. If not provided, the default `LMFeedProfilePicture` widget will be used. This is an optional parameter.

- `menu` (`LMFeedMenu`)

An instance of `LMFeedMenu` to be displayed in the header. This is an optional parameter.

- `menuBuilder` (`Widget Function(LMFeedMenu)`)

A builder function that takes an `LMFeedMenu` and returns a custom widget for the menu. This is an optional parameter.

- `postHeaderStyle` (`LMFeedPostHeaderStyle`)

An instance of `LMFeedPostHeaderStyle` to customize the appearance of the post header. This is an optional parameter.

## Styling

The `LMFeedPostHeaderStyle` class allows you to customize the appearance of the `LMFeedPostHeader`.

### Customization variables

| Property            | Type               | Description                                                                 | Required | Default |
| ------------------- | ------------------ | --------------------------------------------------------------------------- | -------- | ------- |
| `padding`           | EdgeInsetsGeometry | The padding of the post header.                                             |          |         |
| `margin`            | EdgeInsetsGeometry | The margin of the post header.                                              |          |         |
| `width`             | double             | The width of the post header.                                               |          |         |
| `height`            | double             | The height of the post header.                                              |          |         |
| `imageSize`         | double             | The size of the user's profile picture.                                     |          |         |
| `fallbackTextStyle` | LMFeedTextStyle    | The text style for the fallback text when the user's name is not available. |          |         |
| `showCustomTitle`   | bool               | Whether to show the user's custom title.                                    |          | true    |
| `showPinnedIcon`    | bool               | Whether to show the pinned icon for pinned posts.                           |          | true    |

You can create an instance of `LMFeedPostHeaderStyle` and pass it to the `LMFeedPostHeader` to customize its appearance.

## Usage Example

```dart
LMFeedPostHeader(
  user: user,
  postViewData: postViewData,
  isFeed: true,
  titleText: LMFeedText(
    text: user.name,
    style: LMFeedTextStyle(
      textStyle: TextStyle(
        fontSize: 16,
        fontWeight: FontWeight.bold,
      ),
    ),
  ),
  subText: LMFeedText(
    text: '@${user.username}',
    style: LMFeedTextStyle(
      textStyle: TextStyle(
        fontSize: 14,
        color: Colors.grey,
      ),
    ),
  ),
  createdAt: LMFeedText(
    text: '2h ago',
    style: LMFeedTextStyle(
      textStyle: TextStyle(
        fontSize: 14,
        color: Colors.grey,
      ),
    ),
  ),
  onProfileTap: () {
    // Handle profile tap
  },
  postHeaderStyle: LMFeedPostHeaderStyle(
    padding: EdgeInsets.all(16),
    imageSize: 48,
    showCustomTitle: true,
  ),
)
```

In this example, an `LMFeedPostHeader` is created with custom `titleText`, `subText`, and `createdAt` widgets. The `onProfileTap` callback is used to handle the user's profile being tapped. The appearance of the header is customized using `LMFeedPostHeaderStyle`.



================================================
File: feed/Flutter/UI/Post/media.md
================================================
---
sidebar_position: 5
title: LMFeedPostMedia
---

# LMFeedPostMedia

`LMFeedPostMedia` is a widget that represents the media section of a post in a feed. It supports various types of media attachments, including images, videos, documents, and link previews. The widget provides a consistent and customizable way to display media attachments within a post.

<br></br>

<p align="center">
  <img src="/img/flutter/ui/LMFeedCarousel.webp" alt="LMFeedPostMedia" width="300"></img>
</p>

The `LMFeedPostMedia` widget is a part of the `likeminds_feed_flutter_ui` package. It is designed to be used within an `LMFeedPostWidget` to display media attachments associated with a post.

## Properties

- `postId` (`String`) - Required

The unique identifier of the post. This is a **required** parameter.

- `attachments` (`List<LMAttachmentViewData>`) - Required

The list of media attachments associated with the post. This is a **required** parameter.

- `title` (`LMFeedText`)

The title text widget for the media section. This is an optional parameter.

- `subtitle` (`LMFeedText`)

The subtitle text widget for the media section. This is an optional parameter.

- `onError` (`Function(String, StackTrace)`)

A callback function that is called when an error occurs while loading or displaying the media attachments. It receives the error message and stack trace as parameters. This is an optional parameter.

- `onMediaTap` (`VoidCallback`)

A callback function that is called when a media attachment is tapped. This is an optional parameter.

- `style` (`LMFeedPostMediaStyle`)

An instance of `LMFeedPostMediaStyle` to customize the appearance of the media section. This is an optional parameter.

## Styling

The `LMFeedPostMediaStyle` class allows you to customize the appearance of different types of media attachments within the `LMFeedPostMedia` widget.

### Customization variables

| Property        | Type                       | Description                                                   | Required |
| --------------- | -------------------------- | ------------------------------------------------------------- | -------- |
| `videoStyle`    | LMFeedPostVideoStyle       | The style configuration for video attachments.                | Yes      |
| `imageStyle`    | LMFeedPostImageStyle       | The style configuration for image attachments.                | Yes      |
| `documentStyle` | LMFeedPostDocumentStyle    | The style configuration for document attachments.             | Yes      |
| `linkStyle`     | LMFeedPostLinkPreviewStyle | The style configuration for link preview attachments.         | Yes      |
| `pollStyle`     | LMFeedPollStyle            | The style configuration for poll widget.                      | No       |
| `carouselStyle` | LMFeedPostCarouselStyle    | The style configuration for carousel-style media attachments. | Yes      |

You can create an instance of `LMFeedPostMediaStyle` and pass it to the `LMFeedPostMedia` widget to customize the appearance of media attachments.

## Usage Example

```dart
LMFeedPostMedia(
  postId: "post123",
  attachments: [
    LMAttachmentViewData(
      attachmentType: 1,
      attachmentMeta: LMAttachmentMeta(
        url: "https://example.com/image.jpg",
        width: 800,
        height: 600,
      ),
    ),
    LMAttachmentViewData(
      attachmentType: 2,
      attachmentMeta: LMAttachmentMeta(
        url: "https://example.com/video.mp4",
        duration: 120,
      ),
    ),
  ],
  title: LMFeedText(text: "Media Attachments"),
  subtitle: LMFeedText(text: "Images and Videos"),
  onError: (error, stackTrace) {
    // Handle error
    print("Error: $error");
  },
  onMediaTap: () {
    // Handle media tap
    print("Media tapped");
  },
  style: LMFeedPostMediaStyle(
    videoStyle: LMFeedPostVideoStyle(
      // Customize video style
    ),
    imageStyle: LMFeedPostImageStyle(
      // Customize image style
    ),
    documentStyle: LMFeedPostDocumentStyle(
      // Customize document style
    ),
    linkStyle: LMFeedPostLinkPreviewStyle(
      // Customize link preview style
    ),
    carouselStyle: LMFeedPostCarouselStyle(
      // Customize carousel style
    ),
  ),
)
```

In this example, an `LMFeedPostMedia` widget is created with a `postId` and a list of `attachments`. The `title` and `subtitle` properties are used to provide additional information about the media section. The `onError` and `onMediaTap` callbacks are used to handle errors and media tap events, respectively. The `style` property is used to customize the appearance of different types of media attachments using the `LMFeedPostMediaStyle` class.



================================================
File: feed/Flutter/UI/Post/menu.md
================================================
---
sidebar_position: 6
title: LMFeedMenu
---

# LMFeedMenu

`LMFeedMenu` is a widget that represents the menu section of a post or comment in a feed. It provides a customizable popup menu with various menu items and actions associated with each item. The menu can be used to perform actions such as deleting, pinning, unpinning, reporting, or editing a post or comment.

<br></br>

<p align="center">
  <img src="/img/flutter/ui/LMFeedMenu.webp" alt="LMFeedMenu" width="300"></img>
</p>

The `LMFeedMenu` widget is a part of the `likeminds_feed_flutter_ui` package. It is designed to be used within an `LMFeedPostWidget` or `LMFeedCommentWidget` to provide a context menu for posts and comments.

## Properties

- `menuItems` (`List<LMPopUpMenuItemViewData>`) - Required

The list of menu items to be displayed in the popup menu. This is a **required** parameter.

- `isFeed` (`bool`) - Required

A flag indicating whether the menu is being used in a feed context. This is a **required** parameter.

- `children` (`Map<int, Widget>`)

A map of custom widgets to be displayed for specific menu item IDs. The keys of the map correspond to the menu item IDs, and the values are the custom widgets to be displayed. This is an optional parameter.

- `menuIcon` (`LMFeedIcon`)

The icon widget to be displayed as the trigger for the popup menu. If not provided, a default icon will be used. This is an optional parameter.

- `removeItemIds` (`Set<int>`)

A set of menu item IDs that should be removed from the menu. This is useful for excluding certain menu items based on specific conditions. This is an optional parameter with a default value of `{4, 7}`.

- `action` (`LMFeedMenuAction`)

An instance of `LMFeedMenuAction` that defines the callbacks for various menu item actions. This is an optional parameter.

## Usage Example

```dart
LMFeedMenu(
  menuItems: [
    LMPopUpMenuItemViewData(id: 1, title: "Delete"),
    LMPopUpMenuItemViewData(id: 2, title: "Pin"),
    LMPopUpMenuItemViewData(id: 3, title: "Unpin"),
    LMPopUpMenuItemViewData(id: 4, title: "Report"),
    LMPopUpMenuItemViewData(id: 5, title: "Edit"),
  ],
  isFeed: true,
  children: {
    1: Row(
      children: [
        Icon(Icons.delete),
        SizedBox(width: 8),
        Text("Delete"),
      ],
    ),
    5: Row(
      children: [
        Icon(Icons.edit),
        SizedBox(width: 8),
        Text("Edit"),
      ],
    ),
  },
  menuIcon: LMFeedIcon(
    type: LMFeedIconType.svg,
    assetPath: "assets/icons/menu.svg",
  ),
  removeItemIds: {4},
  action: LMFeedMenuAction(
    onPostDelete: () {
      // Handle post delete action
      print("Post deleted");
    },
    onPostPin: () {
      // Handle post pin action
      print("Post pinned");
    },
    onPostUnpin: () {
      // Handle post unpin action
      print("Post unpinned");
    },
    onPostEdit: () {
      // Handle post edit action
      print("Post edited");
    },
  ),
)
```

In this example, an `LMFeedMenu` widget is created with a list of menu items specified using `LMPopUpMenuItemViewData`. The `isFeed` property is set to `true` to indicate that the menu is being used in a feed context. Custom widgets are provided for the "Delete" and "Edit" menu items using the `children` property. The `menuIcon` property is used to specify a custom icon for the menu trigger. The `removeItemIds` property is used to exclude the "Report" menu item. The `action` property is used to define the callbacks for various menu item actions, such as deleting, pinning, unpinning, and editing a post.



================================================
File: feed/Flutter/UI/Post/post_widget.md
================================================
---
sidebar_position: 1
title: LMFeedPostWidget
---

# LMFeedPostWidget

`LMFeedPostWidget` is a highly customizable widget designed to display posts on a feed in a Flutter application. It provides a flexible and modular structure, allowing you to customize various components such as the header, footer, menu, media, and content. This widget is part of the `likeminds_feed_flutter_ui` library.

<br></br>

<p align="center">
  <img src="/img/flutter/ui/LMFeedPost.webp" alt="LMFeedPostWidget" width="300"></img>
</p>

The `LMFeedPostWidget` is a stateful widget that displays a post on the feed. It takes a `LMPostViewData` object, which represents the data for the post, and a `LMUserViewData` object, which represents the user associated with the post. The widget also accepts various optional parameters to customize its appearance and behavior, such as header, footer, menu, media, and content instances.

## Properties

- `post` (`LMPostViewData`) - Required

The data for the post to be displayed. This is a **required** parameter.

- `user` (`LMUserViewData`) - Required

The data for the user associated with the post. This is a **required** parameter.

- `topics` (`List<LMTopicViewData>`) - Required

A list of topics associated with the post. This is a **required** parameter.

- `isFeed` (`bool`) - Required

A flag indicating whether the post is being displayed in a feed or not. This is a **required** parameter.

- `onPostTap` (`LMFeedOnPostTap?`)

A callback function that is called when the post is tapped. This is an optional parameter.

- `onTagTap` (`Function(String)?`)

A callback function that is called when a tag in the post content is tapped. This is an optional parameter.

- `onLikeTap` (`Function(bool isLiked)?`)

A callback function that is called when the like button is tapped. This is an optional parameter.

- `onPinTap` (`Function(bool isPinned)?`)

A callback function that is called when the pin button is tapped. This is an optional parameter.

- `onSaveTap` (`Function(bool isSaved)?`)

A callback function that is called when the save button is tapped. This is an optional parameter.

- `childrenSpacing` (`double?`)

The spacing between the children widgets. This is an optional parameter.

- `header` ([`LMFeedPostHeader?`](#))

An instance of `LMFeedPostHeader` to be used as the header of the post. This is an optional parameter.

- `footer` ([`LMFeedPostFooter?`](#))

An instance of `LMFeedPostFooter` to be used as the footer of the post. This is an optional parameter.

- `menu` ([`LMFeedMenu?`](#))

An instance of `LMFeedMenu` to be used as the menu for the post. This is an optional parameter.

- `content` ([`LMFeedPostContent?`](#))

An instance of `LMFeedPostContent` to be used as the content of the post. This is an optional parameter.

- `media` ([`LMFeedPostMedia?`](#))

An instance of `LMFeedPostMedia` to be used as the media for the post. This is an optional parameter.

- `topicWidget` ([`LMFeedPostTopic?`](#))

An instance of `LMFeedPostTopic` to be used as the topic widget for the post. This is an optional parameter.

- `headerBuilder` (`LMFeedPostHeaderBuilder?`)

A function that builds the header of the post. This is an optional parameter.

- `contentBuilder` (`LMFeedPostContentBuilder?`)

A function that builds the content of the post. This is an optional parameter.

- `topicBuilder` (`LMFeedPostTopicBuilder?`)

A function that builds the topic widget for the post. This is an optional parameter.

- `menuBuilder` (`LMFeedPostMenuBuilder?`)

A function that builds the menu for the post. This is an optional parameter.

- `mediaBuilder` (`LMFeedPostMediaBuilder?`)

A function that builds the media for the post. This is an optional parameter.

- `footerBuilder` (`LMFeedPostFooterBuilder?`)

A function that builds the footer of the post. This is an optional parameter.

- `style` ([`LMFeedPostStyle?`](#lmfeedpoststyle))

An instance of `LMFeedPostStyle` to customize the appearance of the post. This is an optional parameter.

- `onMediaTap` (`VoidCallback?`)

A callback function that is called when the media is tapped. This is an optional parameter.

- `activityHeader` (`Widget?`)

A widget to be displayed above the post header. This is an optional parameter.

- `disposeVideoPlayerOnInActive` (`VoidCallback?`)

A callback function that is called when the widget is disposed, typically used to dispose of video players or other resources. This is an optional parameter.

## Styling

The `LMFeedPostStyle` class allows you to customize the appearance of the `LMFeedPostWidget`.

### Customization variables

| Property          | Type                        | Description                                    | Required | Default |
| ----------------- | --------------------------- | ---------------------------------------------- | -------- | ------- |
| `boxShadow`       | List&lt;BoxShadow&gt;       | The shadow to be applied to the post container |          |         |
| `borderRadius`    | BorderRadiusGeometry        | The border radius of the post container        |          |         |
| `padding`         | EdgeInsetsGeometry          | The padding of the post container              |          |         |
| `margin`          | EdgeInsetsGeometry          | The margin of the post container               |          |         |
| `border`          | BoxBorder                   | The border of the post container               |          |         |
| `backgroundColor` | Color                       | The background color of the post container     |          |         |
| `likesListType`   | LMFeedPostLikesListViewType | The type of view for the post's likes list     |          |         |
| `deleteSheetType` | LMFeedPostDeleteViewType    | The type of view for the post's delete sheet   |          |         |

You can create an instance of `LMFeedPostStyle` and pass it to the `LMFeedPostWidget` to customize its appearance.

## Usage Example

```dart
LMFeedPostWidget(
  post: post,
  user: user,
  topics: topics,
  isFeed: true,
  onPostTap: (context, post) {
    // Handle post tap
  },
  onTagTap: (tag) {
    // Handle tag tap
  },
  onLikeTap: (isLiked) {
    // Handle like tap
  },
  // Builds Post Header including user profile picture, name and menu
  header: LMFeedPostHeader(
    user: user,
    postViewData: post,
  ),
  content: LMFeedPostContent(
    onTagTap: (tag) {
      // Handle tag tap in content
    },
  ),
  footer: LMFeedPostFooter(
    post: post,
    onLikeTap: (isLiked) {
      // Handle like tap in footer
    },
  ),
  style: LMFeedPostStyle(
    borderRadius: BorderRadius.circular(8),
    padding: const EdgeInsets.all(16),
  ),
);
```

This example creates a `LMFeedPostWidget` with a custom header, content, and footer. It also handles various tap events such as post tap, tag tap, and like tap. The appearance of the post is customized using `LMFeedPostStyle`.



================================================
File: feed/Flutter/UI/Post/topic.md
================================================
---
sidebar_position: 7
title: LMFeedPostTopic
---

# LMFeedPostTopic

`LMFeedPostTopic` is a widget that represents the topic section of a post in a feed. It displays a list of topics associated with the post using topic chips. The topics can be customized and styled based on the provided `LMFeedPostTopicStyle`.

The `LMFeedPostTopic` widget is a part of the `likeminds_feed_flutter_ui` package. It is designed to be used within an `LMFeedPostWidget` to display the topics related to a post.

## Properties

- `post` (`LMPostViewData`) - Required

The post data associated with the topics. This is a **required** parameter.

- `topics` (`List<LMTopicViewData>`) - Required

The list of topics to be displayed for the post. This is a **required** parameter.

- `topicChipBuilder` (`Widget Function(BuildContext, LMFeedTopicChip)`)

A builder function that allows customization of the topic chips. It takes the `BuildContext` and an `LMFeedTopicChip` as parameters and returns a custom widget. This is an optional parameter.

- `style` (`LMFeedPostTopicStyle`)

The style configuration for the post topic section. It allows customization of the margin, padding, and styles for active and inactive topic chips. This is an optional parameter.

## Styling

The `LMFeedPostTopicStyle` class allows you to customize the appearance of the `LMFeedPostTopic` widget.

### Customization variables

| Property            | Type                 | Description                                       | Required | Default |
| ------------------- | -------------------- | ------------------------------------------------- | -------- | ------- |
| `margin`            | EdgeInsets           | The margin around the post topic section.         |          |         |
| `padding`           | EdgeInsets           | The padding within the post topic section.        |          |         |
| `activeChipStyle`   | LMFeedTopicChipStyle | The style configuration for active topic chips.   |          |         |
| `inactiveChipStyle` | LMFeedTopicChipStyle | The style configuration for inactive topic chips. |          |         |

You can create an instance of `LMFeedPostTopicStyle` and pass it to the `LMFeedPostTopic` widget to customize its appearance.

## Usage Example

```dart
LMFeedPostTopic(
  post: LMPostViewData(
    id: "post123",
    text: "This is a sample post",
    topics: [
      LMTopicViewData(id: "topic1", name: "Topic 1"),
      LMTopicViewData(id: "topic2", name: "Topic 2"),
    ],
  ),
  topics: [
    LMTopicViewData(id: "topic1", name: "Topic 1"),
    LMTopicViewData(id: "topic2", name: "Topic 2"),
  ],
  topicChipBuilder: (context, topicChip) {
    return GestureDetector(
      onTap: () {
        // Handle topic chip tap
        print("Tapped on topic: ${topicChip.topic.name}");
      },
      child: Container(
        padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
        decoration: BoxDecoration(
          color: Colors.blue,
          borderRadius: BorderRadius.circular(16),
        ),
        child: Text(
          topicChip.topic.name,
          style: TextStyle(
            color: Colors.white,
            fontSize: 14,
          ),
        ),
      ),
    );
  },
  style: LMFeedPostTopicStyle(
    margin: EdgeInsets.symmetric(vertical: 8),
    padding: EdgeInsets.symmetric(horizontal: 16),
    activeChipStyle: LMFeedTopicChipStyle(
      backgroundColor: Colors.blue,
      textStyle: TextStyle(
        color: Colors.white,
        fontSize: 14,
        fontWeight: FontWeight.bold,
      ),
    ),
    inactiveChipStyle: LMFeedTopicChipStyle(
      backgroundColor: Colors.grey[300],
      textStyle: TextStyle(
        color: Colors.black,
        fontSize: 14,
      ),
    ),
  ),
)
```

In this example, an `LMFeedPostTopic` widget is created with the required `post` and `topics` parameters. The `topicChipBuilder` parameter is used to provide a custom builder function that wraps the topic chips with a `GestureDetector` to handle tap events. The `style` parameter is used to customize the margin, padding, and styles for active and inactive topic chips using the `LMFeedPostTopicStyle` class.



================================================
File: feed/Flutter/UI/Topic/_category_.json
================================================
{
  "label": "Topic",
  "position": 3,
  "link": {
    "type": "generated-index",
    "description": "Flutter Documentation for Topic widgets of LikeMinds Feed UI SDK"
  }
}



================================================
File: feed/Flutter/UI/Topic/topic_bar.md
================================================
---
sidebar_position: 3
title: LMFeedTopicBar
---

# LMFeedTopicBar

`LMFeedTopicBar` is a widget that represents a topic bar in a feed. It displays the selected topics and provides an option to open a topic selector. The widget can be customized by passing in the required parameters and styling options.

<br></br>

<p align="center">
  <img src="/img/flutter/ui/LMFeedTopicBar.webp" alt="LMFeedTopicBar" width="200"></img>
</p>

The `LMFeedTopicBar` widget is part of the `likeminds_feed_flutter_ui` package. It is designed to be used within a feed to display the currently selected topics and allow users to modify the selection.

## Properties

- `selectedTopics` (`List<LMTopicViewData>`) - Required

A list of selected topics to be displayed in the topic bar. This is a **required** parameter.

- `openTopicSelector` (`VoidCallback`) - Required

A callback function that is invoked when the topic bar is tapped to open the topic selector. This is a **required** parameter.

- `removeTopicFromSelection` (`Function(LMTopicViewData)`)

A callback function that is invoked when a topic is removed from the selection. It takes the `LMTopicViewData` of the removed topic as a parameter. This is an optional parameter.

- `style` (`LMFeedTopicBarStyle`)

The style configuration for the topic bar. It allows customization of the topic bar's appearance and behavior. This is an optional parameter.

## Styling

The `LMFeedTopicBarStyle` class allows you to customize the appearance and behavior of the `LMFeedTopicBar` widget.

### Customization Variables

| Property          | Type                 | Description                                                       | Required | Default                                                |
| ----------------- | -------------------- | ----------------------------------------------------------------- | -------- | ------------------------------------------------------ |
| `backgroundColor` | Color                | The background color of the topic bar.                            |          | Theme container color                                  |
| `padding`         | EdgeInsets           | The padding of the topic bar.                                     |          | EdgeInsets.symmetric(horizontal: 20.0, vertical: 12.0) |
| `margin`          | EdgeInsets           | The margin around the topic bar.                                  |          |                                                        |
| `boxShadow`       | List\<BoxShadow\>    | The box shadow for the topic bar.                                 |          |                                                        |
| `border`          | Border               | The border of the topic bar.                                      |          |                                                        |
| `borderRadius`    | BorderRadius         | The border radius of the topic bar.                               |          |                                                        |
| `height`          | double               | The height of the topic bar.                                      |          |                                                        |
| `width`           | double               | The width of the topic bar.                                       |          |                                                        |
| `topicChipText`   | String               | The text to be displayed when no topics are selected.             |          | "All Topic"                                            |
| `topicChipStyle`  | LMFeedTopicChipStyle | The style configuration for the topic chips within the topic bar. |          |                                                        |

You can create an instance of `LMFeedTopicBarStyle` and pass it to the `LMFeedTopicBar` widget to customize its appearance and behavior.

## Usage Example

```dart
LMFeedTopicBar(
  selectedTopics: [
    LMTopicViewData(id: 'topic1', name: 'Technology', isEnabled: true),
    LMTopicViewData(id: 'topic2', name: 'Sports', isEnabled: true),
  ],
  openTopicSelector: () {
    // Open topic selector
    print('Opening topic selector');
  },
  removeTopicFromSelection: (topic) {
    // Remove topic from selection
    print('Removing topic: ${topic.name}');
  },
  style: LMFeedTopicBarStyle(
    backgroundColor: Colors.white,
    padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
    margin: EdgeInsets.symmetric(vertical: 8),
    boxShadow: [
      BoxShadow(
        color: Colors.black.withOpacity(0.1),
        blurRadius: 4,
        offset: Offset(0, 2),
      ),
    ],
    border: Border.all(color: Colors.grey),
    borderRadius: BorderRadius.circular(8),
    height: 48,
    width: double.infinity,
    topicChipText: 'Select Topics',
    topicChipStyle: LMFeedTopicChipStyle(
      backgroundColor: Colors.blue,
      textStyle: TextStyle(color: Colors.white),
    ),
  ),
)
```

In this example, an `LMFeedTopicBar` widget is created with a list of selected topics specified using `LMTopicViewData`. The `openTopicSelector` callback is provided to handle the action when the topic bar is tapped to open the topic selector. The `removeTopicFromSelection` callback is optional and can be used to handle the removal of a topic from the selection.

The appearance and behavior of the topic bar are customized using the `LMFeedTopicBarStyle` class. Various properties such as `backgroundColor`, `padding`, `margin`, `boxShadow`, `border`, `borderRadius`, `height`, `width`, `topicChipText`, and `topicChipStyle` are used to define the styling of the topic bar and the topic chips within it.

The `topicChipText` property specifies the text to be displayed when no topics are selected, and the `topicChipStyle` property allows customization of the topic chips' appearance using the `LMFeedTopicChipStyle` class.



================================================
File: feed/Flutter/UI/Topic/topic_chip.md
================================================
---
sidebar_position: 1
title: LMFeedTopicChip
---

# LMFeedTopicChip

`LMFeedTopicChip` is a widget that represents a topic chip in a feed. It displays the topic name and an optional icon. The icon can be placed before or after the topic name and can be tapped to perform an action. The topic chip can be customized by passing in the required parameters and can be used in a list of chips.

<br></br>

<p align="center">
  <img src="/img/flutter/ui/LMFeedTopicChip.webp" alt="LMFeedTopicChip" width="200"></img>
</p>

The `LMFeedTopicChip` widget is part of the `likeminds_feed_flutter_ui` package. It is designed to be used within a feed or topic selection interface to display individual topics as chips.

## Properties

- `topic` (`LMTopicViewData`) - Required

The topic data associated with the chip. It consists of an `id`, `topic` text, and an `isEnabled` boolean. This is a **required** parameter.

- `isSelected` (`bool`) - Required

A boolean value indicating whether the chip is selected or not. This is a **required** parameter.

- `onTap` (`Function(BuildContext, LMTopicViewData)?`)

The action to perform after tapping on the topic chip

- `onIconTap` (`Function(LMTopicViewData)?`)

The action to perform when the icon in the chip is tapped. It takes the `LMTopicViewData` as a parameter. This is an optional parameter.

- `style` (`LMFeedTopicChipStyle?`)

The style configuration for the topic chip. It allows customization of the chip's appearance and behavior. This is an optional parameter.

## Styling

The `LMFeedTopicChipStyle` class allows you to customize the appearance and behavior of the `LMFeedTopicChip` widget.

### Customization Variables

| Property          | Type                      | Description                                                             | Required | Default                                               |
| ----------------- | ------------------------- | ----------------------------------------------------------------------- | -------- | ----------------------------------------------------- |
| `backgroundColor` | Color                     | The background color of the topic chip.                                 |          | Colors.transparent                                    |
| `borderColor`     | Color                     | The color of the topic chip's border.                                   |          |                                                       |
| `borderRadius`    | BorderRadius              | The border radius of the topic chip.                                    |          | BorderRadius.circular(5.0)                            |
| `borderWidth`     | double                    | The width of the topic chip's border. Requires `showBorder` to be true. |          | 1.0                                                   |
| `showBorder`      | bool                      | Whether to show a border around the topic chip.                         |          | false                                                 |
| `textStyle`       | TextStyle                 | The text style of the topic chip.                                       |          |                                                       |
| `icon`            | Widget                    | The icon to be displayed in the topic chip.                             |          |                                                       |
| `padding`         | EdgeInsets                | The padding of the topic chip.                                          |          | EdgeInsets.symmetric(horizontal: 10.0, vertical: 5.0) |
| `iconPlacement`   | LMFeedIconButtonPlacement | The placement of the icon in the topic chip (start or end).             |          | LMFeedIconButtonPlacement.end                         |
| `height`          | double                    | The height of the topic chip.                                           |          |                                                       |
| `margin`          | EdgeInsets                | The margin around the topic chip.                                       |          | EdgeInsets.only(right: 8.0)                           |
| `gripChip`        | bool                      | Whether to make the topic chip expand to fill available space.          |          | false                                                 |

You can create an instance of `LMFeedTopicChipStyle` and pass it to the `LMFeedTopicChip` widget to customize its appearance and behavior.

## Usage Example

```dart
LMFeedTopicChip(
  topic: LMTopicViewData(
    id: 'topic1',
    name: 'Technology',
    isEnabled: true,
  ),
  isSelected: true,
  onIconTap: (topic) {
    // Handle icon tap
    print('Icon tapped for topic: ${topic.name}');
  },
  style: LMFeedTopicChipStyle(
    backgroundColor: Colors.blue[100],
    borderColor: Colors.blue,
    borderWidth: 1.0,
    showBorder: true,
    textStyle: TextStyle(
      color: Colors.blue,
      fontSize: 14,
      fontWeight: FontWeight.bold,
    ),
    icon: Icon(Icons.close),
    iconPlacement: LMFeedIconButtonPlacement.end,
    padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
    height: 32,
    margin: EdgeInsets.only(right: 8),
    gripChip: true,
  ),
)
```

In this example, an `LMFeedTopicChip` widget is created with the required `topic` and `isSelected` properties. The `topic` property specifies the topic data associated with the chip. The `isSelected` property indicates whether the chip is currently selected.

The optional `onIconTap` callback is provided to handle the action when the icon in the chip is tapped. It receives the `LMTopicViewData` as a parameter.

The appearance and behavior of the topic chip are customized using the `LMFeedTopicChipStyle` class. The `backgroundColor` is set to a light blue color, and the `borderColor` and `borderWidth` are used to add a blue border around the chip. The `showBorder` property is set to `true` to display the border.

The `textStyle` property is used to style the topic name text, specifying the color, font size, and font weight. The `icon` property defines the icon to be displayed in the chip (in this case, a close icon). The `iconPlacement` property is set to `LMFeedIconButtonPlacement.end` to position the icon at the end of the chip.

Additional customization options, such as `padding`, `height`, `margin`, and `gripChip`, are also specified to further customize the appearance and behavior of the topic chip.



================================================
File: feed/Flutter/UI/Topic/topic_grid.md
================================================
---
sidebar_position: 4
title: LMFeedTopicFeedGrid
---

# LMFeedTopicFeedGrid

`LMFeedTopicFeedGrid` is a widget that displays a grid of selected topics in a feed. It allows users to see the currently selected topics and interact with them. The widget can be customized by passing in the required parameters.

<br></br>

<p align="center">
  <img src="/img/flutter/ui/LMFeedTopicGrid.webp" alt="LMFeedTopicGrid" width="200"></img>
</p>

The `LMFeedTopicFeedGrid` widget is part of the `likeminds_feed_flutter_ui` package. It is designed to be used within a feed to display a grid of selected topics and provide user interaction.

## Properties

- `selectedTopics` (`List<LMTopicViewData>`) - Required

A list of selected topics to be displayed in the grid. If no topic is selected, pass an empty list. This is a **required** parameter.

- `textColor` (`Color`) - Required

The text color of the topic chips in the grid. This is a **required** parameter.

- `onTap` (`Function`) - Required

The action to perform when the topic feed bar is tapped. This is a **required** parameter.

- `height` (`double`) - Required

The height of the chips in the topic feed bar. This is a **required** parameter.

- `backgroundColor` (`Color`)

The background color of the topic chips. Defaults to transparent if not provided. This is an optional parameter.

- `borderColor` (`Color`)

The border color of the topic chips. Defaults to transparent if not provided. This is an optional parameter.

- `borderRadius` (`double`)

The border radius of the topic chips. Defaults to 5.0 if not provided. This is an optional parameter.

- `borderWidth` (`double`)

The border width of the topic chips. This is an optional parameter.

- `showBorder` (`bool`)

Whether to show a border around the topic chips. Defaults to `false` if not provided. This is an optional parameter.

- `textStyle` (`TextStyle`)

The text style of the topic chips. This is an optional parameter.

- `icon` (`Icon`)

The icon to be displayed on the topic chips, if any. Defaults to `null` if not provided. This is an optional parameter.

- `onIconTap` (`Function(LMTopicViewData)`)

The action to perform when the icon on a topic chip is tapped. It takes the `LMTopicViewData` as a parameter. This is an optional parameter.

- `trailingIcon` (`Widget`)

A trailing icon widget to be displayed at the end of the topic grid. This is an optional parameter.

- `onTrailingIconTap` (`Function`)

The action to perform when the trailing icon is tapped. This is an optional parameter.

- `chipPadding` (`EdgeInsets`)

The padding of the topic chips. This is an optional parameter.

- `showDivider` (`bool`)

Whether to show a divider below the topic feed bar. Defaults to `true` if not provided. This is an optional parameter.

- `emptyTopicChip` (`Widget`)

A placeholder chip to be displayed if no topic is selected. This is an optional parameter.

- `iconPlacement` (`LMFeedIconButtonPlacement`)

The placement of the icon on the topic chips. It can be either `LMFeedIconButtonPlacement.start` (before the text) or `LMFeedIconButtonPlacement.end` (after the text). Defaults to `LMFeedIconButtonPlacement.end` if not provided. This is an optional parameter.

## Usage Example

```dart
LMFeedTopicFeedGrid(
  selectedTopics: [
    LMTopicViewData(id: 'topic1', name: 'Technology'),
    LMTopicViewData(id: 'topic2', name: 'Sports'),
    LMTopicViewData(id: 'topic3', name: 'Entertainment'),
  ],
  textColor: Colors.black,
  onTap: () {
    // Handle topic feed bar tap
    print('Topic feed bar tapped');
  },
  height: 40,
  backgroundColor: Colors.grey[200],
  borderColor: Colors.grey,
  borderRadius: 8,
  borderWidth: 1,
  showBorder: true,
  textStyle: TextStyle(
    color: Colors.black,
    fontSize: 14,
    fontWeight: FontWeight.bold,
  ),
  icon: Icon(Icons.close),
  onIconTap: (topic) {
    // Handle topic chip icon tap
    print('Icon tapped for topic: ${topic.name}');
  },
  trailingIcon: Icon(Icons.arrow_forward),
  onTrailingIconTap: () {
    // Handle trailing icon tap
    print('Trailing icon tapped');
  },
  chipPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
  showDivider: true,
  emptyTopicChip: Text('No topics selected'),
  iconPlacement: LMFeedIconButtonPlacement.end,
)
```

In this example, an `LMFeedTopicFeedGrid` widget is created with a list of selected topics specified using `LMTopicViewData`. The `textColor` and `onTap` properties are required to define the text color of the topic chips and the action to perform when the topic feed bar is tapped.

The `height` property sets the height of the topic chips, and various optional properties such as `backgroundColor`, `borderColor`, `borderRadius`, `borderWidth`, `showBorder`, `textStyle`, `icon`, `onIconTap`, `trailingIcon`, `onTrailingIconTap`, `chipPadding`, `showDivider`, `emptyTopicChip`, and `iconPlacement` are used to customize the appearance and behavior of the topic feed grid.

The `onIconTap` callback is invoked when the icon on a topic chip is tapped, and it receives the `LMTopicViewData` as a parameter. The `onTrailingIconTap` callback is invoked when the trailing icon is tapped.

The `emptyTopicChip` property specifies a placeholder chip to be displayed if no topics are selected.



================================================
File: feed/Flutter/UI/Topic/topic_tile.md
================================================
---
sidebar_position: 2
title: LMFeedTopicTile
---

# LMFeedTopicTile

`LMFeedTopicTile` is a widget that represents a tile for a topic in a feed. It displays the topic text and an optional icon to indicate the selection state. The tile can be customized by passing in the required parameters, such as the topic data, selection state, and appearance options.

<br></br>

<p align="center">
  <img src="/img/flutter/ui/LMFeedTopicTile.webp" alt="LMFeedTopicTile" width="200"></img>
</p>

The `LMFeedTopicTile` widget is part of the `likeminds_feed_flutter_ui` package. It is designed to be used within a feed or topic selection interface to display individual topics and allow user interaction.

## Properties

- `topic` (`LMTopicViewData`) - Required

The topic data associated with the tile. It consists of an `id`, `topic` text, and an `isEnabled` boolean. This is a **required** parameter.

- `icon` (`Icon`) - Required

The icon to be displayed when the tile is selected. This is a **required** parameter.

- `onTap` (`Function(LMTopicViewData)`) - Required

The action to perform when the tile is tapped. It takes the `LMTopicViewData` as a parameter. This is a **required** parameter.

- `isSelected` (`bool`) - Required

A boolean value indicating whether the tile is selected or not. This is a **required** parameter.

- `text` (`LMFeedText`) - Required

The text widget to be displayed in the tile. This is a **required** parameter.

- `tileRowAlignment` (`MainAxisAlignment`)

The alignment of the row within the tile. It defaults to `MainAxisAlignment.spaceBetween` if not provided. This is an optional parameter.

- `backgroundColor` (`Color`)

The background color of the tile. It defaults to `Colors.transparent` if not provided. This is an optional parameter.

- `height` (`double`)

The height of the tile. This is an optional parameter.

- `borderColor` (`Color`)

The color of the tile's border. This is an optional parameter.

- `borderWidth` (`double`)

The width of the tile's border. This is an optional parameter.

- `padding` (`EdgeInsets`)

The padding within the tile. This is an optional parameter.

## Usage Example

```dart
LMFeedTopicTile(
  topic: LMTopicViewData(
    id: 'topic1',
    topic: 'Technology',
    isEnabled: true,
  ),
  icon: Icon(Icons.check),
  onTap: (topic) {
    // Handle topic tile tap
    print('Tapped on topic: ${topic.topic}');
  },
  isSelected: true,
  text: LMFeedText(
    text: 'Technology',
    style: LMFeedTextStyle(
      textStyle: TextStyle(
        color: Colors.black,
        fontSize: 16,
      ),
    ),
  ),
  tileRowAlignment: MainAxisAlignment.start,
  backgroundColor: Colors.grey[200],
  height: 48,
  borderColor: Colors.blue,
  borderWidth: 1,
  padding: EdgeInsets.symmetric(horizontal: 16),
)
```

In this example, an `LMFeedTopicTile` widget is created with the required `topic`, `icon`, `onTap`, `isSelected`, and `text` properties. The `topic` property specifies the topic data associated with the tile. The `icon` property defines the icon to be displayed when the tile is selected. The `onTap` callback is invoked when the tile is tapped, passing the `LMTopicViewData` as a parameter. The `isSelected` property indicates whether the tile is currently selected. The `text` property specifies the text widget to be displayed in the tile.

Additionally, the optional properties `tileRowAlignment`, `backgroundColor`, `height`, `borderColor`, `borderWidth`, and `padding` are used to customize the appearance and layout of the tile.



================================================
File: quickstart-guide/chat/flutter.md
================================================
import 'package:flutter/material.dart';
import 'package:likeminds_chat_flutter_core/likeminds_chat_flutter_core.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  // Call setup function before the runApp() function
  await LMChatCore.instance.initialize();
  // run the app
  runApp(const MaterialApp(home: LMSampleChat()));
}

// A blank scaffold with a button that opens
// the LM Social Chat when clicked
class LMSampleChat extends StatelessWidget {
  const LMSampleChat({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('LM Sample Chat'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () async {
            // initiate user session with apiKey, uuid and userName
            // this is required to show the chat
            LMResponse<void> response =
                await LMChatCore.instance.showChatWithApiKey(
              apiKey: "83c8f0ed-a9e2-4634-9a2e-d9c7a1e39ff8",
              uuid: "abc",
              userName: "abc",
            );
            if (response.success) {
              // create route with LMChatSocialScreen
              MaterialPageRoute route = MaterialPageRoute(
                builder: (context) => const LMChatHomeScreen(),
              );
              // navigate to LMChatSocialScreen
              Navigator.pushReplacement(context, route);
            } else {
              debugPrint("Error opening chat: ${response.errorMessage}");
            }
          },
          child: const Text('Open Chat'),
        ),
      ),
    );
  }
}



================================================
File: quickstart-guide/chat/flutter.txt
================================================
import 'package:flutter/material.dart';
import 'package:likeminds_chat_flutter_core/likeminds_chat_flutter_core.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  // Call setup function before the runApp() function
  await LMChatCore.instance.initialize();
  // run the app
  runApp(const MaterialApp(home: LMSampleChat()));
}

// A blank scaffold with a button that opens
// the LM Social Chat when clicked
class LMSampleChat extends StatelessWidget {
  const LMSampleChat({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('LM Sample Chat'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () async {
            // initiate user session with apiKey, uuid and userName
            // this is required to show the chat
            LMResponse<void> response =
                await LMChatCore.instance.showChatWithApiKey(
              apiKey: "83c8f0ed-a9e2-4634-9a2e-d9c7a1e39ff8",
              uuid: "abc",
              userName: "abc",
            );
            if (response.success) {
              // create route with LMChatSocialScreen
              MaterialPageRoute route = MaterialPageRoute(
                builder: (context) => const LMChatHomeScreen(),
              );
              // navigate to LMChatSocialScreen
              Navigator.pushReplacement(context, route);
            } else {
              debugPrint("Error opening chat: ${response.errorMessage}");
            }
          },
          child: const Text('Open Chat'),
        ),
      ),
    );
  }
}



================================================
File: quickstart-guide/feed/flutter.md
================================================
import 'package:flutter/material.dart';
import 'package:likeminds_feed_flutter_core/likeminds_feed_core.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  // Call setup function before the runApp() function
  await LMFeedCore.instance.initialize();
  // run the app
  runApp(const MaterialApp(home: LMSampleFeed()));
}

// A blank scaffold with a button that opens
// the LM Social Feed when clicked
class LMSampleFeed extends StatelessWidget {
  const LMSampleFeed({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('LM Social Feed'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () async {
            // initiate user session with apiKey, uuid and userName
            // this is required to show the feed
            LMResponse<void> response =
                await LMFeedCore.instance.showFeedWithApiKey(
              apiKey: "83c8f0ed-a9e2-4634-9a2e-d9c7a1e39ff8",
              uuid: "abc",
              userName: "abc",
            );
            if (response.success) {
              // create route with LMFeedSocialScreen
              MaterialPageRoute route = MaterialPageRoute(
                builder: (context) => const LMFeedSocialScreen(),
              );
              // navigate to LMFeedSocialScreen
              Navigator.pushReplacement(context, route);
            } else {
              debugPrint("Error opening feed: ${response.errorMessage}");
            }
          },
          child: const Text('Open Feed'),
        ),
      ),
    );
  }
}




================================================
File: rest-api/authentication.md
================================================
---
title: Authentication
sidebar_position: 1
---

# Overview

All the LikeMinds APIs require authentication. Below are the steps outlining how authentication works.

## Getting Started

To begin, retrieve your LikeMinds API key from the [dashboard](https://dashboard.likeminds.community/settings). This key uniquely identifies your project on the LikeMinds platform and is required for the [SDK Initiate](/rest-api#/operations/sdkInitate) API.

## User Data Creation

1. For each user on the client platform, hit initiate API [SDK Initiate](/rest-api#/operations/sdkInitate) to create new user on LikeMinds platform.

2. Save the response to create mapping from `Customer ID` ↔︎ `LikeMinds access_token & refresh_token`

3. Keep the mapping for following keys for each client side user _(these will be required later)_

   - `access_token` - access token for user authentication

   - `refresh_token` - refresh token to generate new access token for the user when existing one expires

   - `user_unique_id` - corresponding LikeMinds platform unique id of the user

## Refresh Token Strategy

1. Use user's `access_token` generated in previous step as `Bearer Token`

   - If LM APIs return `statusCode: 401`, use user's `refresh_token` and hit [refresh token API](/rest-api#/operations/refreshUserToken) to generate new `access_token`



================================================
File: rest-api/custom-widget-company-page.md
================================================
---
title: Custom Widget - How to create company page
sidebar_position: 4
---

# Overview

This document provides instructions for creating posts related to companies on the LikeMinds platform. It covers two scenarios:
1. Creating a post for a new company widget (when the company widget does not exist).
2. Creating a post for an existing company widget.

It also includes a section on fetching widgets for a specific company using the unique company identifier. The document provides detailed steps, including API endpoints, request payloads, and cURL examples for each scenario.

The key steps involved are:
- Generating an authentication token (`auth_token`) for the company owner.
- Creating a post with the necessary details and metadata.
- Attaching the company widget information to the post payload.
- Fetching the existing company widget (if applicable) to obtain the widget ID.

The document emphasizes the importance of using the correct authentication token and payload structures for each API request.

## Create posts for a company

### Create Post for a New Company Widget (If the company widget does not already exist)

1. Create the company owner's `auth_token` using the `sdk/initiate` API and retrieve the `access_token` from the response. (Use the credentials of the company owner - `user_name` & `user_unique_id`)

2. Create a post with all the post details (refer to the document: Likeminds - Client feed Data Migration) and include the metadata of the company in the request body.

3. Call the `feed/post` API (POST) with a new attachment in the `attachments` array of the request body:
  - `attachment_type`: 5
  - `attachment_meta`: Metadata of the company in JSON format

    ```bash
        curl --location --request POST 'https://auth.likeminds.community/feed/post' \
        --header 'Authorization: <auth_token>' \
        --header 'Content-Type: application/json' \
        --data '{
        "text": "New post with company widget",
        "attachments" : [
            { // existing attachments (i.e - img, video, etc)
                "attachment_type": 1,
                "attachment_meta" : {
                    "name": "name",
                    "url" : "url"
                }
            },
            { // company widget attachment
                "attachment_type" : 5,
                "attachment_meta" : {
                        'company_id': "id", // This should be unique
                                'company_name': "name",
                                'company_image_url': "imageUrl",
                                'company_description': "description",
                }
            }
        ]
        } '
    ```

### Create Post for an Existing Company Widget

1. For a company, fetch its widget using the mentioned "Fetch Widgets" flow.

2. From the response object, store/copy the `_id` (company widget id).

3. Create the company owner's `auth_token` using the `sdk/initiate` API and retrieve the `access_token` from the response. (Use the credentials of the company owner - `user_name` & `user_unique_id`)

4. Create a post with all the post details (refer to the document: Likeminds - Client feed Data Migration) and the `entity_id` of the company widget.

5. Call the `feed/post` API (POST) with a new attachment in the `attachments` array of the request body:
  - `attachment_type`: 5
  - `attachment_meta`: `{ "entity_id" : "<_id from widget response>"}`

    ```bash
        curl --location --request POST 'https://auth.likeminds.community/feed/post' \
        --header 'Authorization: <auth token>' \
        --header 'Content-Type: application/json' \
        --data '{
        "text": "New post with company widget",
        "attachments" : [
            { // existing attachments (i.e - img, video, etc)
                "attachment_type": 1, //type: integer
                "attachment_meta" : {
                    "name": "name",
                    "url" : "url"
                }
            },
            { // company widget attachment
                "attachment_type" : 5, //type: integer
                "attachment_meta" : {
                    "entity_id" : "650b35486ce4dc22cf3788e8" // company widget id ("_id")
                }
            }
        ]
        } '
    ```

### Fetch Widgets

1. Fetch the widget for a company using the unique identifier.

2. Call the `sdk/initiate` API (with `user_name` and `user_unique_id`) and retrieve the `access_token` from the response to generate an `auth_token`, before calling the mentioned API (or if the `auth_token` is expired).

3. Fetch the widget for a specific company using the `/widget` API (GET) with the following query parameters:
  - `search_key="metadata.company_id"`
  - `search_value="<id of the company>"`

  **NOTE:** The double quotes (`""`) are mandatory characters in the values for the above parameters.

    ```bash
    curl --location 'https://auth.likeminds.community/widget?search_key=%22metadata.company_id%22&search_value=%22%3Cid%20of%20the%20company%3E%22' \
    --header 'Authorization: <auth_token>'
    ```

4. Confirm that there exists only one widget for a specific company.

Example response for the above API:

```json
{
   "success": true,
   "data": {
       "widgets": [
           {
               "_id": "65362426068a0ec51a1768cc", // company widget id
               "_lm_meta": null,
               "created_at": 1698047014476,
               "metadata": {
                   "ccompany_image_url": "image url",
                   "company_id": "unique_id_1",
                   "company_name": "company name"
               },
               "parent_entity_id": "<post id>",
               "parent_entity_type": "post",
               "updated_at": 1698047014476
           }
       ]
   }
}


================================================
File: rest-api/deeplink-sharing.md
================================================
---
title: How to Share Deeplink for Secret Chatroom
sidebar_position: 5
---

# Overview

This document provides instructions for creating a private chatroom and linking it to a cohort of users on the LikeMinds platform. The document includes cURL examples for each API call, making it easier to understand and implement the required steps. It is important to note that only CM (Community Manager) users can perform these actions.

## Steps

1. Create a Private Chatroom → From Dashboard and get the chatroom id. Only CM user can hit the following APIs.

2. Create a Cohort → Call /community/cohort (POST) with name and uuids → Preferred CM curl :
```bash
curl --location 'https://auth.likeminds.community/community/cohort' \\
--header 'x-api-key: <LM API KEY>' \\
--header 'Content-Type: application/json' \\
--header 'Authorization:<auth_token>' \\
--data '{
    "name": "Normal cohort 2",
    "uuids": [<user_ids>]
}'
```

3. Link the Cohort to Chatroom (POST)
```bash
curl --location 'https://auth.likeminds.community/chatroom/cohort' \\
--header 'x-api-key: <api_key>' \\
--header 'Content-Type: application/json' \\
--header 'Authorization:<auth_token>' \\
--data '{
    "chatroom_id": <CHATROOM_ID>,
    "cohort_ids": <COHORT_ID>
}'
```

4. Check whether cohort has been added to chatroom or not. (GET) → cohort\_access=2
```bash
curl --location 'https://auth.likeminds.community/chatroom/cohort/access?chatroom_id=29557' \\
--header 'x-api-key: <api_key>' \\
--header 'Authorization:<auth_token>'
```

5. Generate Private Chatroom Link -as per the template
    `https://<YOUR\_DOMAIN>/collabcard/{chatroom\_id}?cohort\_id=<cohort_id>`



================================================
File: rest-api/feed-data-seeding.md
================================================
---
title: Feed Data Seeding
sidebar_position: 2
---

# Overview

This document outlines the APIs and flows to be employed for the migration of client feed data to the LikeMinds platform using APIs.

## Operating Procedure

The steps involved in the migration process are listed below, beginning with user data creation on the LikeMinds platform and subsequently creating feed data from the client data reference using various APIs.

### Authentication
Retrieve the project LikeMinds API key from the dashboard, as this will be required for SDK Initiate. It uniquely identifies a project on the LikeMinds platform.

### User Data Creation
  1. For each user on the client platform, hit the `initiate API SDK Initiate` to create a new user on the LikeMinds platform.
  2. Save the response to create a mapping from Customer ID ↔︎ LikeMinds `access_token` & `refresh_token`.
  3. Keep the mapping for the following keys for each client-side user (these will be required later):
    - `access_token` - access token for user authentication
    - `refresh_token` - refresh token to generate a new access token for the user when the existing one expires
    - `user_unique_id` - corresponding LikeMinds platform unique ID of the user

### Refresh Token Strategy
  1. Use the user's `access_token` generated in the previous step as the Bearer Token.
  2. If LM APIs return `statusCode: 401`, use the user's `refresh_token` and hit the refresh token API to generate a new `access_token`.

### Feed Data Creation
  - **Post**
  >**Note:** Please do replace the placeholders with actual values before executing the cURL commands.
    - For each post on the client platform, transform the data into the LikeMinds schema and hit the `create post API`.
        ```bash
        curl --request POST \
        --url https://auth.likeminds.community/feed/post \
        --header 'Accept: application/json' \
        --header 'Authorization: <auth_token>' \
        --header 'Content-Type: application/json' \
        --header 'x-platform-code: <platform_code>' \
        --header 'x-version-code: <version_code>' \
        --data '{
                    "text": "string", //Question description
                    "heading": "string", //Question 
                    "created_at": 1711607084000 //Epoch Value in Milliseconds
                    "topic_ids":[<topic_id>"] //Topic IDs
                    "attachments": [
                        {
                            "attachment_type": 1,
                            "attachment_meta": {
                                "url": "string", //Attachment URL
                                "format": "string", 
                                "size": 0,
                                "duration": 0,
                                "page_count": 0,
                                "og_tags": {
                                    "title": "string",
                                    "image": "string",
                                    "description": "string",
                                    "url": "string"
                                }
                            }
                        }
                    ]
                }'
        ``` 
    - The user creating the post (i.e., the request initiator) is identified using the Bearer Token authorization header.
    - Use the Refresh Token Strategy (as mentioned above).
    - Keep the mapping for the following key for each post created:
      - `_id` - corresponding post ID on the LikeMinds platform (this will be required later)
  - **Post Like**
    - For each post like, hit the `post like API`.
    - The user creating the post like (i.e., the request initiator) is identified using the Bearer Token authorization header. Use the Refresh Token Strategy if authentication fails.
    - Use the post's `_id` generated in the post creation step to identify the post.
  - **Post Comment**
    - For each post comment, hit the `post comment API`.
    - The user creating the post comment (i.e., the request initiator) is identified using the Bearer Token authorization header.
    - Use the Refresh Token Strategy (as mentioned above).
    - Use the post's `_id` generated in the post creation step to identify the post.
    - Keep the mapping for the following key for each post comment created:
      - `_id` - comment ID on the post on the LikeMinds platform (this will be required later)
  - **Comment Like**
    - For each comment like, hit the `comment like API`.
    - The user creating the comment like (i.e., the request initiator) is identified using the Bearer Token authorization header. Use the Refresh Token Strategy if authentication fails.
    - Use the comment's `_id` generated in the comment creation step to identify the comment.
  - **Topic**
    - For each Topic creation, you need to hit the `POST /feed/topic API`.
    - **NOTE:** This is an Admin API, and you'll be required to log in using CM.
        ```bash
        curl --location 'https://auth.likeminds.community/feed/topic' \
        --header 'Authorization: <auth_token>' \
        --data '{
            "topics": [
                {
                    "name": "USA", // Topic Name
                    "parent_id": "64c9419bb4629de3c80f640b", //Parent ID for Topic
                    "priority": 9, //Set the ordering
                    "metadata": {
                        pgc:{
                            post_links:{}
                        },
                        "description": "This description is for topic North Pole",
                        "cover_image": "https://a.cdn-hotels.com/gdcs/production121/d772/6b5a9a4c-fd06-4bcf-b2f0-d979e3704cf9.jpg",
                        "icon": "https://upload.wikimedia.org/wikipedia/commons/thumb/c/cb/Flag_of_the_United_Arab_Emirates.svg/800px-Flag_of_the_United_Arab_Emirates.svg.png"
                    },
                    "is_searchable": "true"
                }
            ]
        }'
        ``` 
    - For creating L0 topics, send the following parameters in the request body:
        - `name`
        - `priority`
        - `is_searchable`
    - For creating L1 topics, send the following parameters in the request body:
        - `name`
        - `priority`
        - `metadata`
        - `is_searchable`


================================================
File: rest-api/how-to-create-and-fetch-custom-widget.md
================================================
---
sidebar_position: 6
title: How to Create and Fetch a Custom Widget?
slug: /flutter/core/guides/how-to-create-and-use-custom-widget
---

# How to Create and Fetch a Custom Widget?

## Introduction

This guide walks you through creating a custom widget that suits a specific use case.

## Prerequisites

Before you begin, ensure the following:

- Familiarity with Postman or a similar API testing tool.

## Steps

### Step 1: Initiate a User Session

Authenticated API calls to the LikeMinds backend require an authorization token, which you can generate by following the [Getting Started Guide](https://docs.likeminds.community/rest-api/authentication#getting-started). Ensure you log in with the Community Manager's credentials.

### Step 2: Create a Custom Widget

To create a custom widget, use the following POST request. Replace `{cm_access_token}`, `PARENT_ENTITY_ID`, and `PARENT_ENTITY_TYPE` with your specific values:

```bash
curl --location 'https://auth.likeminds.community/widget' \
--header 'Content-Type: application/json' \
--header 'Authorization: {cm_access_token}' \
--data '{
    "parent_entity_id": "PARENT_ENTITY_ID",
    "parent_entity_type": "PARENT_ENTITY_TYPE",
    "metadata": {
        "post_type": "post_type_1",
        "widget_type": "post_type"
    }
}'
```

### Step 3: Retrieve a Custom Widget

To retrieve a custom widget, use the following POST request. Replace `{your_search_query}` with your specific query:

```bash
curl --location 'https://auth.likeminds.community/widget?search_key=%22metadata.widget_type%22&search_value=%22{your_search_query}%22' \
--header 'Authorization: {cm_access_token}'
```


================================================
File: rest-api/notification-feed-customisation.md
================================================
---
title: Customizing User Notification Feed
sidebar_position: 7
---

# Customizing User Notification Feed

## Overview
The LikeMinds platform allows you to create custom activities in a user's notification feed programmatically. This guide will walk you through the process of generating custom notification feed entries using the [Create Notification Feed Activity API](https://docs.likeminds.community/rest-api#/operations/createUserActivity).

## Prerequisites
Before creating custom notification feed activities, ensure you have:

1. **Enabled Feed in your project**
   - Use the Community Settings API [Update Community Settings](https://docs.likeminds.community/rest-api#/operations/updateCommunitySettings) to enable the feed functionality for your community.

2. **Authentication**
   - Obtain a CM/Admin access token by calling the [Initiate](https://docs.likeminds.community/rest-api#/operations/sdkInitate) API
   - Only users with Admin or community manager (CM) privileges can create custom activities

## Authentication Steps
1. Call the `sdk/initiate` API- [ref](https://docs.likeminds.community/rest-api#/operations/sdkInitate) :
   ```bash
   curl --location 'https://auth.likeminds.community/sdk/initiate' \
   --header 'x-api-key: LM_API_KEY' \
   --data '{
       "user_name": "ADMIN_NAME",
       "user_unique_id": "ADMIN_UUID"
   }'
   ```

2. Extract the `access_token` from the response for subsequent API calls.

## Creating Custom Notification Feed Activity

### API Endpoint
- **Method**: POST
- **URL**: `/feed/user/activity`
- **Authentication**: Bearer Token (Admin/CM token)
- **API Doc**: [Create Notification Feed Activity API](https://docs.likeminds.community/rest-api#/operations/createUserActivity)

### Request Body Example
```json
{
  "action": "custom_activity",
  "action_by": "user_john_123",
  "action_on": [
    "user_mary_456", 
    "user_alice_789", 
    "user_admin_234"
  ],
  "entity_type": "post",
  "entity_id": "post_id_abc",
  "activity_text": "John created a new post in Marketing topic"
}
```

**Use Case Breakdown**:
- John (user_john_123) creates a post
- The activity is sent to Mary, Alice, and an admin
- The post is about marketing, with ID post_id_abc
- Notification text explains the action clearly

### Example Request
```bash
curl --location 'https://auth.likeminds.community/feed/user/activity' \
--header 'Authorization: ADMIN_ACCESS_TOKEN' \
--header 'Content-Type: application/json' \
--data '{
    "action": "custom_activity",
    "action_by": "USER_UUID_A",
    "action_on": ["USER_UUID_B", "USER_UUID_C"],
    "entity_type": "post",
    "entity_id": "abc123",
    "activity_text": "John created a new post in Marketing topic"
}'
```

### Possible Responses
1. Successful Creation (200 OK):
   ```json
   {
     "success": true
   }
   ```

2. Authorization Error:
   ```json
   {
     "success": false,
     "error_message": "You are not Authorized to perform this action"
   }
   ```

### Verifying Custom Activity

To confirm the custom activity was created, retrieve the user's notification feed:

```bash
curl --location 'https://auth.likeminds.community/feed/user/activity' \
--header 'Authorization: <USER_ACCESS_TOKEN>'
```

## Best Practices

1. **Rate Limiting**: Be mindful of how frequently you create custom activities to avoid overwhelming users.

2. **Meaningful Content**: Ensure the `activity_text` provides clear, contextual information.

3. **Targeted Notifications**: Use `action_on` carefully to send notifications to relevant users.

4. **Error Handling**: Always implement robust error handling for API calls.

5. **Testing**: Always test in a staging environment before deploying to production.

## Common Use Cases
- Announcing user achievements
- Highlighting community milestones
- Creating custom engagement notifications
- Notifying about special events or promotions
- Combining this API with Likeminds webhooks to create dynamic, real-time notification experiences.

## Additional Resources
- [LikeMinds API Documentation](https://docs.likeminds.community/rest-api#/)
- [Webhook Configuration Guide](https://docs.likeminds.community/rest-api/webhooks-guide)

---



================================================
File: rest-api/webhooks-guide.md
================================================
---
title: Webhooks
sidebar_position: 3
---


# Overview

A webhook is an HTTP request used to provide push notifications. LikeMinds sends webhook to update your systems about certain changes or events, such as when a user creates a conversation/post or tags someone in a chat.

To receive Likeminds webhooks, you need to set up a dedicated endpoint on your server as a webhook listener that can receive POST requests, then provide this endpoint URL to Likeminds.

## Configuring Webhooks

Before you can start receiving webhooks from Likeminds, you need to follow these steps:

1.  **Set up a Webhook Listener**: You'll need to setup a Webhook endpoint with a valid URL which can accept POST data from incoming webhook events.

2.  **Create an Auth Token using an Admin/CM account**:

    -   Call the `POST /sdk/initiate` [Endpoint](https://docs.likeminds.community/rest-api#/operations/sdkInitate) with your Admin/CM credentials:

        ```bash
        curl --location 'https://auth.likeminds.community/sdk/initiate'
        --header 'x-api-key: <YOUR API KEY>'
        --data '{
            "user_name": "<Name of User>",
            "user_unique_id": "<UUID of Admin/CM>"
        }'
        ```

    -   Extract the access_token from the response body.

3.  **Register a new webhook for your Organization**:

    -   Call the `POST /webhook` [Endpoint](https://docs.likeminds.community/rest-api#/operations/enableWebhook) to set the webhook url, status, and type:

        ```bash
        curl --location '<https://auth.likeminds.community/webhook>'
        --header 'Authorization: <auth_token>'
        --data '{
            "webhook_type": "<webhook_type>",
            "url": "<your_webhook_url>",
            "is_active": false
        }'
        ```

## Webhook Retry Mechanism

In case of a non-200 HTTP status or timeout, LikeMinds will resend the webhook event. Here are the retry mechanism details:

-   **Max retries:** 3
-   **Time interval:** 1 second, 1 minute, and 1 hour.

If all three retries fail (excluding the initial trial), the webhook status will be set to inactive. You can set it back to active using the [Update Webhook API](https://docs.likeminds.community/rest-api#/operations/updateWebhook).

## Supported Webhook Events

Likeminds currently supports the following webhook event types:


### Chat Webhooks

| Webhook type              | Trigger Event                     |
|-------------------------------------|-----------------------------------|
| chatroom.joined           | A user has joined/followed a chatroom |
| chatroom.left             | A user has left a chatroom        |
| chatroom.user.tagged      | User/s have been tagged in a chatroom conversation |
| chatroom.conversation.replied | A conversation in a chatroom is replied to |
| profile.created           | A new profile/user is created in the community |
| notifications.chat       | All Chat notifications and its payload |

### Feed Webhooks

| Webhook type              | Trigger Event                     |
|---------------------------|-----------------------------------|
| post.created              | A new post is created             |
| post.pinned               | A post is pinned                  |
| post.liked                | A post is liked by a user         |
| post.tagged               | A user is tagged in a post text   |
| comment.added             | A comment is added on a post      |
| comment.tagged            | A user is tagged in a comment text |
| comment.react             | A user has liked/reacted on a comment |
| notifications.feed        | All feed notifications and its payload |


## Webhook Payload Structure

The payload structure for each webhook event type follows a consistent format, with some variations in the data object depending on the specific event type. The general structure is as follows:

```json
{
  "id": string, // Event ID
  "created_at": int, // Webhook trigger time (Unix timestamp in Milliseconds)
  "event": string, // Event name (e.g., "post.created", "chatroom.joined")
  "source": string, // Source identifier (e.g., "LM_FEED", "LM_CHAT")
  "data": {} // Event-specific data object
}
```

### Defined Object Structures:
<!-- -------------------------- -->

#### user

```json
{
  "user": {
    "id": int, // User ID
    "custom_title": string, // Custom title
    "image_url": string, // User image URL
    "is_guest": boolean, // Indicates if the user is a guest
    "is_deleted": boolean, // If user is deleted
    "name": string, // User name
    "sdk_client_info": {
      "community": number, // Community ID
      "uuid": string // customer UUID
    },
    "uuid": string // LM UUID
  }
}
```

#### post

```json
{
  "post": {
    "_id": string, // Post ID
    "attachments": [], // Attachments of post
    "comment_ids": null | array, // comment IDs or null
    "comments_count": number, // Number of comments
    "community_id": number, // Community ID
    "created_at": number, // Post creation time (Unix timestamp in ms)
    "heading": string, // Post heading
    "is_edited": boolean, // Indicates if the post has been edited
    "is_liked": boolean, // Indicates if the user has liked the post
    "is_pinned": boolean, // Indicates if the post is pinned
    "is_repost": boolean, // Indicates if the post is a repost
    "is_reposted_by_user": boolean, // Indicates if the post is reposted by the user
    "is_saved": boolean, // Indicates if the post is saved
    "likes_count": number, // Number of likes
    "menu_items": [], // menu items
    "repost_count": number, // Number of reposts
    "text": string, // Post text content
    "topics": [],
    "updated_at": number, // Post update time (Unix timestamp in ms)
    "uuid": string // LM UUID
  }
}
```

#### comment

```json
{
  "comment": {
    "_id": string, // Comment ID
    "temp_id": string | null, // Temporary ID or null
    "text": string, // Comment text
    "level": int, // Comment level (e.g., 1 for root comment, 2 for reply to a root comment, etc.)
    "uuid": string, // UUID of the commenter
    "community_id": int, // Community ID
    "post_id": string, // Post ID the comment belongs to
    "is_liked": boolean, // Indicates if the user has liked the comment
    "likes_count": int, // Number of likes on the comment
    "comments_count": int, // Number of replies to the comment
    "is_edited": boolean, // Indicates if the comment has been edited
    "is_deleted": boolean, // Indicates if the comment has been deleted
    "deleted_by": string, // User ID of the user who deleted the comment
    "deleted_by_uuid": string, // UUID of the user who deleted the comment
    "delete_reason": string, // Reason for deleting the comment
    "parent_comment": {
      // CommentResponse object (recursive structure for nested comments)
    },
    "replies": [
      // Array of CommentResponse objects (replies to this comment)
    ],
    "menu_items": [
      {
        "id": int, // Menu item ID
        "title": string // Menu item title
      }
    ],
    "created_at": int, // Comment creation time (Unix timestamp in ms)
    "updated_at": int // Comment update time (Unix timestamp in ms)
  }
}
```

#### topic

```json
{
  "topic": {
    "_id": string, // Topic ID
    "name": string, // Topic name
    "is_enabled": boolean, // Indicates if the topic is enabled
    "priority": int, // Topic priority
    "is_searchable": boolean, // Indicates if the topic is searchable
    "parent_id": string, // Parent topic ID
    "parent_name": string, // Parent topic name
    "level": int, // Topic level (e.g., 0 for root topic, 1 for child-topic, etc.)
    "widget_id": string // Widget ID associated with the topic
  }
}
```

#### widget

```json
{
  "widget": {
    "_id": string, // Widget ID
    "parent_entity_id": string, // Parent entity ID
    "parent_entity_type": string, // Parent entity type
    "metadata": {
      // Key-value pairs for widget metadata
    },
    "created_at": int, // Widget creation time (Unix timestamp in ms)
    "updated_at": int // Widget update time (Unix timestamp in ms)
  }
}
```

#### conversation

```json
{
  "conversation": {
    "conversation_id": string, // Conversation ID
    "creator_id": string, // Creator ID
    "members": [
      string // Array of member IDs
    ],
    "message": string, // Conversation message
    "timestamp": number // Conversation creation time (Unix timestamp)
  }
}
```

#### chatroom

```json
{
  "chatroom": {
    "chatroom_image_url": string, // Chatroom image URL
    "community_id": int, // Community ID
    "community_name": string, // Community name
    "title": string, // Chatroom title
    "header": string, // Chatroom header
    "id": string, // Chatroom ID
    "is_secret": boolean, // Indicates if the chatroom is secret
    "updated_at": int, // Chatroom update time (Unix timestamp in milliseconds)
    "created_at": int, // Chatroom creation time (Unix timestamp in milliseconds)
    "participants_count": int // Number of participants in the chatroom
  }
}

```

### Chat event payloads (data)

#### chatroom.joined

```json
{
  "chatroom": {}, // Chatroom Object
  "user": {}, // User Object
  "join_method": "" // How the user joined
}
```

#### chatroom.user.tagged

```json
{
  "chatroom": {}, // Chatroom Object
  "conversation": {}, // Conversation Object
  "created_by_user": {}, // User Object (Created By User)
  "tagged_users": [{}] // Array of User Objects (Tagged Users)
}
```

#### chatroom.conversation.replied

```json
{
  "chatroom": {}, // Chatroom Object
  "original_conversation": {}, // Original Conversation Object
  "replied_conversation": {}, // Replied Conversation Object
  "original_conversation_user": {}, // User Object (Original Conversation User)
  "replied_conversation_user": {} // User Object (Replied Conversation User)
}
```

#### profile.created

```json
{
  "user": {} // User Object
}
```

#### notifications.chat

```json
{
  "notification_payload": {}, // Notification Payload
  "uuids": [] // Customer UUIDs (Notification Receivers)
}
```

### Feed event payloads (data)

#### post.created

```json
{
  "post": {}, // Post Object
  "topics": {}, // Topics
  "widgets": {}, // Widgets
  "post_creator": {} // Post Creator
}
```

#### post.pinned

```json
{
  "post": {}, // Post Object
  "topics": {}, // Topics
  "widgets": {}, // Widgets
  "post_creator": {}, // Post Creator
  "pinned_by": {} // User Object (Pinned By)
}
```

#### post.tagged

```json
{
  "post": {}, // Post Object
  "topics": {}, // Topics
  "widgets": {}, // Widgets
  "post_creator": {}, // Post Creator
  "tagged_users": [{}] // Array of User Objects (Tagged Users)
}
```

#### post.liked

```json
{
  "post": {}, // Post Object
  "topics": {}, // Topics
  "widgets": {}, // Widgets
  "post_creator": {}, // Post Creator
  "post_liked_by": {} // User Object (User Who Liked the Post)
}
```

#### comment.added

```json
{
  "comment": {}, // Comment Object
  "comment_creator": {}, // User Object (Comment Creator)
  "post": {}, // Post Object
  "topics": {}, // Topics
  "widgets": {}, // Widgets
  "post_creator": {} // Post Creator
}
```

#### comment.tagged

```json
{
  "comment": {}, // Comment Object
  "comment_creator": {}, // User Object (Comment Creator)
  "post": {}, // Post Object
  "topics": {}, // Topics
  "widgets": {}, // Widgets
  "post_creator": {}, // Post Creator
  "tagged_users": [{}] // Array of User Objects (Tagged Users)
}
```

#### comment.react

```json
{
  "comment": {}, // Comment Object
  "comment_creator": {}, // User Object (Comment Creator)
  "post": {}, // Post Object
  "topics": {}, // Topics
  "widgets": {}, // Widgets
  "post_creator": {}, // Post Creator
  "liked_by_user": {} // User Object (User Who Liked/Reacted on the Comment)
}
```

#### notifications.feed

```json
{
  "current_page": int, // current page of uuids
  "total_pages": int, // total pages for the uuids
  "notification_payload": {}, // Notification Payload
  "uuids": [] // Customer UUIDs (Notification Receivers) (paginated to 1000 per page)
}
```

## Examples

Let's say you want to receive a webhook whenever a user sends a conversation in a chatroom. For that, you first need to register a webhook with webhook_type = "conversation.create" using the POST /webhook [Endpoint](https://docs.likeminds.community/rest-api#/operations/enableWebhook), along with a Valid URL.

Here's an example of how you would register the webhook:

```bash
  curl --location 'https://auth.likeminds.community/webhook'\
  --header 'Authorization: <auth_token>'\
  --data '{
      "webhook_type": "conversation.create",
      "url": "<your_webhook_url>",
      "is_active": true
  }'
```

Once registered, Likeminds will send a POST request to your webhook URL whenever a new conversation is created in a chatroom. You can then handle the webhook payload according to your application's requirements.
> **Note:** If your endpoint is IP restricted, please contact `backend[at]likeminds.community` to whitelist the IP addresses from which the webhooks will be sent.

## Best Practices

-   **Design for duplicate and out-of-order webhooks**: Ensure idempotency on actions you take when receiving a webhook. If you drive application state with webhooks, ensure your code doesn't rely on a specific order of webhook receipt.
-   **Handle missed webhooks**: If you (or Likeminds) experience downtime for longer than Likeminds's retry period, you will lose webhooks. If you use webhooks for state transitions, ensure your application can self-heal by requesting data from Likeminds's other endpoints if a webhook is not received within a window. All data present in webhooks is also available through other APIs.
-   **Keep your receiver simple**: It's best to keep your webhook receiver as simple as possible, such as a receiver whose only job is to write the webhook into a queue or reliable storage. This is important for two reasons:
    1.  If the receiver does not respond within certain time (1min), the delivery is considered failed.
    2.  Webhooks can arrive at unpredictable rates, so if you do a lot of work in your receiver (e.g., generating and sending an email), spikes are likely to overwhelm your downstream services or cause rate-limiting if the downstream is a third-party.
-   **Exempt webhook route from CSRF protection**: If you're using a web framework that automatically checks for CSRF tokens on POST requests (e.g., Rails, Django), you might need to exempt the webhooks route from CSRF protection to ensure that legitimate webhook requests can be processed.

## Additional Resources

-   <https://docs.likeminds.community/api>
-   <https://docs.celigo.com/hc/en-us/articles/360015827372-Create-webhook-listeners#Create-a-webhook-export(React)>

This comprehensive documentation should provide you with all the necessary information to set up, configure, authenticate, and utilise webhooks for your LikeMinds integration effectively.

