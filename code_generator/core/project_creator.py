"""
Project creator agent for generating actual Android projects from generated code.
"""

import os
import subprocess
import shutil
from pathlib import Path
from typing import Dict, List, Optional, Callable
from code_generator.config import Settings
from .constants import BUILD_CONFIG_FILES

class ProjectCreator:
    """
    Agent responsible for creating actual Android projects from generated code.
    """
    
    def __init__(self, settings: Settings):
        """
        Initialize the project creator.
        
        Args:
            settings (Settings): Settings object containing configuration
        """
        self.settings = settings
        self.output_dir = os.path.join(os.getcwd(), self.settings.output_dir)
        os.makedirs(self.output_dir, exist_ok=True)
    
    def _build_docker_image(self, project_dir: str) -> bool:
        """
        Build the Docker image for the project.
        
        Args:
            project_dir (str): Path to the project directory
            
        Returns:
            bool: True if build was successful, False otherwise
        """
        try:
            # Get the relative path from code_generator directory
            rel_project_dir = os.path.relpath(project_dir, os.path.join(os.getcwd(), "code_generator"))
            print(f"Relative project directory: {rel_project_dir}")  # Debugging output
            
            # Build the Docker image
            print(f"\nBuilding Docker image for project: {rel_project_dir}")
            build_cmd = [
                "docker", "build",
                "-t", "likeminds-feed-builder",
                "--build-arg", f"PROJECT_DIR={rel_project_dir}",
                "."
            ]
            
            result = subprocess.run(build_cmd, cwd=os.path.join(os.getcwd(), "code_generator"), capture_output=True, text=True)
            
            if result.returncode != 0:
                print(f"Error building Docker image: {result.stderr}")
                return False
                
            print("Docker image built successfully!")
            
            # Create output directory for APK
            output_dir = os.path.join(os.getcwd(), "output")
            os.makedirs(output_dir, exist_ok=True)
            
            # Copy the APK from the container
            print("\nCopying APK to output directory...")
            run_cmd = [
                "docker", "run", "--rm",
                "-v", f"{output_dir}:/output",
                "likeminds-feed-builder",
                "cp", "project/app/build/outputs/apk/debug/app-debug.apk", "/output/"
            ]
            
            result = subprocess.run(run_cmd, capture_output=True, text=True)
            
            if result.returncode != 0:
                print(f"Error copying APK: {result.stderr}")
                return False
                
            print("APK copied successfully!")
            return True
            
        except Exception as e:
            print(f"Error in Docker build process: {str(e)}")
            return False
    
    def _copy_template_resources(self, template_dir: str, project_dir: str, llm_generated_files: List[str]) -> None:
        """
        Copy all resource files from template to project directory, except those generated by LLM.
        
        Args:
            template_dir (str): Path to template directory
            project_dir (str): Path to project directory
            llm_generated_files (List[str]): List of file paths generated by LLM
        """
        template_res_dir = os.path.join(template_dir, 'app', 'src', 'main', 'res')
        project_res_dir = os.path.join(project_dir, 'app', 'src', 'main', 'res')
        
        if not os.path.exists(template_res_dir):
            print(f"Warning: Template resources directory not found: {template_res_dir}")
            return
            
        # Create project resources directory
        os.makedirs(project_res_dir, exist_ok=True)
        
        # Convert LLM generated file paths to relative paths within res directory
        llm_res_files = set()
        for file_path in llm_generated_files:
            if file_path.startswith('app/src/main/res/'):
                rel_path = os.path.relpath(file_path, 'app/src/main/res')
                llm_res_files.add(rel_path)
        
        # Copy all files from template res directory
        for root, dirs, files in os.walk(template_res_dir):
            rel_path = os.path.relpath(root, template_res_dir)
            target_dir = os.path.join(project_res_dir, rel_path)
            
            # Create target directory
            os.makedirs(target_dir, exist_ok=True)
            
            # Copy files
            for file in files:
                source_file = os.path.join(root, file)
                rel_file_path = os.path.join(rel_path, file)
                
                # Skip if file was generated by LLM
                if rel_file_path in llm_res_files:
                    print(f"Skipping LLM generated file: {rel_file_path}")
                    continue
                    
                target_file = os.path.join(target_dir, file)
                shutil.copy2(source_file, target_file)
                print(f"Copied resource file: {rel_file_path}")

    def create_project(self, project_data: Dict, on_chunk: Optional[Callable[[Dict], None]] = None) -> bool:
        """
        Create a complete Android project from the generated data.
        
        Args:
            project_data (Dict): Project data containing file structure and content
            on_chunk (Optional[Callable[[Dict], None]]): Optional callback function for progress updates
            
        Returns:
            bool: True if project was created successfully, False otherwise
        """
        try:
            if not project_data:
                print("Error: No project data provided")
                return False
                
            if "project_name" not in project_data:
                print("Error: Project name not found in project data")
                return False
                
            if "files" not in project_data:
                print("Error: No files found in project data")
                return False
                
            if "namespace" not in project_data:
                print("Error: Namespace not found in project data")
                return False
                
            if "application_id" not in project_data:
                print("Error: Application ID not found in project data")
                return False
            
            # Create project directory
            project_name = project_data["project_name"]
            project_dir = os.path.join(self.output_dir, project_name)
            print(f"\nCreating project directory: {project_dir}")
            os.makedirs(project_dir, exist_ok=True)
            
            # Get template directory path
            template_dir = os.path.join(os.getcwd(), "code_generator", "likeminds-feed-android-social-feed-theme")
            
            # Copy all build configuration files from template
            for file in BUILD_CONFIG_FILES:
                src_path = os.path.join(template_dir, file)
                dst_path = os.path.join(project_dir, file)
                
                # Create parent directories if they don't exist
                os.makedirs(os.path.dirname(dst_path), exist_ok=True)
                
                # Copy file if it exists in template
                if os.path.exists(src_path):
                    if file == 'app/build.gradle':
                        # Read the template build.gradle
                        with open(src_path, 'r') as f:
                            content = f.read()
                        
                        # Replace namespace and applicationId
                        content = content.replace(
                            'namespace \'com.likeminds.feed.social.example\'',
                            f'namespace \'{project_data["namespace"]}\''
                        )
                        content = content.replace(
                            'applicationId "com.likeminds.feed.social.example"',
                            f'applicationId "{project_data["application_id"]}"'
                        )
                        
                        # Write the modified build.gradle
                        with open(dst_path, 'w') as f:
                            f.write(content)
                        print(f"Updated build.gradle with namespace: {project_data['namespace']} and applicationId: {project_data['application_id']}")
                    else:
                        shutil.copy2(src_path, dst_path)
                        print(f"Copied build config file: {file}")
            
            # Get list of files to be generated by LLM
            llm_generated_files = [file_data["path"] for file_data in project_data["files"]]
            
            # Copy template resources
            self._copy_template_resources(template_dir, project_dir, llm_generated_files)
            
            # Create files from generated data
            print("Creating project files...")
            for file_data in project_data["files"]:
                file_path = file_data["path"]
                content = file_data["content"]
                
                full_path = os.path.join(project_dir, file_path)
                print(f"Creating file: {full_path}")
                os.makedirs(os.path.dirname(full_path), exist_ok=True)
                with open(full_path, "w") as f:
                    f.write(content)
                
                # Call on_chunk callback if provided
                if on_chunk:
                    on_chunk({
                        "type": "Result",
                        "value": file_path
                    })
            
            # Build Docker image and get APK
            return self._build_docker_image(project_dir)
            
        except Exception as e:
            print(f"Error creating project: {str(e)}")
            return False 